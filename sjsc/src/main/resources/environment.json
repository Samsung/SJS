/* 
 * Copyright 2014-2016 Samsung Research America, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* This file is a JSON representation of the global environment shared across native and web
 * deployments.
 *
 * The format is an array of "bindings" of type { name:string, type:typerep }
 * A "typerep" is a JSON object with a tag field 'typefamily' in the set:
 *     method, object, function, int, bool, string, array, void
 * (others added as necessary, 'method' referring to attached methods).
 *
 * An object contains a field 'members' which is an array of bindings
 * A function and method each contain a field 'return' which is a typerep,
 * as well as a field 'args' which is an array of bindings.
 * An array contains a field 'elements' which is a typerep corresponding to the element type.
 *
 * Unanswered questions:
 * - Recursive types (are there any in global env?)
 * - Constructors
 * - Polymorphism
 */
[
  { "name": "console",
    "type": { "typefamily": "object",
              "members": [  { "name": "log",
                              "type": { "typefamily": "method",
                                        "args": [ { "name": "str", "type": { "typefamily": "string"} } ],
                                        "return": { "typefamily": "void" } } },
                            { "name": "assert",
                              "type": { "typefamily": "method",
                                        "args": [ { "name": "b", "type": { "typefamily": "bool"} } ],
                                        "return": { "typefamily": "void" } } },
                            { "name": "error",
                              "type": { "typefamily": "method",
                                        "args": [ { "name": "str", "type": { "typefamily": "string"} } ],
                                        "return": { "typefamily": "void" } } },
                            { "name": "warn",
                              "type": { "typefamily": "method",
                                        "args": [ { "name": "str", "type": { "typefamily": "string"} } ],
                                        "return": { "typefamily": "void" } } } ] } },
  { "name": "document",
    "type": { "typefamily": "object",
              "members": [  { "name": "write",
                              "type": { "typefamily": "method",
                                        "args": [ { "name": "str", "type": { "typefamily": "string"} } ],
                                        "return": { "typefamily": "void" } } } ] } },
  { "name": "parseInt",
    "type": { "typefamily": "intersection",
              "members": [ { "typefamily": "function",
                             "args": [ { "name": "str",    "type": { "typefamily": "string" } },
                                       { "name": "radix",  "type": { "typefamily": "int" } } ],
                             "return": { "typefamily": "int" } },
                           { "typefamily": "function",
                             "args": [ { "name": "str",    "type": { "typefamily": "string" } } ],
                             "return": { "typefamily": "int" } } ] } },
  { "name": "parseFloat",
    "type": { "typefamily": "function",
              "args": [ { "name": "str",    "type": { "typefamily": "string" } } ],
              "return": { "typefamily": "double" } } },
  { "name": "readline",
    "type": { "typefamily": "function",
              "args": [  ],
              "return": { "typefamily": "string" } } },            
  { "name": "Math",
    "type": { "typefamily": "object",
              "members": [ { "name": "E", "type": { "typefamily": "double" } },
                           { "name": "LN2", "type": { "typefamily": "double" } },
                           { "name": "LN10", "type": { "typefamily": "double" } },
                           { "name": "LOG2E", "type": { "typefamily": "double" } },
                           { "name": "LOG10E", "type": { "typefamily": "double" } },
                           { "name": "PI", "type": { "typefamily": "double" } },
                           { "name": "SQRT1_2", "type": { "typefamily": "double" } },
                           { "name": "SQRT2", "type": { "typefamily": "double" } },
                           { "name": "abs", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "acos", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "acosh", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "asin", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "asinh", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "atan", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "atanh", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "atan2", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } },
                                                             { "name": "y", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "cbrt", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "ceil", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "cos", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "cosh", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "exp", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "expm1", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "floor", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "int" } } },
                           { "name": "fround", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "hypot", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } },
                                                             { "name": "y", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "imul", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } },
                                                             { "name": "y", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "log", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "log1p", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "log10", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "log2", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "max", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } },
                                                             { "name": "y", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "min", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } },
                                                             { "name": "y", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "pow", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } },
                                                             { "name": "y", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "random", "type": { "typefamily": "method",
                                                   "args": [ ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "round", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "sign", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "sin", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "sinh", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "sqrt", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "tan", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "tanh", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } },
                           { "name": "toSource", "type": { "typefamily": "method",
                                                   "args": [ ],
                                                   "return": { "typefamily": "string" } } },
                           { "name": "trunc", "type": { "typefamily": "method",
                                                   "args": [ { "name": "x", "type": { "typefamily": "double" } } ],
                                                   "return": { "typefamily": "double" } } } ] } },
  { "name": "Infinity",
    "type": { "typefamily": "double" } },
  // TODO: String should intersect object with constructor type, not function
  { "name": "String",
    "type": { "typefamily": "intersection",
              "members": [ { "typefamily": "object",
                             "members": [ { "name": "fromCharCode", "type": { "typefamily": "method",
                                                                              "args": [ { "name": "x", "type": { "typefamily": "int" } } ],
                                                                              "return": { "typefamily": "string" } } } ] },
                           { "typefamily": "function",
                             "args": [ ],
                             "return": { "typefamily": "string" } },
                           { "typefamily": "function",
                             "args": [ { "name": "x", "type": { "typefamily": "string" } } ],
                             "return": { "typefamily": "string" } } ] } },
  { "name": "Number",
    "type": { "typefamily": "object",
              "members": [ { "name": "EPSILON", "type": { "typefamily": "double" } },
                           { "name": "MAX_SAFE_INTEGER", "type": { "typefamily": "int" } },
                           { "name": "MAX_VALUE", "type": { "typefamily": "double" } },
                           { "name": "MIN_SAFE_INTEGER", "type": { "typefamily": "int" } },
                           { "name": "MIN_VALUE", "type": { "typefamily": "double" } },
                           { "name": "NaN", "type": { "typefamily": "double" } },
                           { "name": "NEGATIVE_INFINITY", "type": { "typefamily": "double" } },
                           { "name": "POSITIVE_INFINITY", "type": { "typefamily": "double" } } ] } },
  // TODO: Array should intersect object with constructor type, not function
  { "name": "Array",
    "type": { "typefamily": "intersection",
              "members": [ { "typefamily": "function",
                             "args": [],
                             "return": { "typefamily": "array", "elemtype": { "typefamily": "typevariable", "id": 1 } } },
                           { "typefamily": "function",
                             "args": [ { "name": "x", "type": { "typefamily": "int" } } ],
                             "return": { "typefamily": "array", "elemtype": { "typefamily": "typevariable", "id": 1 } } },
                           { "typefamily": "function",
                             "args": [ { "name": "x", "type": { "typefamily": "typevariable", "id": 1 } },
                                       { "name": "y", "type": { "typefamily": "typevariable", "id": 1 } } ],
                             "return": { "typefamily": "array", "elemtype": { "typefamily": "typevariable", "id": 1 } } } ] } },
  { "name": "Date",
    "type": { "typefamily": "constructor",
              "args": [],
              "return": { "typefamily": "object",
                          "members": [
                                        { "name": "getDate",
                                          "type": { "typefamily": "method",
                                                    "args": [],
                                                    "return": { "typefamily": "int" } } },
                                        { "name": "getDay",
                                          "type": { "typefamily": "method",
                                                    "args": [],
                                                    "return": { "typefamily": "int" } } },
                                        { "name": "getFullYear",
                                          "type": { "typefamily": "method",
                                                    "args": [],
                                                    "return": { "typefamily": "int" } } },
                                        { "name": "getHours",
                                          "type": { "typefamily": "method",
                                                    "args": [],
                                                    "return": { "typefamily": "int" } } },
                                        { "name": "getMilliseconds",
                                          "type": { "typefamily": "method",
                                                    "args": [],
                                                    "return": { "typefamily": "int" } } },
                                        { "name": "getMinutes",
                                          "type": { "typefamily": "method",
                                                    "args": [],
                                                    "return": { "typefamily": "int" } } },
                                        { "name": "getMonth",
                                          "type": { "typefamily": "method",
                                                    "args": [],
                                                    "return": { "typefamily": "int" } } },
                                        { "name": "getSeconds",
                                          "type": { "typefamily": "method",
                                                    "args": [],
                                                    "return": { "typefamily": "int" } } },
                                        { "name": "getTime",
                                          "type": { "typefamily": "method",
                                                    "args": [],
                                                    "return": { "typefamily": "int" } } },
                                        { "name": "getTimezoneOffset",
                                          "type": { "typefamily": "method",
                                                    "args": [],
                                                    "return": { "typefamily": "int" } } },
                                        { "name": "toDateString",
                                          "type": { "typefamily": "method",
                                                    "args": [],
                                                    "return": { "typefamily": "string" } } },
                                        { "name": "valueOf",
                                          "type": { "typefamily": "method",
                                                    "args": [],
                                                    "return": { "typefamily": "int" } } }
                                      ] } } },
  // Intrinsics: Fake global variables modeling the method-syntax intrinsic operations on primitive
  // types
  { "name": "int",
    "intrinsic": true,
    "type": { "typefamily": "intrinsic",
              "operators" : [ { "name": "toExponential",
                                "type": { "typefamily": "method",
                                          "args": [ { "name": "decimal_places", "type": { "typefamily": "int" } } ],
                                          "return": { "typefamily": "string" } } },
                              { "name": "toFixed",
                                "type": { "typefamily": "method",
                                          "args": [ { "name": "decimal_places", "type": { "typefamily": "int" } } ],
                                          "return": { "typefamily": "string" } } },
                              { "name": "toString",
                                "type": { "typefamily": "method",
                                          "args": [ ],
                                          "return": { "typefamily": "string" } } }

                            ] } },
  { "name": "double",
    "intrinsic": true,
    "type": { "typefamily": "intrinsic",
              "operators" : [ { "name": "toExponential",
                                "type": { "typefamily": "method",
                                          "args": [ { "name": "decimal_places", "type": { "typefamily": "int" } } ],
                                          "return": { "typefamily": "string" } } },
                              { "name": "toFixed",
                                "type": { "typefamily": "method",
                                          "args": [ { "name": "decimal_places", "type": { "typefamily": "int" } } ],
                                          "return": { "typefamily": "string" } } },
                              { "name": "toString",
                                "type": { "typefamily": "method",
                                          "args": [ ],
                                          "return": { "typefamily": "string" } } }

                            ] } },
  // The following are bootstrapping hacks, and not part of a proper JS engine global environment
  { "name": "_____type_violation",
    "type": { "typefamily": "function",
              "args": [ ],
              "return": { "typefamily": "void" } } },
  { "name": "assert",
    "type": { "typefamily": "function",
              "args": [ { "name": "str", "type": { "typefamily": "bool"} } ],
              "return": { "typefamily": "void" } } },
  { "name": "print",
    "type": { "typefamily": "function",
              "args": [ { "name": "str", "type": { "typefamily": "string"} } ],
              "return": { "typefamily": "void" } } },
  { "name": "printString",
    "type": { "typefamily": "function",
              "args": [ { "name": "str", "type": { "typefamily": "string"} } ],
              "return": { "typefamily": "void" } } },
  { "name": "printFloat",
    "type": { "typefamily": "function",
              "args": [ { "name": "n", "type": { "typefamily": "double"} } ],
              "return": { "typefamily": "void" } } },
  { "name": "printFloat10",
    "type": { "typefamily": "function",
              "args": [ { "name": "n", "type": { "typefamily": "double"} } ],
              "return": { "typefamily": "void" } } },
  { "name": "string_of_int",
    "type": { "typefamily": "function",
              "args": [ { "name": "i", "type": { "typefamily": "int"} } ],
              "return": { "typefamily": "string" } } },
  { "name": "printInt",
    "type": { "typefamily": "function",
              "args": [ { "name": "i", "type": { "typefamily": "int"} } ],
              "return": { "typefamily": "void" } } }
  // FYI, if you leave a trailing comma on the last element, it adds a null to the array
]
