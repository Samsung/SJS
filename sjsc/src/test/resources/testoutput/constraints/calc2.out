CheckArity(ret(|k.toString|))
CheckArity(ret(|mkState().HandleNumKeys|))
CheckArity(ret(|mkState|))
CheckArity(ret(|op.charAt|))
CheckArity(ret(|op.concat|))
CheckArity(ret(|op.concat|))
CheckArity(ret(|op.concat|))
CheckArity(ret(|op.concat|))
CheckArity(ret(|op.indexOf|))
CheckArity(ret(|op1.toExponential|))
CheckArity(ret(|op1.toString().indexOf|))
CheckArity(ret(|op1.toString|))
CheckArity(ret(|op1.toString|))
CheckArity(ret(|op1.toString|))
CheckArity(ret(|parseFloat|))
CheckArity(ret(|parseFloat|))
CheckArity(ret(|this.Calculate|))
CheckArity(ret(|this.HandleBackKey|))
CheckArity(ret(|this.HandleClearKey|))
CheckArity(ret(|this.HandleEqualKey|))
CheckArity(ret(|this.HandleOperatorKeys|))
CheckArity(ret(|this.UpdateOperand|))
CheckArity(ret(|this.UpdateOperand|))
CheckArity(ret(|this.UpdateOperand|))
CheckArity(ret(|this.UpdateOperand|))
CheckArity(ret(|this.op1.substring|))
CheckArity(ret(|this.op2.substring|))
MakeConcreteConstraint [term=op(-|1|)]
MakeConcreteConstraint [term=|""|]
MakeConcreteConstraint [term=|""|]
MakeConcreteConstraint [term=|""|]
MakeConcreteConstraint [term=|""|]
MakeConcreteConstraint [term=|""|]
MakeConcreteConstraint [term=|""|]
MakeConcreteConstraint [term=|""|]
MakeConcreteConstraint [term=|""|]
MakeConcreteConstraint [term=|""|]
MakeConcreteConstraint [term=|""|]
MakeConcreteConstraint [term=|"-"|]
MakeConcreteConstraint [term=|"-INF"|]
MakeConcreteConstraint [term=|"-INF"|]
MakeConcreteConstraint [term=|"."|]
MakeConcreteConstraint [term=|"."|]
MakeConcreteConstraint [term=|"."|]
MakeConcreteConstraint [term=|"0"|]
MakeConcreteConstraint [term=|"0"|]
MakeConcreteConstraint [term=|"0"|]
MakeConcreteConstraint [term=|"0"|]
MakeConcreteConstraint [term=|"0"|]
MakeConcreteConstraint [term=|"0"|]
MakeConcreteConstraint [term=|"1"|]
MakeConcreteConstraint [term=|"ERROR"|]
MakeConcreteConstraint [term=|"INF"|]
MakeConcreteConstraint [term=|"INF"|]
MakeConcreteConstraint [term=|"NAN"|]
MakeConcreteConstraint [term=|0.000000001|]
MakeConcreteConstraint [term=|0|]
MakeConcreteConstraint [term=|0|]
MakeConcreteConstraint [term=|0|]
MakeConcreteConstraint [term=|0|]
MakeConcreteConstraint [term=|0|]
MakeConcreteConstraint [term=|0|]
MakeConcreteConstraint [term=|100|]
MakeConcreteConstraint [term=|101|]
MakeConcreteConstraint [term=|102|]
MakeConcreteConstraint [term=|103|]
MakeConcreteConstraint [term=|104|]
MakeConcreteConstraint [term=|10|]
MakeConcreteConstraint [term=|11|]
MakeConcreteConstraint [term=|12|]
MakeConcreteConstraint [term=|13|]
MakeConcreteConstraint [term=|14|]
MakeConcreteConstraint [term=|15|]
MakeConcreteConstraint [term=|15|]
MakeConcreteConstraint [term=|16|]
MakeConcreteConstraint [term=|17|]
MakeConcreteConstraint [term=|18|]
MakeConcreteConstraint [term=|1|]
MakeConcreteConstraint [term=|20|]
MakeConcreteConstraint [term=|2|]
MakeConcreteConstraint [term=|3|]
MakeConcreteConstraint [term=|3|]
MakeConcreteConstraint [term=|4|]
MakeConcreteConstraint [term=|5|]
MakeConcreteConstraint [term=|6|]
MakeConcreteConstraint [term=|7|]
MakeConcreteConstraint [term=|7|]
MakeConcreteConstraint [term=|7|]
MakeConcreteConstraint [term=|8|]
MakeConcreteConstraint [term=|9|]
MakeConcreteConstraint [term=|9|]
MakeConcreteConstraint [term=|BTN_ID_0|]
MakeConcreteConstraint [term=|BTN_ID_1|]
MakeConcreteConstraint [term=|BTN_ID_2|]
MakeConcreteConstraint [term=|BTN_ID_3|]
MakeConcreteConstraint [term=|BTN_ID_4|]
MakeConcreteConstraint [term=|BTN_ID_5|]
MakeConcreteConstraint [term=|BTN_ID_6|]
MakeConcreteConstraint [term=|BTN_ID_7|]
MakeConcreteConstraint [term=|BTN_ID_8|]
MakeConcreteConstraint [term=|BTN_ID_9|]
MakeConcreteConstraint [term=|BTN_ID_BACK|]
MakeConcreteConstraint [term=|BTN_ID_CLEAR|]
MakeConcreteConstraint [term=|BTN_ID_COUNT|]
MakeConcreteConstraint [term=|BTN_ID_COUNT|]
MakeConcreteConstraint [term=|BTN_ID_DIVIDE|]
MakeConcreteConstraint [term=|BTN_ID_DOT|]
MakeConcreteConstraint [term=|BTN_ID_EQUAL|]
MakeConcreteConstraint [term=|BTN_ID_MINUS|]
MakeConcreteConstraint [term=|BTN_ID_MULTIPLY|]
MakeConcreteConstraint [term=|BTN_ID_PLUS|]
MakeConcreteConstraint [term=|DIGITS_AFTER_DECIMAL_POINT|]
MakeConcreteConstraint [term=|MAX_DIGITS_AFTER_DECIMAL_POINT|]
MakeConcreteConstraint [term=|MAX_DIGITS_DISPLAY|]
MakeConcreteConstraint [term=|MAX_PRINTABLE_CHARS|]
MakeConcreteConstraint [term=|MIN_PRINTABLE_VALUE|]
MakeConcreteConstraint [term=|MODE_INVALID|]
MakeConcreteConstraint [term=|MODE_OPERAND1|]
MakeConcreteConstraint [term=|MODE_OPERAND1|]
MakeConcreteConstraint [term=|MODE_OPERAND2|]
MakeConcreteConstraint [term=|MODE_OPERATOR|]
MakeConcreteConstraint [term=|MODE_RESULT|]
MakeConcreteConstraint [term=|hint|]
MakeConcreteConstraint [term=|hint|]
MakeConcreteConstraint [term=|k.toString()|]
MakeConcreteConstraint [term=|k|]
MakeConcreteConstraint [term=|k|]
MakeConcreteConstraint [term=|k|]
MakeConcreteConstraint [term=|k|]
MakeConcreteConstraint [term=|k|]
MakeConcreteConstraint [term=|k|]
MakeConcreteConstraint [term=|k|]
MakeConcreteConstraint [term=|k|]
MakeConcreteConstraint [term=|method <anonymous>|]
MakeConcreteConstraint [term=|method <anonymous>|]
MakeConcreteConstraint [term=|method <anonymous>|]
MakeConcreteConstraint [term=|method <anonymous>|]
MakeConcreteConstraint [term=|method <anonymous>|]
MakeConcreteConstraint [term=|method <anonymous>|]
MakeConcreteConstraint [term=|method <anonymous>|]
MakeConcreteConstraint [term=|method <anonymous>|]
MakeConcreteConstraint [term=|mkState()|]
MakeConcreteConstraint [term=|op.charAt(0)|]
MakeConcreteConstraint [term=|op.concat("-")|]
MakeConcreteConstraint [term=|op.concat(".")|]
MakeConcreteConstraint [term=|op.concat("0")|]
MakeConcreteConstraint [term=|op.concat(k.toString())|]
MakeConcreteConstraint [term=|op.indexOf(".")|]
MakeConcreteConstraint [term=|op1.toExponential(7)|]
MakeConcreteConstraint [term=|op1.toString().indexOf(".")|]
MakeConcreteConstraint [term=|op1.toString()|]
MakeConcreteConstraint [term=|op1.toString()|]
MakeConcreteConstraint [term=|op1|]
MakeConcreteConstraint [term=|op1|]
MakeConcreteConstraint [term=|op1|]
MakeConcreteConstraint [term=|op1|]
MakeConcreteConstraint [term=|op2|]
MakeConcreteConstraint [term=|op2|]
MakeConcreteConstraint [term=|op2|]
MakeConcreteConstraint [term=|op2|]
MakeConcreteConstraint [term=|op|]
MakeConcreteConstraint [term=|op|]
MakeConcreteConstraint [term=|op|]
MakeConcreteConstraint [term=|op|]
MakeConcreteConstraint [term=|op|]
MakeConcreteConstraint [term=|op|]
MakeConcreteConstraint [term=|op|]
MakeConcreteConstraint [term=|op|]
MakeConcreteConstraint [term=|parseFloat(this.op1)|]
MakeConcreteConstraint [term=|parseFloat(this.op2)|]
MakeConcreteConstraint [term=|this.BTN_ID_COUNT|]
MakeConcreteConstraint [term=|this.BTN_ID_COUNT|]
MakeConcreteConstraint [term=|this.BTN_ID_PLUS|]
MakeConcreteConstraint [term=|this.MAX_PRINTABLE_CHARS|]
MakeConcreteConstraint [term=|this.MODE_INVALID|]
MakeConcreteConstraint [term=|this.MODE_INVALID|]
MakeConcreteConstraint [term=|this.MODE_INVALID|]
MakeConcreteConstraint [term=|this.MODE_OPERAND1|]
MakeConcreteConstraint [term=|this.MODE_OPERAND1|]
MakeConcreteConstraint [term=|this.MODE_OPERAND1|]
MakeConcreteConstraint [term=|this.MODE_OPERAND1|]
MakeConcreteConstraint [term=|this.MODE_OPERAND2|]
MakeConcreteConstraint [term=|this.MODE_OPERAND2|]
MakeConcreteConstraint [term=|this.MODE_OPERATOR|]
MakeConcreteConstraint [term=|this.MODE_OPERATOR|]
MakeConcreteConstraint [term=|this.MODE_RESULT|]
MakeConcreteConstraint [term=|this.op1.length - 1|]
MakeConcreteConstraint [term=|this.op1.substring(0, this.op1.length - 1)|]
MakeConcreteConstraint [term=|this.op1|]
MakeConcreteConstraint [term=|this.op1|]
MakeConcreteConstraint [term=|this.op1|]
MakeConcreteConstraint [term=|this.op1|]
MakeConcreteConstraint [term=|this.op2.length - 1|]
MakeConcreteConstraint [term=|this.op2.substring(0, this.op2.length - 1)|]
MakeConcreteConstraint [term=|this.op2|]
MakeConcreteConstraint [term=|this.op2|]
MakeConcreteConstraint [term=|this.op2|]
MakeConcreteConstraint [term=|this|]
MakeConcreteConstraint [term=|this|]
MakeConcreteConstraint [term=|this|]
MakeConcreteConstraint [term=|this|]
MakeConcreteConstraint [term=|this|]
MakeConcreteConstraint [term=|this|]
MakeConcreteConstraint [term=|this|]
MakeConcreteConstraint [term=|this|]
MakeConcreteConstraint [term=|this|]
op(-|1|)<:|index|
param(|method <anonymous>|,0)=|k|
param(|method <anonymous>|,0)=|k|
param(|method <anonymous>|,0)=|k|
ret(|method <anonymous>|)=void
ret(|method <anonymous>|)=void
ret(|method <anonymous>|)=void
ret(|method <anonymous>|)=void
ret(|method <anonymous>|)=void
ret(|method <anonymous>|)=void
ret(|method <anonymous>|)=void
ret(|method <anonymous>|)=void
ret(|method <anonymous>|)=void
ret(|method <anonymous>|)=void
void=ret(|method <anonymous>|)
void=ret(|method <anonymous>|)
void=ret(|method <anonymous>|)
void=ret(|method <anonymous>|)
void=ret(|method <anonymous>|)
|""|<:prop(|this|,errString)
|""|<:prop(|this|,op1)
|""|<:prop(|this|,op1)
|""|<:prop(|this|,op2)
|""|<:prop(|this|,op2)
|""|<:prop(|this|,op2)
|""|<:prop(|this|,op2)
|""|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,op2)
|""|<:|op|
|""|<:|op|
|""|=string
|""|=string
|""|=string
|""|=string
|""|=string
|""|=string
|""|=string
|""|=string
|""|=string
|""|=string
|""|=string
|""|=string
|""|=string
|""|=string
|""|=string
|""|=string
|""|=string
|"+"|=string
|"-"|<:param(|op.concat|,0)
|"-"|=string
|"-"|=string
|"-"|=string
|"-"|=string
|"-INF"|<:prop(|this|,errString)
|"-INF"|<:prop(|this|,errString)
|"-INF"|=string
|"-INF"|=string
|"-INF"|=string
|"-inf"|=string
|"."|<:param(|op.concat|,0)
|"."|<:param(|op.indexOf|,0)
|"."|<:param(|op1.toString().indexOf|,0)
|"."|=string
|"."|=string
|"."|=string
|"0"|<:param(|op.concat|,0)
|"0"|<:prop(|this|,op1)
|"0"|<:prop(|this|,op1)
|"0"|<:prop(|this|,op2)
|"0"|<:prop(|this|,op2)
|"0"|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,op1)
|"0"|=string
|"0"|=string
|"0"|=string
|"0"|=string
|"0"|=string
|"0"|=string
|"0"|=string
|"0"|=string
|"0"|=string
|"1"|<:prop(|this|,op2)
|"1"|=string
|"ERROR"|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,errString)
|"ERROR"|=string
|"INF"|<:prop(|this|,errString)
|"INF"|<:prop(|this|,errString)
|"INF"|=string
|"INF"|=string
|"INF"|=string
|"NAN"|<:prop(|this|,errString)
|"NAN"|=string
|"inf"|=string
|(indexOfDec == -1 && op1.toString().length > 8)|=|indexOfDec == -1 && op1.toString().length > 8|
|(k <= this.BTN_ID_9)|=|k <= this.BTN_ID_9|
|(k === this.BTN_ID_MINUS)|=|k === this.BTN_ID_MINUS|
|(k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)|=op(|(k === this.BTN_ID_PLUS)||||(k === this.BTN_ID_MINUS)|)
|(k === this.BTN_ID_PLUS)|=|k === this.BTN_ID_PLUS|
|(this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)|=op(|(this.BTN_ID_0 <= k)|&&|(k <= this.BTN_ID_9)|)
|(this.BTN_ID_0 <= k)|=|this.BTN_ID_0 <= k|
|(this.errString == "-INF")|=|this.errString == "-INF"|
|(this.errString == "INF") || (this.errString == "-INF")|=op(|(this.errString == "INF")||||(this.errString == "-INF")|)
|(this.errString == "INF")|=|this.errString == "INF"|
|(this.op1 == "") || (this.op1 == "0")|=op(|(this.op1 == "")||||(this.op1 == "0")|)
|(this.op1 == "")|=|this.op1 == ""|
|(this.op1 == "0")|=|this.op1 == "0"|
|-1|=op(-|1|)
|-1|=op(-|1|)
|-1|=op(-|1|)
|-1|=op(-|1|)
|0.000000001|<:|MIN_PRINTABLE_VALUE|
|0.000000001|=float
|0|<:param(|op.charAt|,0)
|0|<:param(|this.op1.substring|,0)
|0|<:param(|this.op2.substring|,0)
|0|<:|BTN_ID_0|
|0|<:|hint|
|0|<:|indexOfDec|
|0|=integer
|0|=integer
|0|=integer
|0|=integer
|0|=integer
|0|=integer
|0|=integer
|0|=integer
|0|=integer
|0|=integer
|100|<:|MODE_OPERAND1|
|100|=integer
|101|<:|MODE_OPERATOR|
|101|=integer
|102|<:|MODE_OPERAND2|
|102|=integer
|103|<:|MODE_RESULT|
|103|=integer
|104|<:|MODE_INVALID|
|104|=integer
|10|<:|BTN_ID_DOT|
|10|=integer
|11|<:|BTN_ID_PLUS|
|11|=integer
|12|<:|BTN_ID_MINUS|
|12|=integer
|13|<:|BTN_ID_MULTIPLY|
|13|=integer
|14|<:|BTN_ID_DIVIDE|
|14|=integer
|15|<:|BTN_ID_BACK|
|15|<:|MAX_DIGITS_DISPLAY|
|15|=integer
|15|=integer
|16|<:|BTN_ID_CLEAR|
|16|=integer
|17|<:|BTN_ID_EQUAL|
|17|=integer
|18|<:|BTN_ID_COUNT|
|18|=integer
|1|<:|BTN_ID_1|
|1|=integer
|1|=integer
|1|=integer
|1|=integer
|1|=integer
|1|=integer
|1|=integer
|20|<:|MAX_PRINTABLE_CHARS|
|20|=integer
|2|<:|BTN_ID_2|
|2|=integer
|3|<:param(|mkState().HandleNumKeys|,0)
|3|<:|BTN_ID_3|
|3|=integer
|3|=integer
|4|<:|BTN_ID_4|
|4|=integer
|5|<:|BTN_ID_5|
|5|=integer
|6|<:|BTN_ID_6|
|6|=integer
|7|<:param(|op1.toExponential|,0)
|7|<:|BTN_ID_7|
|7|<:|DIGITS_AFTER_DECIMAL_POINT|
|7|=integer
|7|=integer
|7|=integer
|7|=integer
|8|<:|BTN_ID_8|
|8|=integer
|8|=integer
|9|<:|BTN_ID_9|
|9|<:|MAX_DIGITS_AFTER_DECIMAL_POINT|
|9|=integer
|9|=integer
|BTN_ID_0|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,BTN_ID_0)
|BTN_ID_0|=|BTN_ID_0|
|BTN_ID_1|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,BTN_ID_1)
|BTN_ID_1|=|BTN_ID_1|
|BTN_ID_2|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,BTN_ID_2)
|BTN_ID_2|=|BTN_ID_2|
|BTN_ID_3|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,BTN_ID_3)
|BTN_ID_3|=|BTN_ID_3|
|BTN_ID_4|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,BTN_ID_4)
|BTN_ID_4|=|BTN_ID_4|
|BTN_ID_5|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,BTN_ID_5)
|BTN_ID_5|=|BTN_ID_5|
|BTN_ID_6|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,BTN_ID_6)
|BTN_ID_6|=|BTN_ID_6|
|BTN_ID_7|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,BTN_ID_7)
|BTN_ID_7|=|BTN_ID_7|
|BTN_ID_8|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,BTN_ID_8)
|BTN_ID_8|=|BTN_ID_8|
|BTN_ID_9|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,BTN_ID_9)
|BTN_ID_9|=|BTN_ID_9|
|BTN_ID_BACK|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,BTN_ID_BACK)
|BTN_ID_BACK|=|BTN_ID_BACK|
|BTN_ID_CLEAR|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,BTN_ID_CLEAR)
|BTN_ID_CLEAR|=|BTN_ID_CLEAR|
|BTN_ID_COUNT|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,BTN_ID_COUNT)
|BTN_ID_COUNT|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,operator)
|BTN_ID_COUNT|=|BTN_ID_COUNT|
|BTN_ID_COUNT|=|BTN_ID_COUNT|
|BTN_ID_DIVIDE|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,BTN_ID_DIVIDE)
|BTN_ID_DIVIDE|=|BTN_ID_DIVIDE|
|BTN_ID_DOT|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,BTN_ID_DOT)
|BTN_ID_DOT|=|BTN_ID_DOT|
|BTN_ID_EQUAL|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,BTN_ID_EQUAL)
|BTN_ID_EQUAL|=|BTN_ID_EQUAL|
|BTN_ID_MINUS|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,BTN_ID_MINUS)
|BTN_ID_MINUS|=|BTN_ID_MINUS|
|BTN_ID_MULTIPLY|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,BTN_ID_MULTIPLY)
|BTN_ID_MULTIPLY|=|BTN_ID_MULTIPLY|
|BTN_ID_PLUS|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,BTN_ID_PLUS)
|BTN_ID_PLUS|=|BTN_ID_PLUS|
|DIGITS_AFTER_DECIMAL_POINT|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,DIGITS_AFTER_DECIMAL_POINT)
|DIGITS_AFTER_DECIMAL_POINT|=|DIGITS_AFTER_DECIMAL_POINT|
|MAX_DIGITS_AFTER_DECIMAL_POINT|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,MAX_DIGITS_AFTER_DECIMAL_POINT)
|MAX_DIGITS_AFTER_DECIMAL_POINT|=|MAX_DIGITS_AFTER_DECIMAL_POINT|
|MAX_DIGITS_DISPLAY|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,MAX_DIGITS_DISPLAY)
|MAX_DIGITS_DISPLAY|=|MAX_DIGITS_DISPLAY|
|MAX_PRINTABLE_CHARS|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,MAX_PRINTABLE_CHARS)
|MAX_PRINTABLE_CHARS|=|MAX_PRINTABLE_CHARS|
|MIN_PRINTABLE_VALUE|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,MIN_PRINTABLE_VALUE)
|MIN_PRINTABLE_VALUE|=|MIN_PRINTABLE_VALUE|
|MODE_INVALID|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,MODE_INVALID)
|MODE_INVALID|=|MODE_INVALID|
|MODE_OPERAND1|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,MODE_OPERAND1)
|MODE_OPERAND1|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,calcMode)
|MODE_OPERAND1|=|MODE_OPERAND1|
|MODE_OPERAND1|=|MODE_OPERAND1|
|MODE_OPERAND2|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,MODE_OPERAND2)
|MODE_OPERAND2|=|MODE_OPERAND2|
|MODE_OPERATOR|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,MODE_OPERATOR)
|MODE_OPERATOR|=|MODE_OPERATOR|
|MODE_RESULT|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,MODE_RESULT)
|MODE_RESULT|=|MODE_RESULT|
|charCount++|=op(|charCount|++)
|charCount++|=op(|charCount|++)
|charCount|=|charCount|
|charCount|=|charCount|
|charCount|=|charCount|
|false|<:ret(|method <anonymous>|)
|false|=boolean
|function mkState|<:|mkState|
|hint|<:|k|
|hint|<:|k|
|hint|=|hint|
|hint|=|hint|
|index != -1|=op(|index|!=op(-|1|))
|index = op.indexOf(".")|=|index|
|index == -1|=op(|index|==op(-|1|))
|indexOfDec = op1.toString().indexOf(".")|=|indexOfDec|
|indexOfDec == -1 && op1.toString().length > 8|=op(|indexOfDec == -1|&&|op1.toString().length > 8|)
|indexOfDec == -1|=op(|indexOfDec|==op(-|1|))
|indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)|=op(|indexOfDec > 7||||(indexOfDec == -1 && op1.toString().length > 8)|)
|indexOfDec > 7|=op(|indexOfDec|>|7|)
|indexOfDec|=|indexOfDec|
|indexOfDec|=|indexOfDec|
|indexOfDec|=|indexOfDec|
|index|=|index|
|index|=|index|
|index|=|index|
|k <= this.BTN_ID_9|=op(|k|<=|this.BTN_ID_9|)
|k = hint|=|k|
|k = hint|=|k|
|k == this.BTN_ID_DOT|=op(|k|==|this.BTN_ID_DOT|)
|k == this.BTN_ID_MINUS|=op(|k|==|this.BTN_ID_MINUS|)
|k == this.BTN_ID_MINUS|=op(|k|==|this.BTN_ID_MINUS|)
|k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS|=op(|k == this.BTN_ID_PLUS||||k == this.BTN_ID_MINUS|)
|k == this.BTN_ID_PLUS|=op(|k|==|this.BTN_ID_PLUS|)
|k === this.BTN_ID_MINUS|=op(|k|===|this.BTN_ID_MINUS|)
|k === this.BTN_ID_PLUS|=op(|k|===|this.BTN_ID_PLUS|)
|k.toString()|<:param(|op.concat|,0)
|k.toString()|=ret(|k.toString|)
|k.toString|=prop(|k|,toString)
|k|<:param(|this.HandleOperatorKeys|,0)
|k|<:param(|this.UpdateOperand|,0)
|k|<:param(|this.UpdateOperand|,0)
|k|<:param(|this.UpdateOperand|,0)
|k|<:param(|this.UpdateOperand|,0)
|k|<:prop(|this|,operator)
|k|<:prop(|this|,operator)
|k|=|k|
|k|=|k|
|k|=|k|
|k|=|k|
|k|=|k|
|k|=|k|
|k|=|k|
|k|=|k|
|k|=|k|
|k|=|k|
|k|=|k|
|k|=|k|
|k|=|k|
|k|=|k|
|k|=|k|
|k|=|k|
|k|=|k|
|k|=|k|
|method <anonymous>|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,Calculate)
|method <anonymous>|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,GetResult)
|method <anonymous>|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,HandleBackKey)
|method <anonymous>|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,HandleClearKey)
|method <anonymous>|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,HandleEqualKey)
|method <anonymous>|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,HandleNumKeys)
|method <anonymous>|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,HandleOperatorKeys)
|method <anonymous>|<:prop(|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|,UpdateOperand)
|mkState().HandleNumKeys(3)|=ret(|mkState().HandleNumKeys|)
|mkState().HandleNumKeys|=prop(|mkState()|,HandleNumKeys)
|mkState()|=ret(|mkState|)
|mkState|=|mkState|
|op = ""|=|op|
|op = op.concat("-")|=|op|
|op = op.concat(".")|=|op|
|op = op.concat("0")|=|op|
|op = op.concat(k.toString())|=|op|
|op = this.op1|=|op|
|op = this.op2|=|op|
|op == "" || op == "-"|=op(|op == ""||||op == "-"|)
|op == ""|=op(|op|==|""|)
|op == ""|=op(|op|==|""|)
|op == "-"|=op(|op|==|"-"|)
|op == "0"|=op(|op|==|"0"|)
|op.charAt(0)|<:|sign|
|op.charAt(0)|=ret(|op.charAt|)
|op.charAt|=prop(|op|,charAt)
|op.concat("-")|<:|op|
|op.concat("-")|=ret(|op.concat|)
|op.concat(".")|<:|op|
|op.concat(".")|=ret(|op.concat|)
|op.concat("0")|<:|op|
|op.concat("0")|=ret(|op.concat|)
|op.concat(k.toString())|<:|op|
|op.concat(k.toString())|=ret(|op.concat|)
|op.concat|=prop(|op|,concat)
|op.concat|=prop(|op|,concat)
|op.concat|=prop(|op|,concat)
|op.concat|=prop(|op|,concat)
|op.indexOf(".")|<:|index|
|op.indexOf(".")|=ret(|op.indexOf|)
|op.indexOf|=prop(|op|,indexOf)
|op.length < charCount|=op(|op.length|<|charCount|)
|op.length|=prop(|op|,length)
|op1 *= op2|=|op1|
|op1 += op2|=|op1|
|op1 -= op2|=|op1|
|op1 /= op2|=|op1|
|op1 < this.MIN_PRINTABLE_VALUE|=op(|op1|<|this.MIN_PRINTABLE_VALUE|)
|op1 == 0|=op(|op1|==|0|)
|op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE|=op(|op1 > 0|&&|op1 < this.MIN_PRINTABLE_VALUE|)
|op1 > 0|=op(|op1|>|0|)
|op1 > 0|=op(|op1|>|0|)
|op1.toExponential(7)|<:prop(|this|,op1)
|op1.toExponential(7)|=ret(|op1.toExponential|)
|op1.toExponential|=prop(|op1|,toExponential)
|op1.toString().indexOf(".")|<:|indexOfDec|
|op1.toString().indexOf(".")|=ret(|op1.toString().indexOf|)
|op1.toString().indexOf|=prop(|op1.toString()|,indexOf)
|op1.toString().length > 8|=op(|op1.toString().length|>|8|)
|op1.toString().length|=prop(|op1.toString()|,length)
|op1.toString()|<:prop(|this|,op1)
|op1.toString()|=ret(|op1.toString|)
|op1.toString()|=ret(|op1.toString|)
|op1.toString()|=ret(|op1.toString|)
|op1.toString|=prop(|op1|,toString)
|op1.toString|=prop(|op1|,toString)
|op1.toString|=prop(|op1|,toString)
|op1|=|op1|
|op1|=|op1|
|op1|=|op1|
|op1|=|op1|
|op1|=|op1|
|op1|=|op1|
|op1|=|op1|
|op1|=|op1|
|op1|=|op1|
|op1|=|op1|
|op1|=|op1|
|op1|=|op1|
|op2 != 0|=op(|op2|!=|0|)
|op2|<:|op1|
|op2|<:|op1|
|op2|<:|op1|
|op2|<:|op1|
|op2|=|op2|
|op2|=|op2|
|op2|=|op2|
|op2|=|op2|
|op2|=|op2|
|op|<:prop(|this|,op1)
|op|<:prop(|this|,op2)
|op|=|op|
|op|=|op|
|op|=|op|
|op|=|op|
|op|=|op|
|op|=|op|
|op|=|op|
|op|=|op|
|op|=|op|
|op|=|op|
|op|=|op|
|op|=|op|
|op|=|op|
|op|=|op|
|op|=|op|
|op|=|op|
|op|=|op|
|op|=|op|
|op|=|op|
|op|=|op|
|parseFloat(this.op1)|<:|op1|
|parseFloat(this.op1)|=ret(|parseFloat|)
|parseFloat(this.op2)|<:|op2|
|parseFloat(this.op2)|=ret(|parseFloat|)
|parseFloat|=|parseFloat|
|parseFloat|=|parseFloat|
|sign == "+"|=op(|sign|==|"+"|)
|sign == "-" || sign == "+"|=op(|sign == "-"||||sign == "+"|)
|sign == "-"|=op(|sign|==|"-"|)
|sign|=|sign|
|sign|=|sign|
|this.BTN_ID_0 <= k|=op(|this.BTN_ID_0|<=|k|)
|this.BTN_ID_0|=prop(|this|,BTN_ID_0)
|this.BTN_ID_9|=prop(|this|,BTN_ID_9)
|this.BTN_ID_COUNT|<:prop(|this|,operator)
|this.BTN_ID_COUNT|<:prop(|this|,operator)
|this.BTN_ID_COUNT|=prop(|this|,BTN_ID_COUNT)
|this.BTN_ID_COUNT|=prop(|this|,BTN_ID_COUNT)
|this.BTN_ID_DIVIDE|=prop(|this|,BTN_ID_DIVIDE)
|this.BTN_ID_DIVIDE|=prop(|this|,BTN_ID_DIVIDE)
|this.BTN_ID_DOT|=prop(|this|,BTN_ID_DOT)
|this.BTN_ID_MINUS|=prop(|this|,BTN_ID_MINUS)
|this.BTN_ID_MINUS|=prop(|this|,BTN_ID_MINUS)
|this.BTN_ID_MINUS|=prop(|this|,BTN_ID_MINUS)
|this.BTN_ID_MINUS|=prop(|this|,BTN_ID_MINUS)
|this.BTN_ID_MULTIPLY|=prop(|this|,BTN_ID_MULTIPLY)
|this.BTN_ID_MULTIPLY|=prop(|this|,BTN_ID_MULTIPLY)
|this.BTN_ID_PLUS|<:prop(|this|,operator)
|this.BTN_ID_PLUS|=prop(|this|,BTN_ID_PLUS)
|this.BTN_ID_PLUS|=prop(|this|,BTN_ID_PLUS)
|this.BTN_ID_PLUS|=prop(|this|,BTN_ID_PLUS)
|this.BTN_ID_PLUS|=prop(|this|,BTN_ID_PLUS)
|this.Calculate()|=ret(|this.Calculate|)
|this.Calculate|=prop(|this|,Calculate)
|this.HandleBackKey()|=ret(|this.HandleBackKey|)
|this.HandleBackKey|=prop(|this|,HandleBackKey)
|this.HandleClearKey()|=ret(|this.HandleClearKey|)
|this.HandleClearKey|=prop(|this|,HandleClearKey)
|this.HandleEqualKey()|=ret(|this.HandleEqualKey|)
|this.HandleEqualKey|=prop(|this|,HandleEqualKey)
|this.HandleOperatorKeys(k)|=ret(|this.HandleOperatorKeys|)
|this.HandleOperatorKeys|=prop(|this|,HandleOperatorKeys)
|this.MAX_PRINTABLE_CHARS|<:|charCount|
|this.MAX_PRINTABLE_CHARS|=prop(|this|,MAX_PRINTABLE_CHARS)
|this.MIN_PRINTABLE_VALUE|=prop(|this|,MIN_PRINTABLE_VALUE)
|this.MODE_INVALID|<:prop(|this|,calcMode)
|this.MODE_INVALID|<:prop(|this|,calcMode)
|this.MODE_INVALID|<:prop(|this|,calcMode)
|this.MODE_INVALID|=prop(|this|,MODE_INVALID)
|this.MODE_INVALID|=prop(|this|,MODE_INVALID)
|this.MODE_INVALID|=prop(|this|,MODE_INVALID)
|this.MODE_INVALID|=prop(|this|,MODE_INVALID)
|this.MODE_INVALID|=prop(|this|,MODE_INVALID)
|this.MODE_INVALID|=prop(|this|,MODE_INVALID)
|this.MODE_INVALID|=prop(|this|,MODE_INVALID)
|this.MODE_INVALID|=prop(|this|,MODE_INVALID)
|this.MODE_OPERAND1|<:prop(|this|,calcMode)
|this.MODE_OPERAND1|<:prop(|this|,calcMode)
|this.MODE_OPERAND1|<:prop(|this|,calcMode)
|this.MODE_OPERAND1|<:prop(|this|,calcMode)
|this.MODE_OPERAND1|=prop(|this|,MODE_OPERAND1)
|this.MODE_OPERAND1|=prop(|this|,MODE_OPERAND1)
|this.MODE_OPERAND1|=prop(|this|,MODE_OPERAND1)
|this.MODE_OPERAND1|=prop(|this|,MODE_OPERAND1)
|this.MODE_OPERAND1|=prop(|this|,MODE_OPERAND1)
|this.MODE_OPERAND1|=prop(|this|,MODE_OPERAND1)
|this.MODE_OPERAND1|=prop(|this|,MODE_OPERAND1)
|this.MODE_OPERAND1|=prop(|this|,MODE_OPERAND1)
|this.MODE_OPERAND1|=prop(|this|,MODE_OPERAND1)
|this.MODE_OPERAND1|=prop(|this|,MODE_OPERAND1)
|this.MODE_OPERAND1|=prop(|this|,MODE_OPERAND1)
|this.MODE_OPERAND2|<:prop(|this|,calcMode)
|this.MODE_OPERAND2|<:prop(|this|,calcMode)
|this.MODE_OPERAND2|=prop(|this|,MODE_OPERAND2)
|this.MODE_OPERAND2|=prop(|this|,MODE_OPERAND2)
|this.MODE_OPERAND2|=prop(|this|,MODE_OPERAND2)
|this.MODE_OPERAND2|=prop(|this|,MODE_OPERAND2)
|this.MODE_OPERAND2|=prop(|this|,MODE_OPERAND2)
|this.MODE_OPERAND2|=prop(|this|,MODE_OPERAND2)
|this.MODE_OPERAND2|=prop(|this|,MODE_OPERAND2)
|this.MODE_OPERATOR|<:prop(|this|,calcMode)
|this.MODE_OPERATOR|<:prop(|this|,calcMode)
|this.MODE_OPERATOR|=prop(|this|,MODE_OPERATOR)
|this.MODE_OPERATOR|=prop(|this|,MODE_OPERATOR)
|this.MODE_OPERATOR|=prop(|this|,MODE_OPERATOR)
|this.MODE_OPERATOR|=prop(|this|,MODE_OPERATOR)
|this.MODE_OPERATOR|=prop(|this|,MODE_OPERATOR)
|this.MODE_OPERATOR|=prop(|this|,MODE_OPERATOR)
|this.MODE_OPERATOR|=prop(|this|,MODE_OPERATOR)
|this.MODE_RESULT|<:prop(|this|,calcMode)
|this.MODE_RESULT|=prop(|this|,MODE_RESULT)
|this.MODE_RESULT|=prop(|this|,MODE_RESULT)
|this.MODE_RESULT|=prop(|this|,MODE_RESULT)
|this.MODE_RESULT|=prop(|this|,MODE_RESULT)
|this.MODE_RESULT|=prop(|this|,MODE_RESULT)
|this.MODE_RESULT|=prop(|this|,MODE_RESULT)
|this.UpdateOperand(k)|<:ret(|method <anonymous>|)
|this.UpdateOperand(k)|=ret(|this.UpdateOperand|)
|this.UpdateOperand(k)|=ret(|this.UpdateOperand|)
|this.UpdateOperand(k)|=ret(|this.UpdateOperand|)
|this.UpdateOperand(k)|=ret(|this.UpdateOperand|)
|this.UpdateOperand|=prop(|this|,UpdateOperand)
|this.UpdateOperand|=prop(|this|,UpdateOperand)
|this.UpdateOperand|=prop(|this|,UpdateOperand)
|this.UpdateOperand|=prop(|this|,UpdateOperand)
|this.calcMode = this.MODE_INVALID|=prop(|this|,calcMode)
|this.calcMode = this.MODE_INVALID|=prop(|this|,calcMode)
|this.calcMode = this.MODE_INVALID|=prop(|this|,calcMode)
|this.calcMode = this.MODE_OPERAND1|=prop(|this|,calcMode)
|this.calcMode = this.MODE_OPERAND1|=prop(|this|,calcMode)
|this.calcMode = this.MODE_OPERAND1|=prop(|this|,calcMode)
|this.calcMode = this.MODE_OPERAND1|=prop(|this|,calcMode)
|this.calcMode = this.MODE_OPERAND2|=prop(|this|,calcMode)
|this.calcMode = this.MODE_OPERAND2|=prop(|this|,calcMode)
|this.calcMode = this.MODE_OPERATOR|=prop(|this|,calcMode)
|this.calcMode = this.MODE_OPERATOR|=prop(|this|,calcMode)
|this.calcMode = this.MODE_RESULT|=prop(|this|,calcMode)
|this.calcMode === this.MODE_OPERAND1|=op(|this.calcMode|===|this.MODE_OPERAND1|)
|this.calcMode === this.MODE_OPERAND1|=op(|this.calcMode|===|this.MODE_OPERAND1|)
|this.calcMode|=prop(|this|,calcMode)
|this.calcMode|=prop(|this|,calcMode)
|this.calcMode|=prop(|this|,calcMode)
|this.calcMode|=prop(|this|,calcMode)
|this.calcMode|=prop(|this|,calcMode)
|this.calcMode|=prop(|this|,calcMode)
|this.calcMode|=prop(|this|,calcMode)
|this.calcMode|=prop(|this|,calcMode)
|this.calcMode|=prop(|this|,calcMode)
|this.calcMode|=prop(|this|,calcMode)
|this.calcMode|=prop(|this|,calcMode)
|this.calcMode|=prop(|this|,calcMode)
|this.calcMode|=prop(|this|,calcMode)
|this.calcMode|=prop(|this|,calcMode)
|this.calcMode|=prop(|this|,calcMode)
|this.calcMode|=prop(|this|,calcMode)
|this.calcMode|=prop(|this|,calcMode)
|this.calcMode|=prop(|this|,calcMode)
|this.calcMode|=prop(|this|,calcMode)
|this.calcMode|=|this.MODE_INVALID|
|this.calcMode|=|this.MODE_INVALID|
|this.calcMode|=|this.MODE_INVALID|
|this.calcMode|=|this.MODE_INVALID|
|this.calcMode|=|this.MODE_INVALID|
|this.calcMode|=|this.MODE_OPERAND1|
|this.calcMode|=|this.MODE_OPERAND1|
|this.calcMode|=|this.MODE_OPERAND1|
|this.calcMode|=|this.MODE_OPERAND1|
|this.calcMode|=|this.MODE_OPERAND1|
|this.calcMode|=|this.MODE_OPERAND2|
|this.calcMode|=|this.MODE_OPERAND2|
|this.calcMode|=|this.MODE_OPERAND2|
|this.calcMode|=|this.MODE_OPERAND2|
|this.calcMode|=|this.MODE_OPERAND2|
|this.calcMode|=|this.MODE_OPERATOR|
|this.calcMode|=|this.MODE_OPERATOR|
|this.calcMode|=|this.MODE_OPERATOR|
|this.calcMode|=|this.MODE_OPERATOR|
|this.calcMode|=|this.MODE_OPERATOR|
|this.calcMode|=|this.MODE_RESULT|
|this.calcMode|=|this.MODE_RESULT|
|this.calcMode|=|this.MODE_RESULT|
|this.calcMode|=|this.MODE_RESULT|
|this.calcMode|=|this.MODE_RESULT|
|this.errString = ""|=prop(|this|,errString)
|this.errString = "-INF"|=prop(|this|,errString)
|this.errString = "-INF"|=prop(|this|,errString)
|this.errString = "INF"|=prop(|this|,errString)
|this.errString = "INF"|=prop(|this|,errString)
|this.errString = "NAN"|=prop(|this|,errString)
|this.errString == "-INF"|=op(|this.errString|==|"-INF"|)
|this.errString == "INF"|=op(|this.errString|==|"INF"|)
|this.errString|<:ret(|method <anonymous>|)
|this.errString|<:ret(|method <anonymous>|)
|this.errString|=prop(|this|,errString)
|this.errString|=prop(|this|,errString)
|this.errString|=prop(|this|,errString)
|this.errString|=prop(|this|,errString)
|this.errString|=prop(|this|,errString)
|this.errString|=prop(|this|,errString)
|this.errString|=prop(|this|,errString)
|this.errString|=prop(|this|,errString)
|this.errString|=prop(|this|,errString)
|this.errString|=prop(|this|,errString)
|this.op1 != ""|=op(|this.op1|!=|""|)
|this.op1 = ""|=prop(|this|,op1)
|this.op1 = ""|=prop(|this|,op1)
|this.op1 = "0"|=prop(|this|,op1)
|this.op1 = "0"|=prop(|this|,op1)
|this.op1 = op1.toExponential(7)|=prop(|this|,op1)
|this.op1 = op1.toString()|=prop(|this|,op1)
|this.op1 = op|=prop(|this|,op1)
|this.op1 = this.op1.substring(0, this.op1.length - 1)|=prop(|this|,op1)
|this.op1 == ""|=op(|this.op1|==|""|)
|this.op1 == "-inf"|=op(|this.op1|==|"-inf"|)
|this.op1 == "0"|=op(|this.op1|==|"0"|)
|this.op1 == "0"|=op(|this.op1|==|"0"|)
|this.op1 == "inf"|=op(|this.op1|==|"inf"|)
|this.op1.length - 1|<:param(|this.op1.substring|,1)
|this.op1.length - 1|=op(|this.op1.length|-|1|)
|this.op1.length|=prop(|this.op1|,length)
|this.op1.substring(0, this.op1.length - 1)|<:prop(|this|,op1)
|this.op1.substring(0, this.op1.length - 1)|=ret(|this.op1.substring|)
|this.op1.substring|=prop(|this.op1|,substring)
|this.op1|<:param(|parseFloat|,0)
|this.op1|<:prop(|this|,op2)
|this.op1|<:ret(|method <anonymous>|)
|this.op1|<:ret(|method <anonymous>|)
|this.op1|<:|op|
|this.op1|=prop(|this|,op1)
|this.op1|=prop(|this|,op1)
|this.op1|=prop(|this|,op1)
|this.op1|=prop(|this|,op1)
|this.op1|=prop(|this|,op1)
|this.op1|=prop(|this|,op1)
|this.op1|=prop(|this|,op1)
|this.op1|=prop(|this|,op1)
|this.op1|=prop(|this|,op1)
|this.op1|=prop(|this|,op1)
|this.op1|=prop(|this|,op1)
|this.op1|=prop(|this|,op1)
|this.op1|=prop(|this|,op1)
|this.op1|=prop(|this|,op1)
|this.op1|=prop(|this|,op1)
|this.op1|=prop(|this|,op1)
|this.op1|=prop(|this|,op1)
|this.op1|=prop(|this|,op1)
|this.op1|=prop(|this|,op1)
|this.op1|=prop(|this|,op1)
|this.op1|=prop(|this|,op1)
|this.op2 != ""|=op(|this.op2|!=|""|)
|this.op2 = ""|=prop(|this|,op2)
|this.op2 = ""|=prop(|this|,op2)
|this.op2 = ""|=prop(|this|,op2)
|this.op2 = ""|=prop(|this|,op2)
|this.op2 = "0"|=prop(|this|,op2)
|this.op2 = "0"|=prop(|this|,op2)
|this.op2 = "1"|=prop(|this|,op2)
|this.op2 = op|=prop(|this|,op2)
|this.op2 = this.op1|=prop(|this|,op2)
|this.op2 = this.op2.substring(0, this.op2.length - 1)|=prop(|this|,op2)
|this.op2 == "" || this.op2 == "-"|=op(|this.op2 == ""||||this.op2 == "-"|)
|this.op2 == ""|=op(|this.op2|==|""|)
|this.op2 == ""|=op(|this.op2|==|""|)
|this.op2 == "-"|=op(|this.op2|==|"-"|)
|this.op2.length - 1|<:param(|this.op2.substring|,1)
|this.op2.length - 1|=op(|this.op2.length|-|1|)
|this.op2.length|=prop(|this.op2|,length)
|this.op2.substring(0, this.op2.length - 1)|<:prop(|this|,op2)
|this.op2.substring(0, this.op2.length - 1)|=ret(|this.op2.substring|)
|this.op2.substring|=prop(|this.op2|,substring)
|this.op2|<:param(|parseFloat|,0)
|this.op2|<:ret(|method <anonymous>|)
|this.op2|<:|op|
|this.op2|=prop(|this|,op2)
|this.op2|=prop(|this|,op2)
|this.op2|=prop(|this|,op2)
|this.op2|=prop(|this|,op2)
|this.op2|=prop(|this|,op2)
|this.op2|=prop(|this|,op2)
|this.op2|=prop(|this|,op2)
|this.op2|=prop(|this|,op2)
|this.op2|=prop(|this|,op2)
|this.op2|=prop(|this|,op2)
|this.op2|=prop(|this|,op2)
|this.op2|=prop(|this|,op2)
|this.op2|=prop(|this|,op2)
|this.op2|=prop(|this|,op2)
|this.op2|=prop(|this|,op2)
|this.op2|=prop(|this|,op2)
|this.op2|=prop(|this|,op2)
|this.op2|=prop(|this|,op2)
|this.op2|=prop(|this|,op2)
|this.operator = k|=prop(|this|,operator)
|this.operator = k|=prop(|this|,operator)
|this.operator = this.BTN_ID_COUNT|=prop(|this|,operator)
|this.operator = this.BTN_ID_COUNT|=prop(|this|,operator)
|this.operator = this.BTN_ID_PLUS|=prop(|this|,operator)
|this.operator == this.BTN_ID_DIVIDE|=op(|this.operator|==|this.BTN_ID_DIVIDE|)
|this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE|=op(|this.operator == this.BTN_ID_MULTIPLY||||this.operator == this.BTN_ID_DIVIDE|)
|this.operator == this.BTN_ID_MULTIPLY|=op(|this.operator|==|this.BTN_ID_MULTIPLY|)
|this.operator|=prop(|this|,operator)
|this.operator|=prop(|this|,operator)
|this.operator|=prop(|this|,operator)
|this.operator|=prop(|this|,operator)
|this.operator|=prop(|this|,operator)
|this.operator|=prop(|this|,operator)
|this.operator|=prop(|this|,operator)
|this.operator|=prop(|this|,operator)
|this.operator|=|this.BTN_ID_DIVIDE|
|this.operator|=|this.BTN_ID_MINUS|
|this.operator|=|this.BTN_ID_MULTIPLY|
|this.operator|=|this.BTN_ID_PLUS|
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=receiver(|method <anonymous>|)
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|this|=|this|
|true|<:ret(|method <anonymous>|)
|true|<:ret(|method <anonymous>|)
|true|=boolean
|true|=boolean
|{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}}|<:ret(|function mkState|)
