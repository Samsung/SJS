"" --> string
"" --> string
"" --> string
"0" --> string
"0".charCodeAt --> [](integer) -> integer
"0".charCodeAt(0) --> integer
"0123456789abcdefghijklmnopqrstuvwxyz" --> string
"A" --> string
"A".charCodeAt --> [](integer) -> integer
"A".charCodeAt(0) --> integer
"\t:" --> string
"\t:" --> string
"a" --> string
"a".charCodeAt --> [](integer) -> integer
"a".charCodeAt(0) --> integer
$d + "" --> string
$d --> integer
$d --> integer
$d --> integer
$d --> integer
$d = (functions.intValue)((functions.divide)((functions.add)((functions.multiply)($z0, three), $z1), $z2)) --> integer
$g --> {  | arr: Array<integer>, s: integer, t: integer }
$g --> {  | arr: Array<integer>, s: integer, t: integer }
$g --> {  | arr: Array<integer>, s: integer, t: integer }
$g = (functions.nbv)(g += 2) --> {  | arr: Array<integer>, s: integer, t: integer }
$i % 10 --> integer
$i % 10 == 0 --> boolean
$i --> integer
$i --> integer
$i --> integer
$i --> integer
$i --> integer
$i --> integer
$i = $n % 10 --> integer
$k --> {  | arr: Array<integer>, s: integer, t: integer }
$k --> {  | arr: Array<integer>, s: integer, t: integer }
$k = (functions.nbv)(++k) --> {  | arr: Array<integer>, s: integer, t: integer }
$l --> {  | arr: Array<integer>, s: integer, t: integer }
$l --> {  | arr: Array<integer>, s: integer, t: integer }
$l = (functions.nbv)(l += 4) --> {  | arr: Array<integer>, s: integer, t: integer }
$n % 10 --> integer
$n --> integer
$n --> integer
$n --> integer
$n --> integer
$s + "\t:" + $i --> string
$s + "\t:" + $n --> string
$s + "\t:" --> string
$s + "\t:" --> string
$s += ($d + "") --> string
$s += Array(11 - $i).join(' ') --> string
$s --> string
$s --> string
$s --> string
$s --> string
$s --> string
$s --> string
$s --> string
$s = "" --> string
$s.length --> integer
$s.length > 0 --> boolean
$z0 --> {  | arr: Array<integer>, s: integer, t: integer }
$z0 --> {  | arr: Array<integer>, s: integer, t: integer }
$z0 --> {  | arr: Array<integer>, s: integer, t: integer }
$z0 --> {  | arr: Array<integer>, s: integer, t: integer }
$z0 --> {  | arr: Array<integer>, s: integer, t: integer }
$z0 --> {  | arr: Array<integer>, s: integer, t: integer }
$z0 --> {  | arr: Array<integer>, s: integer, t: integer }
$z0 --> {  | arr: Array<integer>, s: integer, t: integer }
$z0 --> {  | arr: Array<integer>, s: integer, t: integer }
$z0 = (functions.multiply)($z0, $k = (functions.nbv)(++k)) --> {  | arr: Array<integer>, s: integer, t: integer }
$z0 = (functions.multiply)($z0, ten) --> {  | arr: Array<integer>, s: integer, t: integer }
$z1 --> {  | arr: Array<integer>, s: integer, t: integer }
$z1 --> {  | arr: Array<integer>, s: integer, t: integer }
$z1 --> {  | arr: Array<integer>, s: integer, t: integer }
$z1 --> {  | arr: Array<integer>, s: integer, t: integer }
$z1 --> {  | arr: Array<integer>, s: integer, t: integer }
$z1 --> {  | arr: Array<integer>, s: integer, t: integer }
$z1 --> {  | arr: Array<integer>, s: integer, t: integer }
$z1 --> {  | arr: Array<integer>, s: integer, t: integer }
$z1 --> {  | arr: Array<integer>, s: integer, t: integer }
$z1 --> {  | arr: Array<integer>, s: integer, t: integer }
$z1 --> {  | arr: Array<integer>, s: integer, t: integer }
$z1 = (functions.multiply)($z1, $g = (functions.nbv)(g += 2)) --> {  | arr: Array<integer>, s: integer, t: integer }
$z1 = (functions.multiply)($z1, ten) --> {  | arr: Array<integer>, s: integer, t: integer }
$z2 --> {  | arr: Array<integer>, s: integer, t: integer }
$z2 --> {  | arr: Array<integer>, s: integer, t: integer }
$z2 --> {  | arr: Array<integer>, s: integer, t: integer }
$z2 --> {  | arr: Array<integer>, s: integer, t: integer }
$z2 --> {  | arr: Array<integer>, s: integer, t: integer }
$z2 --> {  | arr: Array<integer>, s: integer, t: integer }
$z2 --> {  | arr: Array<integer>, s: integer, t: integer }
$z2 = (functions.multiply)($z2, $g) --> {  | arr: Array<integer>, s: integer, t: integer }
' ' --> string
($d + "") --> string
($d = (functions.intValue)((functions.divide)((functions.add)((functions.multiply)($z0, three), $z1), $z2))) != (functions.intValue)((functions.divide)((functions.add)((functions.shiftLeft)($z0, 2), $z1), $z2)) --> boolean
($d = (functions.intValue)((functions.divide)((functions.add)((functions.multiply)($z0, three), $z1), $z2))) --> integer
($i = $n % 10) != 0 --> boolean
($i = $n % 10) --> integer
(((m = xh * (l = (z = This.arr[i]) & 3fff) + xl * (h = z >> 14)) & 3fff) << 14) + xl * l + w.arr[j] + c --> integer
(((m = xh * (l = (z = This.arr[i]) & 3fff) + xl * (h = z >> 14)) & 3fff) << 14) + xl * l + w.arr[j] --> integer
(((m = xh * (l = (z = This.arr[i]) & 3fff) + xl * (h = z >> 14)) & 3fff) << 14) + xl * l --> integer
(((m = xh * (l = (z = This.arr[i]) & 3fff) + xl * (h = z >> 14)) & 3fff) << 14) --> integer
((1 << (32 - DB)) - 1) --> integer
((1 << dbits) - 1) --> integer
((m = xh * (l = (z = This.arr[i]) & 3fff) + xl * (h = z >> 14)) & 3fff) --> integer
((m = xh * (l = (z = This.arr[i]) & 3fff) + xl * (h = z >> 14)) & 3fff) << 14 --> integer
((o.arr[1] & ((1 << (32 - DB)) - 1)) << DB) --> integer
((o.arr[1] & ((1 << (32 - DB)) - 1)) << DB) | o.arr[0] --> integer
((s = o.s) << bs) & DM --> integer
((s = o.s) << bs) --> integer
((ys > 1) ? y.arr[ys - 2] >> F2 : 0) --> integer
((z = o.arr[i]) & bm) --> integer
((z = o.arr[i]) & bm) << cbs --> integer
((z = o.arr[i]) >> cbs) --> integer
((z = o.arr[i]) >> cbs) | c --> integer
(1 << (32 - DB)) - 1 --> integer
(1 << (32 - DB)) --> integer
(1 << F1) --> integer
(1 << F1) --> integer
(1 << F1) / yt --> float
(1 << bs) - 1 --> integer
(1 << bs) --> integer
(1 << cbs) - 1 --> integer
(1 << cbs) --> integer
(1 << dbits) - 1 --> integer
(1 << dbits) --> integer
(1 << dbits) --> integer
(32 - DB) --> integer
(c < 0) --> boolean
(c < 0) --> boolean
(c < 0) ? -1 : 0 --> integer
(c < 0) ? -1 : 0 --> integer
(function() {
  var dbits = 28, BI_FP = 52, DB = dbits, DM = ((1 << dbits) - 1), DV = (1 << dbits), FV = Math.floor(Math.pow(2.0, BI_FP * 1.0)), F1 = BI_FP - dbits, F2 = 2 * dbits - BI_FP;
  function am(This, i, x, w, j, c, n) {
    var xl = x & 3fff, xh = x >> 14, z, l, h, m;
    if (--n >= 0) 
    for (; ; ) 
      {
        l = (((m = xh * (l = (z = This.arr[i]) & 3fff) + xl * (h = z >> 14)) & 3fff) << 14) + xl * l + w.arr[j] + c;
        w.arr[j++] = l & fffffff;
        ++i;
        if (--n >= 0) 
        {
          c = (l >> 28) + (m >> 14) + xh * h;
        } else {
          return (l >> 28) + (m >> 14) + xh * h;
        }
      }
    return c;
  }
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr, vv;
  rr = "0".charCodeAt(0);
  for (vv = 0; vv <= 9; ++vv) 
    BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for (vv = 10; vv < 36; ++vv) 
    BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for (vv = 10; vv < 36; ++vv) 
    BI_RC[rr++] = vv;
  function copyTo(o, r) {
    for (var i = (r.t = o.t) - 1; i >= 0; --i) 
      r.arr[i] = o.arr[i];
    r.s = o.s;
  }
  function fromInt(o, x) {
    o.t = 1;
    o.s = (x < 0) ? -1 : 0;
    if (x > 0) 
    o.arr[0] = x; else if (x < -1) 
    o.arr[0] = x + DV; else o.t = 0;
  }
  function nbv(i) {
    var r = {arr: [], s: 0, t: 0};
    fromInt(r, i);
    return r;
  }
  function clamp(r) {
    var c = r.s & DM, t = r.t;
    while (t > 0 && r.arr[t - 1] == c) 
      {
        --t;
      }
    r.t = t;
  }
  function negate(o) {
    var r = {arr: [], s: 0, t: 0};
    bnpSubTo(ZERO, o, r);
    return r;
  }
  function abs(o) {
    return (o.s < 0) ? negate(o) : o;
  }
  function bnCompareTo(o, a) {
    var r = o.s - a.s;
    if (r != 0) 
    return r;
    var i = o.t;
    r = i - a.t;
    if (r != 0) 
    return r;
    while (--i >= 0) 
      if ((r = o.arr[i] - a.arr[i]) != 0) 
      return r;
    return 0;
  }
  function nbits(x) {
    var r = 1, t;
    if ((t = x >>> 16) != 0) 
    {
      x = t;
      r += 16;
    }
    if ((t = x >> 8) != 0) 
    {
      x = t;
      r += 8;
    }
    if ((t = x >> 4) != 0) 
    {
      x = t;
      r += 4;
    }
    if ((t = x >> 2) != 0) 
    {
      x = t;
      r += 2;
    }
    if ((t = x >> 1) != 0) 
    {
      x = t;
      r += 1;
    }
    return r;
  }
  function bnpDLShift(o, n) {
    var i, t, r = {arr: Array((t = o.t) + n), s: 0, t: 0};
    for (i = t - 1; i >= 0; --i) 
      r.arr[i + n] = o.arr[i];
    for (i = n - 1; i >= 0; --i) 
      r.arr[i] = 0;
    r.t = t + n;
    r.s = o.s;
    return r;
  }
  function bnpDRShiftTo(o, n, r) {
    for (var i = n; i < o.t; ++i) 
      r.arr[i - n] = o.arr[i];
    r.t = Math.floor(Math.max(o.t - n * 1.0, 0.0));
    r.s = o.s;
  }
  function bnpLShiftTo(o, n, r) {
    var bs = n % DB, cbs = DB - bs, bm = (1 << cbs) - 1, ds = Math.floor(n / DB + 0.0), c = ((s = o.s) << bs) & DM, i, z, t, s;
    for (i = (t = o.t) - 1; i >= 0; --i) 
      {
        r.arr[i + ds + 1] = ((z = o.arr[i]) >> cbs) | c;
        c = (z & bm) << bs;
      }
    for (i = ds - 1; i >= 0; --i) 
      r.arr[i] = 0;
    r.arr[ds] = c;
    r.t = t + ds + 1;
    r.s = s;
    clamp(r);
  }
  function bnpRShiftTo(o, n, r) {
    r.s = o.s;
    var ds = Math.floor(n / DB + 0.0), t = o.t, z;
    if (ds >= t) 
    {
      r.t = 0;
      return;
    }
    var bs = n % DB, cbs = DB - bs, bm = (1 << bs) - 1;
    r.arr[0] = o.arr[ds] >> bs;
    for (var i = ds + 1; i < t; ++i) 
      {
        r.arr[i - ds - 1] |= ((z = o.arr[i]) & bm) << cbs;
        r.arr[i - ds] = z >> bs;
      }
    if (bs > 0) 
    r.arr[t - ds - 1] |= (o.s & bm) << cbs;
    r.t = t - ds;
    clamp(r);
  }
  function bnpSubTo(o, a, r) {
    var i = 0, c = 0, t, m = Math.min(a.t * 1.0, t = o.t * 1.0);
    while (i < m) 
      {
        c += o.arr[i] - a.arr[i];
        r.arr[i++] = c & DM;
        c >>= DB;
      }
    if (a.t < t) 
    {
      c -= a.s;
      while (i < t) 
        {
          c += o.arr[i];
          r.arr[i++] = c & DM;
          c >>= DB;
        }
      c += o.s;
    } else {
      c += o.s;
      while (i < a.t) 
        {
          c -= a.arr[i];
          r.arr[i++] = c & DM;
          c >>= DB;
        }
      c -= a.s;
    }
    r.s = (c < 0) ? -1 : 0;
    if (c < -1) 
    r.arr[i++] = DV + c; else if (c > 0) 
    r.arr[i++] = c;
    r.t = i;
    clamp(r);
  }
  function bnpMultiplyTo(o, a, r) {
    var x = abs(o), y = abs(a);
    var i = x.t;
    r.t = i + y.t;
    while (--i >= 0) 
      r.arr[i] = 0;
    for (i = 0; i < y.t; ++i) 
      r.arr[i + x.t] = am(x, 0, y.arr[i], r, i, 0, x.t);
    r.s = 0;
    clamp(r);
    if (o.s != a.s) 
    bnpSubTo(ZERO, r, r);
  }
  function bnpDivRemTo(o, m, q, r) {
    var pm = abs(m);
    if (pm.t <= 0) 
    return;
    var pt = abs(o);
    if (pt.t < pm.t) 
    {
      fromInt(q, 0);
      if (r != null) 
      copyTo(o, r);
      return;
    }
    if (r == null) 
    r = {arr: [], s: 0, t: 0};
    var y = {arr: [], s: 0, t: 0}, ts = o.s, ms = m.s;
    var nsh = DB - nbits(pm.arr[pm.t - 1]);
    if (nsh > 0) 
    {
      bnpLShiftTo(pm, nsh, y);
      bnpLShiftTo(pt, nsh, r);
    } else {
      copyTo(pm, y);
      copyTo(pt, r);
    }
    var ys = y.t;
    var y0 = y.arr[ys - 1];
    if (y0 == 0) 
    return;
    var yt = y0 * (1 << F1) + ((ys > 1) ? y.arr[ys - 2] >> F2 : 0);
    var d1 = FV / yt, d2 = (1 << F1) / yt, e = 1 << F2;
    var i = r.t, j = i - ys, t = bnpDLShift(y, j);
    if (bnCompareTo(r, t) >= 0) 
    {
      r.arr[r.t++] = 1;
      bnpSubTo(r, t, r);
    }
    t = bnpDLShift(ONE, ys);
    bnpSubTo(t, y, y);
    while (y.t < ys) 
      y.arr[y.t++] = 0;
    while (--j >= 0) 
      {
        var qd = (r.arr[--i] == y0) ? DM : Math.floor(r.arr[i] * d1 + (r.arr[i - 1] + e) * d2 + 0.0);
        if ((r.arr[i] += am(y, 0, qd, r, j, 0, ys)) < qd) 
        {
          t = bnpDLShift(y, j);
          bnpSubTo(r, t, r);
          while (r.arr[i] < --qd) 
            bnpSubTo(r, t, r);
        }
      }
    if (q != null) 
    {
      bnpDRShiftTo(r, ys, q);
      if (ts != ms) 
      bnpSubTo(ZERO, q, q);
    }
    r.t = ys;
    clamp(r);
    if (nsh > 0) 
    bnpRShiftTo(r, nsh, r);
    if (ts < 0) 
    bnpSubTo(ZERO, r, r);
  }
  var ZERO = nbv(0);
  var ONE = nbv(1);
  function intValue(o) {
    if (o.s < 0) 
    {
      if (o.t == 1) 
      return o.arr[0] - DV; else if (o.t == 0) 
      return -1;
    } else if (o.t == 1) 
    return o.arr[0]; else if (o.t == 0) 
    return 0;
    return ((o.arr[1] & ((1 << (32 - DB)) - 1)) << DB) | o.arr[0];
  }
  function shiftLeft(o, n) {
    var r = {arr: [], s: 0, t: 0};
    if (n < 0) 
    bnpRShiftTo(o, -n, r); else bnpLShiftTo(o, n, r);
    return r;
  }
  function bnpAddTo(o, a, r) {
    var i = 0, c = 0, m = Math.min(a.t * 1.0, o.t * 1.0);
    while (i < m) 
      {
        c += o.arr[i] + a.arr[i];
        r.arr[i++] = c & DM;
        c >>= DB;
      }
    if (a.t < o.t) 
    {
      c += a.s;
      while (i < o.t) 
        {
          c += o.arr[i];
          r.arr[i++] = c & DM;
          c >>= DB;
        }
      c += o.s;
    } else {
      c += o.s;
      while (i < a.t) 
        {
          c += a.arr[i];
          r.arr[i++] = c & DM;
          c >>= DB;
        }
      c += a.s;
    }
    r.s = (c < 0) ? -1 : 0;
    if (c > 0) 
    r.arr[i++] = c; else if (c < -1) 
    r.arr[i++] = DV + c;
    r.t = i;
    clamp(r);
  }
  return {compareTo: bnCompareTo, multiply: function multiply(o, a) {
  var r = {arr: [], s: 0, t: 0};
  bnpMultiplyTo(o, a, r);
  return r;
}, divide: function divide(o, a) {
  var r = {arr: [], s: 0, t: 0};
  bnpDivRemTo(o, a, r, null);
  return r;
}, addTo: bnpAddTo, add: function add(o, a) {
  var r = {arr: [], s: 0, t: 0};
  bnpAddTo(o, a, r);
  return r;
}, nbv: nbv, shiftLeft: shiftLeft, intValue: intValue};
}) --> () -> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
(function() {
  var dbits = 28, BI_FP = 52, DB = dbits, DM = ((1 << dbits) - 1), DV = (1 << dbits), FV = Math.floor(Math.pow(2.0, BI_FP * 1.0)), F1 = BI_FP - dbits, F2 = 2 * dbits - BI_FP;
  function am(This, i, x, w, j, c, n) {
    var xl = x & 3fff, xh = x >> 14, z, l, h, m;
    if (--n >= 0) 
    for (; ; ) 
      {
        l = (((m = xh * (l = (z = This.arr[i]) & 3fff) + xl * (h = z >> 14)) & 3fff) << 14) + xl * l + w.arr[j] + c;
        w.arr[j++] = l & fffffff;
        ++i;
        if (--n >= 0) 
        {
          c = (l >> 28) + (m >> 14) + xh * h;
        } else {
          return (l >> 28) + (m >> 14) + xh * h;
        }
      }
    return c;
  }
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr, vv;
  rr = "0".charCodeAt(0);
  for (vv = 0; vv <= 9; ++vv) 
    BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for (vv = 10; vv < 36; ++vv) 
    BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for (vv = 10; vv < 36; ++vv) 
    BI_RC[rr++] = vv;
  function copyTo(o, r) {
    for (var i = (r.t = o.t) - 1; i >= 0; --i) 
      r.arr[i] = o.arr[i];
    r.s = o.s;
  }
  function fromInt(o, x) {
    o.t = 1;
    o.s = (x < 0) ? -1 : 0;
    if (x > 0) 
    o.arr[0] = x; else if (x < -1) 
    o.arr[0] = x + DV; else o.t = 0;
  }
  function nbv(i) {
    var r = {arr: [], s: 0, t: 0};
    fromInt(r, i);
    return r;
  }
  function clamp(r) {
    var c = r.s & DM, t = r.t;
    while (t > 0 && r.arr[t - 1] == c) 
      {
        --t;
      }
    r.t = t;
  }
  function negate(o) {
    var r = {arr: [], s: 0, t: 0};
    bnpSubTo(ZERO, o, r);
    return r;
  }
  function abs(o) {
    return (o.s < 0) ? negate(o) : o;
  }
  function bnCompareTo(o, a) {
    var r = o.s - a.s;
    if (r != 0) 
    return r;
    var i = o.t;
    r = i - a.t;
    if (r != 0) 
    return r;
    while (--i >= 0) 
      if ((r = o.arr[i] - a.arr[i]) != 0) 
      return r;
    return 0;
  }
  function nbits(x) {
    var r = 1, t;
    if ((t = x >>> 16) != 0) 
    {
      x = t;
      r += 16;
    }
    if ((t = x >> 8) != 0) 
    {
      x = t;
      r += 8;
    }
    if ((t = x >> 4) != 0) 
    {
      x = t;
      r += 4;
    }
    if ((t = x >> 2) != 0) 
    {
      x = t;
      r += 2;
    }
    if ((t = x >> 1) != 0) 
    {
      x = t;
      r += 1;
    }
    return r;
  }
  function bnpDLShift(o, n) {
    var i, t, r = {arr: Array((t = o.t) + n), s: 0, t: 0};
    for (i = t - 1; i >= 0; --i) 
      r.arr[i + n] = o.arr[i];
    for (i = n - 1; i >= 0; --i) 
      r.arr[i] = 0;
    r.t = t + n;
    r.s = o.s;
    return r;
  }
  function bnpDRShiftTo(o, n, r) {
    for (var i = n; i < o.t; ++i) 
      r.arr[i - n] = o.arr[i];
    r.t = Math.floor(Math.max(o.t - n * 1.0, 0.0));
    r.s = o.s;
  }
  function bnpLShiftTo(o, n, r) {
    var bs = n % DB, cbs = DB - bs, bm = (1 << cbs) - 1, ds = Math.floor(n / DB + 0.0), c = ((s = o.s) << bs) & DM, i, z, t, s;
    for (i = (t = o.t) - 1; i >= 0; --i) 
      {
        r.arr[i + ds + 1] = ((z = o.arr[i]) >> cbs) | c;
        c = (z & bm) << bs;
      }
    for (i = ds - 1; i >= 0; --i) 
      r.arr[i] = 0;
    r.arr[ds] = c;
    r.t = t + ds + 1;
    r.s = s;
    clamp(r);
  }
  function bnpRShiftTo(o, n, r) {
    r.s = o.s;
    var ds = Math.floor(n / DB + 0.0), t = o.t, z;
    if (ds >= t) 
    {
      r.t = 0;
      return;
    }
    var bs = n % DB, cbs = DB - bs, bm = (1 << bs) - 1;
    r.arr[0] = o.arr[ds] >> bs;
    for (var i = ds + 1; i < t; ++i) 
      {
        r.arr[i - ds - 1] |= ((z = o.arr[i]) & bm) << cbs;
        r.arr[i - ds] = z >> bs;
      }
    if (bs > 0) 
    r.arr[t - ds - 1] |= (o.s & bm) << cbs;
    r.t = t - ds;
    clamp(r);
  }
  function bnpSubTo(o, a, r) {
    var i = 0, c = 0, t, m = Math.min(a.t * 1.0, t = o.t * 1.0);
    while (i < m) 
      {
        c += o.arr[i] - a.arr[i];
        r.arr[i++] = c & DM;
        c >>= DB;
      }
    if (a.t < t) 
    {
      c -= a.s;
      while (i < t) 
        {
          c += o.arr[i];
          r.arr[i++] = c & DM;
          c >>= DB;
        }
      c += o.s;
    } else {
      c += o.s;
      while (i < a.t) 
        {
          c -= a.arr[i];
          r.arr[i++] = c & DM;
          c >>= DB;
        }
      c -= a.s;
    }
    r.s = (c < 0) ? -1 : 0;
    if (c < -1) 
    r.arr[i++] = DV + c; else if (c > 0) 
    r.arr[i++] = c;
    r.t = i;
    clamp(r);
  }
  function bnpMultiplyTo(o, a, r) {
    var x = abs(o), y = abs(a);
    var i = x.t;
    r.t = i + y.t;
    while (--i >= 0) 
      r.arr[i] = 0;
    for (i = 0; i < y.t; ++i) 
      r.arr[i + x.t] = am(x, 0, y.arr[i], r, i, 0, x.t);
    r.s = 0;
    clamp(r);
    if (o.s != a.s) 
    bnpSubTo(ZERO, r, r);
  }
  function bnpDivRemTo(o, m, q, r) {
    var pm = abs(m);
    if (pm.t <= 0) 
    return;
    var pt = abs(o);
    if (pt.t < pm.t) 
    {
      fromInt(q, 0);
      if (r != null) 
      copyTo(o, r);
      return;
    }
    if (r == null) 
    r = {arr: [], s: 0, t: 0};
    var y = {arr: [], s: 0, t: 0}, ts = o.s, ms = m.s;
    var nsh = DB - nbits(pm.arr[pm.t - 1]);
    if (nsh > 0) 
    {
      bnpLShiftTo(pm, nsh, y);
      bnpLShiftTo(pt, nsh, r);
    } else {
      copyTo(pm, y);
      copyTo(pt, r);
    }
    var ys = y.t;
    var y0 = y.arr[ys - 1];
    if (y0 == 0) 
    return;
    var yt = y0 * (1 << F1) + ((ys > 1) ? y.arr[ys - 2] >> F2 : 0);
    var d1 = FV / yt, d2 = (1 << F1) / yt, e = 1 << F2;
    var i = r.t, j = i - ys, t = bnpDLShift(y, j);
    if (bnCompareTo(r, t) >= 0) 
    {
      r.arr[r.t++] = 1;
      bnpSubTo(r, t, r);
    }
    t = bnpDLShift(ONE, ys);
    bnpSubTo(t, y, y);
    while (y.t < ys) 
      y.arr[y.t++] = 0;
    while (--j >= 0) 
      {
        var qd = (r.arr[--i] == y0) ? DM : Math.floor(r.arr[i] * d1 + (r.arr[i - 1] + e) * d2 + 0.0);
        if ((r.arr[i] += am(y, 0, qd, r, j, 0, ys)) < qd) 
        {
          t = bnpDLShift(y, j);
          bnpSubTo(r, t, r);
          while (r.arr[i] < --qd) 
            bnpSubTo(r, t, r);
        }
      }
    if (q != null) 
    {
      bnpDRShiftTo(r, ys, q);
      if (ts != ms) 
      bnpSubTo(ZERO, q, q);
    }
    r.t = ys;
    clamp(r);
    if (nsh > 0) 
    bnpRShiftTo(r, nsh, r);
    if (ts < 0) 
    bnpSubTo(ZERO, r, r);
  }
  var ZERO = nbv(0);
  var ONE = nbv(1);
  function intValue(o) {
    if (o.s < 0) 
    {
      if (o.t == 1) 
      return o.arr[0] - DV; else if (o.t == 0) 
      return -1;
    } else if (o.t == 1) 
    return o.arr[0]; else if (o.t == 0) 
    return 0;
    return ((o.arr[1] & ((1 << (32 - DB)) - 1)) << DB) | o.arr[0];
  }
  function shiftLeft(o, n) {
    var r = {arr: [], s: 0, t: 0};
    if (n < 0) 
    bnpRShiftTo(o, -n, r); else bnpLShiftTo(o, n, r);
    return r;
  }
  function bnpAddTo(o, a, r) {
    var i = 0, c = 0, m = Math.min(a.t * 1.0, o.t * 1.0);
    while (i < m) 
      {
        c += o.arr[i] + a.arr[i];
        r.arr[i++] = c & DM;
        c >>= DB;
      }
    if (a.t < o.t) 
    {
      c += a.s;
      while (i < o.t) 
        {
          c += o.arr[i];
          r.arr[i++] = c & DM;
          c >>= DB;
        }
      c += o.s;
    } else {
      c += o.s;
      while (i < a.t) 
        {
          c += a.arr[i];
          r.arr[i++] = c & DM;
          c >>= DB;
        }
      c += a.s;
    }
    r.s = (c < 0) ? -1 : 0;
    if (c > 0) 
    r.arr[i++] = c; else if (c < -1) 
    r.arr[i++] = DV + c;
    r.t = i;
    clamp(r);
  }
  return {compareTo: bnCompareTo, multiply: function multiply(o, a) {
  var r = {arr: [], s: 0, t: 0};
  bnpMultiplyTo(o, a, r);
  return r;
}, divide: function divide(o, a) {
  var r = {arr: [], s: 0, t: 0};
  bnpDivRemTo(o, a, r, null);
  return r;
}, addTo: bnpAddTo, add: function add(o, a) {
  var r = {arr: [], s: 0, t: 0};
  bnpAddTo(o, a, r);
  return r;
}, nbv: nbv, shiftLeft: shiftLeft, intValue: intValue};
})() --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
(functions.add) --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
(functions.add) --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
(functions.add)((functions.multiply)($z0, three), $z1) --> {  | arr: Array<integer>, s: integer, t: integer }
(functions.add)((functions.shiftLeft)($z0, 2), $z1) --> {  | arr: Array<integer>, s: integer, t: integer }
(functions.addTo) --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
(functions.addTo) --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
(functions.addTo)($z1, (functions.multiply)($z0, $l = (functions.nbv)(l += 4)), $z1) --> void
(functions.addTo)($z1, (functions.multiply)($z2, negdigits[$d]), $z1) --> void
(functions.compareTo) --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer
(functions.compareTo)($z0, $z2) --> integer
(functions.compareTo)($z0, $z2) > 0 --> boolean
(functions.compareTo)($z0, $z2) > 0 || ($d = (functions.intValue)((functions.divide)((functions.add)((functions.multiply)($z0, three), $z1), $z2))) != (functions.intValue)((functions.divide)((functions.add)((functions.shiftLeft)($z0, 2), $z1), $z2)) --> boolean
(functions.divide) --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
(functions.divide) --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
(functions.divide)((functions.add)((functions.multiply)($z0, three), $z1), $z2) --> {  | arr: Array<integer>, s: integer, t: integer }
(functions.divide)((functions.add)((functions.shiftLeft)($z0, 2), $z1), $z2) --> {  | arr: Array<integer>, s: integer, t: integer }
(functions.intValue) --> ({  | arr: Array<integer>, s: integer, t: integer }) -> integer
(functions.intValue) --> ({  | arr: Array<integer>, s: integer, t: integer }) -> integer
(functions.intValue)((functions.divide)((functions.add)((functions.multiply)($z0, three), $z1), $z2)) --> integer
(functions.intValue)((functions.divide)((functions.add)((functions.shiftLeft)($z0, 2), $z1), $z2)) --> integer
(functions.multiply) --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
(functions.multiply) --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
(functions.multiply) --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
(functions.multiply) --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
(functions.multiply) --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
(functions.multiply) --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
(functions.multiply) --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
(functions.multiply) --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
(functions.multiply) --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
(functions.multiply)($z0, $k = (functions.nbv)(++k)) --> {  | arr: Array<integer>, s: integer, t: integer }
(functions.multiply)($z0, $l = (functions.nbv)(l += 4)) --> {  | arr: Array<integer>, s: integer, t: integer }
(functions.multiply)($z0, ten) --> {  | arr: Array<integer>, s: integer, t: integer }
(functions.multiply)($z0, three) --> {  | arr: Array<integer>, s: integer, t: integer }
(functions.multiply)($z1, $g = (functions.nbv)(g += 2)) --> {  | arr: Array<integer>, s: integer, t: integer }
(functions.multiply)($z1, ten) --> {  | arr: Array<integer>, s: integer, t: integer }
(functions.multiply)($z2, $g) --> {  | arr: Array<integer>, s: integer, t: integer }
(functions.multiply)($z2, negdigits[$d]) --> {  | arr: Array<integer>, s: integer, t: integer }
(functions.multiply)(digits[i] = (functions.nbv)(i), neg10) --> {  | arr: Array<integer>, s: integer, t: integer }
(functions.nbv) --> (integer) -> {  | arr: Array<integer>, s: integer, t: integer }
(functions.nbv) --> (integer) -> {  | arr: Array<integer>, s: integer, t: integer }
(functions.nbv) --> (integer) -> {  | arr: Array<integer>, s: integer, t: integer }
(functions.nbv) --> (integer) -> {  | arr: Array<integer>, s: integer, t: integer }
(functions.nbv) --> (integer) -> {  | arr: Array<integer>, s: integer, t: integer }
(functions.nbv) --> (integer) -> {  | arr: Array<integer>, s: integer, t: integer }
(functions.nbv) --> (integer) -> {  | arr: Array<integer>, s: integer, t: integer }
(functions.nbv) --> (integer) -> {  | arr: Array<integer>, s: integer, t: integer }
(functions.nbv) --> (integer) -> {  | arr: Array<integer>, s: integer, t: integer }
(functions.nbv) --> (integer) -> {  | arr: Array<integer>, s: integer, t: integer }
(functions.nbv)(++k) --> {  | arr: Array<integer>, s: integer, t: integer }
(functions.nbv)(-10) --> {  | arr: Array<integer>, s: integer, t: integer }
(functions.nbv)(0) --> {  | arr: Array<integer>, s: integer, t: integer }
(functions.nbv)(1) --> {  | arr: Array<integer>, s: integer, t: integer }
(functions.nbv)(1) --> {  | arr: Array<integer>, s: integer, t: integer }
(functions.nbv)(10) --> {  | arr: Array<integer>, s: integer, t: integer }
(functions.nbv)(3) --> {  | arr: Array<integer>, s: integer, t: integer }
(functions.nbv)(g += 2) --> {  | arr: Array<integer>, s: integer, t: integer }
(functions.nbv)(i) --> {  | arr: Array<integer>, s: integer, t: integer }
(functions.nbv)(l += 4) --> {  | arr: Array<integer>, s: integer, t: integer }
(functions.shiftLeft) --> ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }
(functions.shiftLeft)($z0, 2) --> {  | arr: Array<integer>, s: integer, t: integer }
(h = z >> 14) --> integer
(l = (z = This.arr[i]) & 3fff) --> integer
(l >> 28) + (m >> 14) + xh * h --> integer
(l >> 28) + (m >> 14) + xh * h --> integer
(l >> 28) + (m >> 14) --> integer
(l >> 28) + (m >> 14) --> integer
(l >> 28) --> integer
(l >> 28) --> integer
(m = xh * (l = (z = This.arr[i]) & 3fff) + xl * (h = z >> 14)) & 3fff --> integer
(m = xh * (l = (z = This.arr[i]) & 3fff) + xl * (h = z >> 14)) --> integer
(m >> 14) --> integer
(m >> 14) --> integer
(o.arr[1] & ((1 << (32 - DB)) - 1)) --> integer
(o.arr[1] & ((1 << (32 - DB)) - 1)) << DB --> integer
(o.s & bm) --> integer
(o.s & bm) << cbs --> integer
(o.s < 0) --> boolean
(o.s < 0) ? negate(o) : o --> {  | arr: Array<integer>, s: integer, t: integer }
(r = o.arr[i] - a.arr[i]) != 0 --> boolean
(r = o.arr[i] - a.arr[i]) --> integer
(r.arr[--i] == y0) --> boolean
(r.arr[--i] == y0) ? DM : Math.floor(r.arr[i] * d1 + (r.arr[i - 1] + e) * d2 + 0.0) --> integer
(r.arr[i - 1] + e) * d2 --> float
(r.arr[i - 1] + e) --> integer
(r.arr[i] += am(y, 0, qd, r, j, 0, ys)) --> integer
(r.arr[i] += am(y, 0, qd, r, j, 0, ys)) < qd --> boolean
(r.t = o.t) - 1 --> integer
(r.t = o.t) --> integer
(s = o.s) --> integer
(s = o.s) << bs --> integer
(t = o.t) + n --> integer
(t = o.t) - 1 --> integer
(t = o.t) --> integer
(t = o.t) --> integer
(t = x >> 1) != 0 --> boolean
(t = x >> 1) --> integer
(t = x >> 2) != 0 --> boolean
(t = x >> 2) --> integer
(t = x >> 4) != 0 --> boolean
(t = x >> 4) --> integer
(t = x >> 8) != 0 --> boolean
(t = x >> 8) --> integer
(t = x >>> 16) != 0 --> boolean
(t = x >>> 16) --> integer
(x < 0) --> boolean
(x < 0) ? -1 : 0 --> integer
(ys > 1) --> boolean
(ys > 1) ? y.arr[ys - 2] >> F2 : 0 --> integer
(z & bm) --> integer
(z & bm) << bs --> integer
(z = This.arr[i]) & 3fff --> integer
(z = This.arr[i]) --> integer
(z = o.arr[i]) & bm --> integer
(z = o.arr[i]) --> integer
(z = o.arr[i]) --> integer
(z = o.arr[i]) >> cbs --> integer
++$i --> integer
++$i <= $n --> boolean
++i --> integer
++i --> integer
++i --> integer
++i --> integer
++i --> integer
++k --> integer
++vv --> integer
++vv --> integer
++vv --> integer
--i --> integer
--i --> integer
--i --> integer
--i --> integer
--i --> integer
--i --> integer
--i --> integer
--i --> integer
--i >= 0 --> boolean
--i >= 0 --> boolean
--j --> integer
--j >= 0 --> boolean
--n --> integer
--n --> integer
--n >= 0 --> boolean
--n >= 0 --> boolean
--qd --> integer
--t --> integer
-1 --> integer
-1 --> integer
-1 --> integer
-1 --> integer
-1 --> integer
-1 --> integer
-1 --> integer
-10 --> integer
-n --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0.0 --> float
0.0 --> float
0.0 --> float
0.0 --> float
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 << (32 - DB) --> integer
1 << F1 --> integer
1 << F1 --> integer
1 << F2 --> integer
1 << bs --> integer
1 << cbs --> integer
1 << dbits --> integer
1 << dbits --> integer
1.0 --> float
1.0 --> float
1.0 --> float
1.0 --> float
1.0 --> float
1.0 --> float
10 --> integer
10 --> integer
10 --> integer
10 --> integer
10 --> integer
10 --> integer
10 --> integer
10 --> integer
10 --> integer
1000 --> integer
11 - $i --> integer
11 --> integer
14 --> integer
14 --> integer
14 --> integer
14 --> integer
14 --> integer
16 --> integer
16 --> integer
2 * dbits - BI_FP --> integer
2 * dbits --> integer
2 --> integer
2 --> integer
2 --> integer
2 --> integer
2 --> integer
2 --> integer
2 --> integer
2.0 --> float
28 --> integer
28 --> integer
28 --> integer
3 --> integer
32 - DB --> integer
32 --> integer
36 --> integer
36 --> integer
3fff --> integer
3fff --> integer
3fff --> integer
4 --> integer
4 --> integer
4 --> integer
52 --> integer
8 --> integer
8 --> integer
9 --> integer
Array --> () -> Array<___> INTERSECT (integer) -> Array<___> INTERSECT (___,___) -> Array<___>
Array --> () -> Array<integer> INTERSECT (integer) -> Array<integer> INTERSECT (integer,integer) -> Array<integer>
Array --> () -> Array<integer> INTERSECT (integer) -> Array<integer> INTERSECT (integer,integer) -> Array<integer>
Array --> () -> Array<{  | arr: Array<integer>, s: integer, t: integer }> INTERSECT (integer) -> Array<{  | arr: Array<integer>, s: integer, t: integer }> INTERSECT ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> Array<{  | arr: Array<integer>, s: integer, t: integer }>
Array --> () -> Array<{  | arr: Array<integer>, s: integer, t: integer }> INTERSECT (integer) -> Array<{  | arr: Array<integer>, s: integer, t: integer }> INTERSECT ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> Array<{  | arr: Array<integer>, s: integer, t: integer }>
Array((t = o.t) + n) --> Array<integer>
Array(10) --> Array<{  | arr: Array<integer>, s: integer, t: integer }>
Array(10) --> Array<{  | arr: Array<integer>, s: integer, t: integer }>
Array(11 - $i) --> Array<___>
Array(11 - $i).join --> [](string) -> string
Array(11 - $i).join(' ') --> string
BI_FP * 1.0 --> float
BI_FP - dbits --> integer
BI_FP --> integer
BI_FP --> integer
BI_FP --> integer
BI_FP --> integer
BI_RC --> Array<integer>
BI_RC --> Array<integer>
BI_RC --> Array<integer>
BI_RC --> Array<integer>
BI_RC[rr++] --> integer
BI_RC[rr++] --> integer
BI_RC[rr++] --> integer
BI_RC[rr++] = vv --> integer
BI_RC[rr++] = vv --> integer
BI_RC[rr++] = vv --> integer
BI_RM --> string
DB - bs --> integer
DB - bs --> integer
DB - nbits(pm.arr[pm.t - 1]) --> integer
DB --> integer
DB --> integer
DB --> integer
DB --> integer
DB --> integer
DB --> integer
DB --> integer
DB --> integer
DB --> integer
DB --> integer
DB --> integer
DB --> integer
DB --> integer
DB --> integer
DB --> integer
DB --> integer
DM --> integer
DM --> integer
DM --> integer
DM --> integer
DM --> integer
DM --> integer
DM --> integer
DM --> integer
DM --> integer
DM --> integer
DV + c --> integer
DV + c --> integer
DV --> integer
DV --> integer
DV --> integer
DV --> integer
DV --> integer
F1 --> integer
F1 --> integer
F1 --> integer
F2 --> integer
F2 --> integer
F2 --> integer
FV --> integer
FV --> integer
FV / yt --> float
Math --> { E: float, LN2: float, LN10: float, LOG2E: float, LOG10E: float, PI: float, SQRT1_2: float, SQRT2: float, abs: [](float) -> float, acos: [](float) -> float, acosh: [](float) -> float, asin: [](float) -> float, asinh: [](float) -> float, atan: [](float) -> float, atanh: [](float) -> float, atan2: [](float,float) -> float, cbrt: [](float) -> float, ceil: [](float) -> float, cos: [](float) -> float, cosh: [](float) -> float, exp: [](float) -> float, expm1: [](float) -> float, floor: [](float) -> integer, fround: [](float) -> float, hypot: [](float,float) -> float, imul: [](float,float) -> float, log: [](float) -> float, log1p: [](float) -> float, log10: [](float) -> float, log2: [](float) -> float, max: [](float,float) -> float, min: [](float,float) -> float, pow: [](float,float) -> float, random: []() -> float, round: [](float) -> float, sign: [](float) -> float, sin: [](float) -> float, sinh: [](float) -> float, sqrt: [](float) -> float, tan: [](float) -> float, tanh: [](float) -> float, toSource: []() -> string, trunc: [](float) -> float |  }
Math --> { E: float, LN2: float, LN10: float, LOG2E: float, LOG10E: float, PI: float, SQRT1_2: float, SQRT2: float, abs: [](float) -> float, acos: [](float) -> float, acosh: [](float) -> float, asin: [](float) -> float, asinh: [](float) -> float, atan: [](float) -> float, atanh: [](float) -> float, atan2: [](float,float) -> float, cbrt: [](float) -> float, ceil: [](float) -> float, cos: [](float) -> float, cosh: [](float) -> float, exp: [](float) -> float, expm1: [](float) -> float, floor: [](float) -> integer, fround: [](float) -> float, hypot: [](float,float) -> float, imul: [](float,float) -> float, log: [](float) -> float, log1p: [](float) -> float, log10: [](float) -> float, log2: [](float) -> float, max: [](float,float) -> float, min: [](float,float) -> float, pow: [](float,float) -> float, random: []() -> float, round: [](float) -> float, sign: [](float) -> float, sin: [](float) -> float, sinh: [](float) -> float, sqrt: [](float) -> float, tan: [](float) -> float, tanh: [](float) -> float, toSource: []() -> string, trunc: [](float) -> float |  }
Math --> { E: float, LN2: float, LN10: float, LOG2E: float, LOG10E: float, PI: float, SQRT1_2: float, SQRT2: float, abs: [](float) -> float, acos: [](float) -> float, acosh: [](float) -> float, asin: [](float) -> float, asinh: [](float) -> float, atan: [](float) -> float, atanh: [](float) -> float, atan2: [](float,float) -> float, cbrt: [](float) -> float, ceil: [](float) -> float, cos: [](float) -> float, cosh: [](float) -> float, exp: [](float) -> float, expm1: [](float) -> float, floor: [](float) -> integer, fround: [](float) -> float, hypot: [](float,float) -> float, imul: [](float,float) -> float, log: [](float) -> float, log1p: [](float) -> float, log10: [](float) -> float, log2: [](float) -> float, max: [](float,float) -> float, min: [](float,float) -> float, pow: [](float,float) -> float, random: []() -> float, round: [](float) -> float, sign: [](float) -> float, sin: [](float) -> float, sinh: [](float) -> float, sqrt: [](float) -> float, tan: [](float) -> float, tanh: [](float) -> float, toSource: []() -> string, trunc: [](float) -> float |  }
Math --> { E: float, LN2: float, LN10: float, LOG2E: float, LOG10E: float, PI: float, SQRT1_2: float, SQRT2: float, abs: [](float) -> float, acos: [](float) -> float, acosh: [](float) -> float, asin: [](float) -> float, asinh: [](float) -> float, atan: [](float) -> float, atanh: [](float) -> float, atan2: [](float,float) -> float, cbrt: [](float) -> float, ceil: [](float) -> float, cos: [](float) -> float, cosh: [](float) -> float, exp: [](float) -> float, expm1: [](float) -> float, floor: [](float) -> integer, fround: [](float) -> float, hypot: [](float,float) -> float, imul: [](float,float) -> float, log: [](float) -> float, log1p: [](float) -> float, log10: [](float) -> float, log2: [](float) -> float, max: [](float,float) -> float, min: [](float,float) -> float, pow: [](float,float) -> float, random: []() -> float, round: [](float) -> float, sign: [](float) -> float, sin: [](float) -> float, sinh: [](float) -> float, sqrt: [](float) -> float, tan: [](float) -> float, tanh: [](float) -> float, toSource: []() -> string, trunc: [](float) -> float |  }
Math --> { E: float, LN2: float, LN10: float, LOG2E: float, LOG10E: float, PI: float, SQRT1_2: float, SQRT2: float, abs: [](float) -> float, acos: [](float) -> float, acosh: [](float) -> float, asin: [](float) -> float, asinh: [](float) -> float, atan: [](float) -> float, atanh: [](float) -> float, atan2: [](float,float) -> float, cbrt: [](float) -> float, ceil: [](float) -> float, cos: [](float) -> float, cosh: [](float) -> float, exp: [](float) -> float, expm1: [](float) -> float, floor: [](float) -> integer, fround: [](float) -> float, hypot: [](float,float) -> float, imul: [](float,float) -> float, log: [](float) -> float, log1p: [](float) -> float, log10: [](float) -> float, log2: [](float) -> float, max: [](float,float) -> float, min: [](float,float) -> float, pow: [](float,float) -> float, random: []() -> float, round: [](float) -> float, sign: [](float) -> float, sin: [](float) -> float, sinh: [](float) -> float, sqrt: [](float) -> float, tan: [](float) -> float, tanh: [](float) -> float, toSource: []() -> string, trunc: [](float) -> float |  }
Math --> { E: float, LN2: float, LN10: float, LOG2E: float, LOG10E: float, PI: float, SQRT1_2: float, SQRT2: float, abs: [](float) -> float, acos: [](float) -> float, acosh: [](float) -> float, asin: [](float) -> float, asinh: [](float) -> float, atan: [](float) -> float, atanh: [](float) -> float, atan2: [](float,float) -> float, cbrt: [](float) -> float, ceil: [](float) -> float, cos: [](float) -> float, cosh: [](float) -> float, exp: [](float) -> float, expm1: [](float) -> float, floor: [](float) -> integer, fround: [](float) -> float, hypot: [](float,float) -> float, imul: [](float,float) -> float, log: [](float) -> float, log1p: [](float) -> float, log10: [](float) -> float, log2: [](float) -> float, max: [](float,float) -> float, min: [](float,float) -> float, pow: [](float,float) -> float, random: []() -> float, round: [](float) -> float, sign: [](float) -> float, sin: [](float) -> float, sinh: [](float) -> float, sqrt: [](float) -> float, tan: [](float) -> float, tanh: [](float) -> float, toSource: []() -> string, trunc: [](float) -> float |  }
Math --> { E: float, LN2: float, LN10: float, LOG2E: float, LOG10E: float, PI: float, SQRT1_2: float, SQRT2: float, abs: [](float) -> float, acos: [](float) -> float, acosh: [](float) -> float, asin: [](float) -> float, asinh: [](float) -> float, atan: [](float) -> float, atanh: [](float) -> float, atan2: [](float,float) -> float, cbrt: [](float) -> float, ceil: [](float) -> float, cos: [](float) -> float, cosh: [](float) -> float, exp: [](float) -> float, expm1: [](float) -> float, floor: [](float) -> integer, fround: [](float) -> float, hypot: [](float,float) -> float, imul: [](float,float) -> float, log: [](float) -> float, log1p: [](float) -> float, log10: [](float) -> float, log2: [](float) -> float, max: [](float,float) -> float, min: [](float,float) -> float, pow: [](float,float) -> float, random: []() -> float, round: [](float) -> float, sign: [](float) -> float, sin: [](float) -> float, sinh: [](float) -> float, sqrt: [](float) -> float, tan: [](float) -> float, tanh: [](float) -> float, toSource: []() -> string, trunc: [](float) -> float |  }
Math --> { E: float, LN2: float, LN10: float, LOG2E: float, LOG10E: float, PI: float, SQRT1_2: float, SQRT2: float, abs: [](float) -> float, acos: [](float) -> float, acosh: [](float) -> float, asin: [](float) -> float, asinh: [](float) -> float, atan: [](float) -> float, atanh: [](float) -> float, atan2: [](float,float) -> float, cbrt: [](float) -> float, ceil: [](float) -> float, cos: [](float) -> float, cosh: [](float) -> float, exp: [](float) -> float, expm1: [](float) -> float, floor: [](float) -> integer, fround: [](float) -> float, hypot: [](float,float) -> float, imul: [](float,float) -> float, log: [](float) -> float, log1p: [](float) -> float, log10: [](float) -> float, log2: [](float) -> float, max: [](float,float) -> float, min: [](float,float) -> float, pow: [](float,float) -> float, random: []() -> float, round: [](float) -> float, sign: [](float) -> float, sin: [](float) -> float, sinh: [](float) -> float, sqrt: [](float) -> float, tan: [](float) -> float, tanh: [](float) -> float, toSource: []() -> string, trunc: [](float) -> float |  }
Math --> { E: float, LN2: float, LN10: float, LOG2E: float, LOG10E: float, PI: float, SQRT1_2: float, SQRT2: float, abs: [](float) -> float, acos: [](float) -> float, acosh: [](float) -> float, asin: [](float) -> float, asinh: [](float) -> float, atan: [](float) -> float, atanh: [](float) -> float, atan2: [](float,float) -> float, cbrt: [](float) -> float, ceil: [](float) -> float, cos: [](float) -> float, cosh: [](float) -> float, exp: [](float) -> float, expm1: [](float) -> float, floor: [](float) -> integer, fround: [](float) -> float, hypot: [](float,float) -> float, imul: [](float,float) -> float, log: [](float) -> float, log1p: [](float) -> float, log10: [](float) -> float, log2: [](float) -> float, max: [](float,float) -> float, min: [](float,float) -> float, pow: [](float,float) -> float, random: []() -> float, round: [](float) -> float, sign: [](float) -> float, sin: [](float) -> float, sinh: [](float) -> float, sqrt: [](float) -> float, tan: [](float) -> float, tanh: [](float) -> float, toSource: []() -> string, trunc: [](float) -> float |  }
Math.floor --> [](float) -> integer
Math.floor --> [](float) -> integer
Math.floor --> [](float) -> integer
Math.floor --> [](float) -> integer
Math.floor --> [](float) -> integer
Math.floor(Math.max(o.t - n * 1.0, 0.0)) --> integer
Math.floor(Math.pow(2.0, BI_FP * 1.0)) --> integer
Math.floor(n / DB + 0.0) --> integer
Math.floor(n / DB + 0.0) --> integer
Math.floor(r.arr[i] * d1 + (r.arr[i - 1] + e) * d2 + 0.0) --> integer
Math.max --> [](float,float) -> float
Math.max(o.t - n * 1.0, 0.0) --> float
Math.min --> [](float,float) -> float
Math.min --> [](float,float) -> float
Math.min(a.t * 1.0, o.t * 1.0) --> float
Math.min(a.t * 1.0, t = o.t * 1.0) --> float
Math.pow --> [](float,float) -> float
Math.pow(2.0, BI_FP * 1.0) --> float
ONE --> {  | arr: Array<integer>, s: integer, t: integer }
ONE --> {  | arr: Array<integer>, s: integer, t: integer }
This --> {  | arr: Array<integer>, s: integer, t: integer }
This --> {  | arr: Array<integer>, s: integer, t: integer }
This.arr --> Array<integer>
This.arr[i] --> integer
ZERO --> {  | arr: Array<integer>, s: integer, t: integer }
ZERO --> {  | arr: Array<integer>, s: integer, t: integer }
ZERO --> {  | arr: Array<integer>, s: integer, t: integer }
ZERO --> {  | arr: Array<integer>, s: integer, t: integer }
ZERO --> {  | arr: Array<integer>, s: integer, t: integer }
[] --> Array<integer>
[] --> Array<integer>
[] --> Array<integer>
[] --> Array<integer>
[] --> Array<integer>
[] --> Array<integer>
[] --> Array<integer>
[] --> Array<integer>
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a --> {  | arr: Array<integer>, s: integer, t: integer }
a.arr --> Array<integer>
a.arr --> Array<integer>
a.arr --> Array<integer>
a.arr --> Array<integer>
a.arr --> Array<integer>
a.arr[i] --> integer
a.arr[i] --> integer
a.arr[i] --> integer
a.arr[i] --> integer
a.arr[i] --> integer
a.s --> integer
a.s --> integer
a.s --> integer
a.s --> integer
a.s --> integer
a.s --> integer
a.t * 1.0 --> float
a.t * 1.0 --> float
a.t --> integer
a.t --> integer
a.t --> integer
a.t --> integer
a.t --> integer
a.t --> integer
a.t --> integer
a.t < o.t --> boolean
a.t < t --> boolean
abs --> ({  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
abs --> ({  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
abs --> ({  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
abs --> ({  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
abs --> ({  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
abs(a) --> {  | arr: Array<integer>, s: integer, t: integer }
abs(m) --> {  | arr: Array<integer>, s: integer, t: integer }
abs(o) --> {  | arr: Array<integer>, s: integer, t: integer }
abs(o) --> {  | arr: Array<integer>, s: integer, t: integer }
add --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
am --> ({  | arr: Array<integer>, s: integer, t: integer },integer,integer,{  | arr: Array<integer>, s: integer, t: integer },integer,integer,integer) -> integer
am --> ({  | arr: Array<integer>, s: integer, t: integer },integer,integer,{  | arr: Array<integer>, s: integer, t: integer },integer,integer,integer) -> integer
am --> ({  | arr: Array<integer>, s: integer, t: integer },integer,integer,{  | arr: Array<integer>, s: integer, t: integer },integer,integer,integer) -> integer
am(x, 0, y.arr[i], r, i, 0, x.t) --> integer
am(y, 0, qd, r, j, 0, ys) --> integer
bm --> integer
bm --> integer
bm --> integer
bm --> integer
bm --> integer
bnCompareTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer
bnCompareTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer
bnCompareTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer
bnCompareTo(r, t) --> integer
bnCompareTo(r, t) >= 0 --> boolean
bnpAddTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
bnpAddTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
bnpAddTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
bnpAddTo(o, a, r) --> void
bnpDLShift --> ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }
bnpDLShift --> ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }
bnpDLShift --> ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }
bnpDLShift --> ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }
bnpDLShift(ONE, ys) --> {  | arr: Array<integer>, s: integer, t: integer }
bnpDLShift(y, j) --> {  | arr: Array<integer>, s: integer, t: integer }
bnpDLShift(y, j) --> {  | arr: Array<integer>, s: integer, t: integer }
bnpDRShiftTo --> ({  | arr: Array<integer>, s: integer, t: integer },integer,{  | arr: Array<integer>, s: integer, t: integer }) -> void
bnpDRShiftTo --> ({  | arr: Array<integer>, s: integer, t: integer },integer,{  | arr: Array<integer>, s: integer, t: integer }) -> void
bnpDRShiftTo(r, ys, q) --> void
bnpDivRemTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
bnpDivRemTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
bnpDivRemTo(o, a, r, null) --> void
bnpLShiftTo --> ({  | arr: Array<integer>, s: integer, t: integer },integer,{  | arr: Array<integer>, s: integer, t: integer }) -> void
bnpLShiftTo --> ({  | arr: Array<integer>, s: integer, t: integer },integer,{  | arr: Array<integer>, s: integer, t: integer }) -> void
bnpLShiftTo --> ({  | arr: Array<integer>, s: integer, t: integer },integer,{  | arr: Array<integer>, s: integer, t: integer }) -> void
bnpLShiftTo --> ({  | arr: Array<integer>, s: integer, t: integer },integer,{  | arr: Array<integer>, s: integer, t: integer }) -> void
bnpLShiftTo(o, n, r) --> void
bnpLShiftTo(pm, nsh, y) --> void
bnpLShiftTo(pt, nsh, r) --> void
bnpMultiplyTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
bnpMultiplyTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
bnpMultiplyTo(o, a, r) --> void
bnpRShiftTo --> ({  | arr: Array<integer>, s: integer, t: integer },integer,{  | arr: Array<integer>, s: integer, t: integer }) -> void
bnpRShiftTo --> ({  | arr: Array<integer>, s: integer, t: integer },integer,{  | arr: Array<integer>, s: integer, t: integer }) -> void
bnpRShiftTo --> ({  | arr: Array<integer>, s: integer, t: integer },integer,{  | arr: Array<integer>, s: integer, t: integer }) -> void
bnpRShiftTo(o, -n, r) --> void
bnpRShiftTo(r, nsh, r) --> void
bnpSubTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
bnpSubTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
bnpSubTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
bnpSubTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
bnpSubTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
bnpSubTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
bnpSubTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
bnpSubTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
bnpSubTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
bnpSubTo(ZERO, o, r) --> void
bnpSubTo(ZERO, q, q) --> void
bnpSubTo(ZERO, r, r) --> void
bnpSubTo(ZERO, r, r) --> void
bnpSubTo(r, t, r) --> void
bnpSubTo(r, t, r) --> void
bnpSubTo(r, t, r) --> void
bnpSubTo(t, y, y) --> void
bs --> integer
bs --> integer
bs --> integer
bs --> integer
bs --> integer
bs --> integer
bs --> integer
bs --> integer
bs --> integer
bs --> integer
bs > 0 --> boolean
c & DM --> integer
c & DM --> integer
c & DM --> integer
c & DM --> integer
c & DM --> integer
c & DM --> integer
c += a.arr[i] --> integer
c += a.s --> integer
c += a.s --> integer
c += o.arr[i] + a.arr[i] --> integer
c += o.arr[i] - a.arr[i] --> integer
c += o.arr[i] --> integer
c += o.arr[i] --> integer
c += o.s --> integer
c += o.s --> integer
c += o.s --> integer
c += o.s --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c --> integer
c -= a.arr[i] --> integer
c -= a.s --> integer
c -= a.s --> integer
c < -1 --> boolean
c < -1 --> boolean
c < 0 --> boolean
c < 0 --> boolean
c = (l >> 28) + (m >> 14) + xh * h --> integer
c = (z & bm) << bs --> integer
c > 0 --> boolean
c > 0 --> boolean
c >>= DB --> integer
c >>= DB --> integer
c >>= DB --> integer
c >>= DB --> integer
c >>= DB --> integer
c >>= DB --> integer
cbs --> integer
cbs --> integer
cbs --> integer
cbs --> integer
cbs --> integer
cbs --> integer
clamp --> ({  | arr: Array<integer>, s: integer, t: integer }) -> void
clamp --> ({  | arr: Array<integer>, s: integer, t: integer }) -> void
clamp --> ({  | arr: Array<integer>, s: integer, t: integer }) -> void
clamp --> ({  | arr: Array<integer>, s: integer, t: integer }) -> void
clamp --> ({  | arr: Array<integer>, s: integer, t: integer }) -> void
clamp --> ({  | arr: Array<integer>, s: integer, t: integer }) -> void
clamp --> ({  | arr: Array<integer>, s: integer, t: integer }) -> void
clamp(r) --> void
clamp(r) --> void
clamp(r) --> void
clamp(r) --> void
clamp(r) --> void
clamp(r) --> void
console --> { log: [](string) -> void, assert: [](boolean) -> void, error: [](string) -> void, warn: [](string) -> void |  }
console --> { log: [](string) -> void, assert: [](boolean) -> void, error: [](string) -> void, warn: [](string) -> void |  }
console.log --> [](string) -> void
console.log --> [](string) -> void
console.log($s + "\t:" + $i) --> void
console.log($s + "\t:" + $n) --> void
copyTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
copyTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
copyTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
copyTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
copyTo(o, r) --> void
copyTo(pm, y) --> void
copyTo(pt, r) --> void
d1 --> float
d1 --> float
d2 --> float
d2 --> float
dbits --> integer
dbits --> integer
dbits --> integer
dbits --> integer
dbits --> integer
dbits --> integer
digits --> Array<{  | arr: Array<integer>, s: integer, t: integer }>
digits --> Array<{  | arr: Array<integer>, s: integer, t: integer }>
digits[i] --> {  | arr: Array<integer>, s: integer, t: integer }
digits[i] = (functions.nbv)(i) --> {  | arr: Array<integer>, s: integer, t: integer }
divide --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
ds + 1 --> integer
ds - 1 --> integer
ds --> integer
ds --> integer
ds --> integer
ds --> integer
ds --> integer
ds --> integer
ds --> integer
ds --> integer
ds --> integer
ds --> integer
ds --> integer
ds --> integer
ds --> integer
ds >= t --> boolean
e --> integer
e --> integer
fffffff --> integer
fromInt --> ({  | arr: Array<integer>, s: integer, t: integer },integer) -> void
fromInt --> ({  | arr: Array<integer>, s: integer, t: integer },integer) -> void
fromInt --> ({  | arr: Array<integer>, s: integer, t: integer },integer) -> void
fromInt(q, 0) --> void
fromInt(r, i) --> void
function abs(o) {
  return (o.s < 0) ? negate(o) : o;
}
 --> ({  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
function add(o, a) {
  var r = {arr: [], s: 0, t: 0};
  bnpAddTo(o, a, r);
  return r;
} --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
function am(This, i, x, w, j, c, n) {
  var xl = x & 3fff, xh = x >> 14, z, l, h, m;
  if (--n >= 0) 
  for (; ; ) 
    {
      l = (((m = xh * (l = (z = This.arr[i]) & 3fff) + xl * (h = z >> 14)) & 3fff) << 14) + xl * l + w.arr[j] + c;
      w.arr[j++] = l & fffffff;
      ++i;
      if (--n >= 0) 
      {
        c = (l >> 28) + (m >> 14) + xh * h;
      } else {
        return (l >> 28) + (m >> 14) + xh * h;
      }
    }
  return c;
}
 --> ({  | arr: Array<integer>, s: integer, t: integer },integer,integer,{  | arr: Array<integer>, s: integer, t: integer },integer,integer,integer) -> integer
function bnCompareTo(o, a) {
  var r = o.s - a.s;
  if (r != 0) 
  return r;
  var i = o.t;
  r = i - a.t;
  if (r != 0) 
  return r;
  while (--i >= 0) 
    if ((r = o.arr[i] - a.arr[i]) != 0) 
    return r;
  return 0;
}
 --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer
function bnpAddTo(o, a, r) {
  var i = 0, c = 0, m = Math.min(a.t * 1.0, o.t * 1.0);
  while (i < m) 
    {
      c += o.arr[i] + a.arr[i];
      r.arr[i++] = c & DM;
      c >>= DB;
    }
  if (a.t < o.t) 
  {
    c += a.s;
    while (i < o.t) 
      {
        c += o.arr[i];
        r.arr[i++] = c & DM;
        c >>= DB;
      }
    c += o.s;
  } else {
    c += o.s;
    while (i < a.t) 
      {
        c += a.arr[i];
        r.arr[i++] = c & DM;
        c >>= DB;
      }
    c += a.s;
  }
  r.s = (c < 0) ? -1 : 0;
  if (c > 0) 
  r.arr[i++] = c; else if (c < -1) 
  r.arr[i++] = DV + c;
  r.t = i;
  clamp(r);
}
 --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
function bnpDLShift(o, n) {
  var i, t, r = {arr: Array((t = o.t) + n), s: 0, t: 0};
  for (i = t - 1; i >= 0; --i) 
    r.arr[i + n] = o.arr[i];
  for (i = n - 1; i >= 0; --i) 
    r.arr[i] = 0;
  r.t = t + n;
  r.s = o.s;
  return r;
}
 --> ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }
function bnpDRShiftTo(o, n, r) {
  for (var i = n; i < o.t; ++i) 
    r.arr[i - n] = o.arr[i];
  r.t = Math.floor(Math.max(o.t - n * 1.0, 0.0));
  r.s = o.s;
}
 --> ({  | arr: Array<integer>, s: integer, t: integer },integer,{  | arr: Array<integer>, s: integer, t: integer }) -> void
function bnpDivRemTo(o, m, q, r) {
  var pm = abs(m);
  if (pm.t <= 0) 
  return;
  var pt = abs(o);
  if (pt.t < pm.t) 
  {
    fromInt(q, 0);
    if (r != null) 
    copyTo(o, r);
    return;
  }
  if (r == null) 
  r = {arr: [], s: 0, t: 0};
  var y = {arr: [], s: 0, t: 0}, ts = o.s, ms = m.s;
  var nsh = DB - nbits(pm.arr[pm.t - 1]);
  if (nsh > 0) 
  {
    bnpLShiftTo(pm, nsh, y);
    bnpLShiftTo(pt, nsh, r);
  } else {
    copyTo(pm, y);
    copyTo(pt, r);
  }
  var ys = y.t;
  var y0 = y.arr[ys - 1];
  if (y0 == 0) 
  return;
  var yt = y0 * (1 << F1) + ((ys > 1) ? y.arr[ys - 2] >> F2 : 0);
  var d1 = FV / yt, d2 = (1 << F1) / yt, e = 1 << F2;
  var i = r.t, j = i - ys, t = bnpDLShift(y, j);
  if (bnCompareTo(r, t) >= 0) 
  {
    r.arr[r.t++] = 1;
    bnpSubTo(r, t, r);
  }
  t = bnpDLShift(ONE, ys);
  bnpSubTo(t, y, y);
  while (y.t < ys) 
    y.arr[y.t++] = 0;
  while (--j >= 0) 
    {
      var qd = (r.arr[--i] == y0) ? DM : Math.floor(r.arr[i] * d1 + (r.arr[i - 1] + e) * d2 + 0.0);
      if ((r.arr[i] += am(y, 0, qd, r, j, 0, ys)) < qd) 
      {
        t = bnpDLShift(y, j);
        bnpSubTo(r, t, r);
        while (r.arr[i] < --qd) 
          bnpSubTo(r, t, r);
      }
    }
  if (q != null) 
  {
    bnpDRShiftTo(r, ys, q);
    if (ts != ms) 
    bnpSubTo(ZERO, q, q);
  }
  r.t = ys;
  clamp(r);
  if (nsh > 0) 
  bnpRShiftTo(r, nsh, r);
  if (ts < 0) 
  bnpSubTo(ZERO, r, r);
}
 --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
function bnpLShiftTo(o, n, r) {
  var bs = n % DB, cbs = DB - bs, bm = (1 << cbs) - 1, ds = Math.floor(n / DB + 0.0), c = ((s = o.s) << bs) & DM, i, z, t, s;
  for (i = (t = o.t) - 1; i >= 0; --i) 
    {
      r.arr[i + ds + 1] = ((z = o.arr[i]) >> cbs) | c;
      c = (z & bm) << bs;
    }
  for (i = ds - 1; i >= 0; --i) 
    r.arr[i] = 0;
  r.arr[ds] = c;
  r.t = t + ds + 1;
  r.s = s;
  clamp(r);
}
 --> ({  | arr: Array<integer>, s: integer, t: integer },integer,{  | arr: Array<integer>, s: integer, t: integer }) -> void
function bnpMultiplyTo(o, a, r) {
  var x = abs(o), y = abs(a);
  var i = x.t;
  r.t = i + y.t;
  while (--i >= 0) 
    r.arr[i] = 0;
  for (i = 0; i < y.t; ++i) 
    r.arr[i + x.t] = am(x, 0, y.arr[i], r, i, 0, x.t);
  r.s = 0;
  clamp(r);
  if (o.s != a.s) 
  bnpSubTo(ZERO, r, r);
}
 --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
function bnpRShiftTo(o, n, r) {
  r.s = o.s;
  var ds = Math.floor(n / DB + 0.0), t = o.t, z;
  if (ds >= t) 
  {
    r.t = 0;
    return;
  }
  var bs = n % DB, cbs = DB - bs, bm = (1 << bs) - 1;
  r.arr[0] = o.arr[ds] >> bs;
  for (var i = ds + 1; i < t; ++i) 
    {
      r.arr[i - ds - 1] |= ((z = o.arr[i]) & bm) << cbs;
      r.arr[i - ds] = z >> bs;
    }
  if (bs > 0) 
  r.arr[t - ds - 1] |= (o.s & bm) << cbs;
  r.t = t - ds;
  clamp(r);
}
 --> ({  | arr: Array<integer>, s: integer, t: integer },integer,{  | arr: Array<integer>, s: integer, t: integer }) -> void
function bnpSubTo(o, a, r) {
  var i = 0, c = 0, t, m = Math.min(a.t * 1.0, t = o.t * 1.0);
  while (i < m) 
    {
      c += o.arr[i] - a.arr[i];
      r.arr[i++] = c & DM;
      c >>= DB;
    }
  if (a.t < t) 
  {
    c -= a.s;
    while (i < t) 
      {
        c += o.arr[i];
        r.arr[i++] = c & DM;
        c >>= DB;
      }
    c += o.s;
  } else {
    c += o.s;
    while (i < a.t) 
      {
        c -= a.arr[i];
        r.arr[i++] = c & DM;
        c >>= DB;
      }
    c -= a.s;
  }
  r.s = (c < 0) ? -1 : 0;
  if (c < -1) 
  r.arr[i++] = DV + c; else if (c > 0) 
  r.arr[i++] = c;
  r.t = i;
  clamp(r);
}
 --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
function clamp(r) {
  var c = r.s & DM, t = r.t;
  while (t > 0 && r.arr[t - 1] == c) 
    {
      --t;
    }
  r.t = t;
}
 --> ({  | arr: Array<integer>, s: integer, t: integer }) -> void
function copyTo(o, r) {
  for (var i = (r.t = o.t) - 1; i >= 0; --i) 
    r.arr[i] = o.arr[i];
  r.s = o.s;
}
 --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
function divide(o, a) {
  var r = {arr: [], s: 0, t: 0};
  bnpDivRemTo(o, a, r, null);
  return r;
} --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
function fromInt(o, x) {
  o.t = 1;
  o.s = (x < 0) ? -1 : 0;
  if (x > 0) 
  o.arr[0] = x; else if (x < -1) 
  o.arr[0] = x + DV; else o.t = 0;
}
 --> ({  | arr: Array<integer>, s: integer, t: integer },integer) -> void
function intValue(o) {
  if (o.s < 0) 
  {
    if (o.t == 1) 
    return o.arr[0] - DV; else if (o.t == 0) 
    return -1;
  } else if (o.t == 1) 
  return o.arr[0]; else if (o.t == 0) 
  return 0;
  return ((o.arr[1] & ((1 << (32 - DB)) - 1)) << DB) | o.arr[0];
}
 --> ({  | arr: Array<integer>, s: integer, t: integer }) -> integer
function main($n) {
  var $i = 1, $s = "", $d = 0, neg10 = (functions.nbv)(-10), three = (functions.nbv)(3), ten = (functions.nbv)(10), g = 1, $g, digits = Array(10), $z0 = (functions.nbv)(1), $z1 = (functions.nbv)(0), $z2 = (functions.nbv)(1), negdigits = Array(10), k = 0, $k, l = 2, $l;
  for (var i = 0; i < 10; ++i) 
    {
      negdigits[i] = (functions.multiply)(digits[i] = (functions.nbv)(i), neg10);
    }
  do {
    while ((functions.compareTo)($z0, $z2) > 0 || ($d = (functions.intValue)((functions.divide)((functions.add)((functions.multiply)($z0, three), $z1), $z2))) != (functions.intValue)((functions.divide)((functions.add)((functions.shiftLeft)($z0, 2), $z1), $z2))) 
      {
        $z1 = (functions.multiply)($z1, $g = (functions.nbv)(g += 2));
        $z2 = (functions.multiply)($z2, $g);
        (functions.addTo)($z1, (functions.multiply)($z0, $l = (functions.nbv)(l += 4)), $z1);
        $z0 = (functions.multiply)($z0, $k = (functions.nbv)(++k));
      }
    $z0 = (functions.multiply)($z0, ten);
    $z1 = (functions.multiply)($z1, ten);
    (functions.addTo)($z1, (functions.multiply)($z2, negdigits[$d]), $z1);
    $s += ($d + "");
    if ($i % 10 == 0) 
    {
      console.log($s + "\t:" + $i);
      $s = "";
    }
  } while (++$i <= $n);
  if (($i = $n % 10) != 0) 
  {
    $s += Array(11 - $i).join(' ');
  }
  if ($s.length > 0) 
  {
    console.log($s + "\t:" + $n);
  }
}
 --> (integer) -> void
function multiply(o, a) {
  var r = {arr: [], s: 0, t: 0};
  bnpMultiplyTo(o, a, r);
  return r;
} --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
function nbits(x) {
  var r = 1, t;
  if ((t = x >>> 16) != 0) 
  {
    x = t;
    r += 16;
  }
  if ((t = x >> 8) != 0) 
  {
    x = t;
    r += 8;
  }
  if ((t = x >> 4) != 0) 
  {
    x = t;
    r += 4;
  }
  if ((t = x >> 2) != 0) 
  {
    x = t;
    r += 2;
  }
  if ((t = x >> 1) != 0) 
  {
    x = t;
    r += 1;
  }
  return r;
}
 --> (integer) -> integer
function nbv(i) {
  var r = {arr: [], s: 0, t: 0};
  fromInt(r, i);
  return r;
}
 --> (integer) -> {  | arr: Array<integer>, s: integer, t: integer }
function negate(o) {
  var r = {arr: [], s: 0, t: 0};
  bnpSubTo(ZERO, o, r);
  return r;
}
 --> ({  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
function shiftLeft(o, n) {
  var r = {arr: [], s: 0, t: 0};
  if (n < 0) 
  bnpRShiftTo(o, -n, r); else bnpLShiftTo(o, n, r);
  return r;
}
 --> ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }
function() {
  var dbits = 28, BI_FP = 52, DB = dbits, DM = ((1 << dbits) - 1), DV = (1 << dbits), FV = Math.floor(Math.pow(2.0, BI_FP * 1.0)), F1 = BI_FP - dbits, F2 = 2 * dbits - BI_FP;
  function am(This, i, x, w, j, c, n) {
    var xl = x & 3fff, xh = x >> 14, z, l, h, m;
    if (--n >= 0) 
    for (; ; ) 
      {
        l = (((m = xh * (l = (z = This.arr[i]) & 3fff) + xl * (h = z >> 14)) & 3fff) << 14) + xl * l + w.arr[j] + c;
        w.arr[j++] = l & fffffff;
        ++i;
        if (--n >= 0) 
        {
          c = (l >> 28) + (m >> 14) + xh * h;
        } else {
          return (l >> 28) + (m >> 14) + xh * h;
        }
      }
    return c;
  }
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr, vv;
  rr = "0".charCodeAt(0);
  for (vv = 0; vv <= 9; ++vv) 
    BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for (vv = 10; vv < 36; ++vv) 
    BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for (vv = 10; vv < 36; ++vv) 
    BI_RC[rr++] = vv;
  function copyTo(o, r) {
    for (var i = (r.t = o.t) - 1; i >= 0; --i) 
      r.arr[i] = o.arr[i];
    r.s = o.s;
  }
  function fromInt(o, x) {
    o.t = 1;
    o.s = (x < 0) ? -1 : 0;
    if (x > 0) 
    o.arr[0] = x; else if (x < -1) 
    o.arr[0] = x + DV; else o.t = 0;
  }
  function nbv(i) {
    var r = {arr: [], s: 0, t: 0};
    fromInt(r, i);
    return r;
  }
  function clamp(r) {
    var c = r.s & DM, t = r.t;
    while (t > 0 && r.arr[t - 1] == c) 
      {
        --t;
      }
    r.t = t;
  }
  function negate(o) {
    var r = {arr: [], s: 0, t: 0};
    bnpSubTo(ZERO, o, r);
    return r;
  }
  function abs(o) {
    return (o.s < 0) ? negate(o) : o;
  }
  function bnCompareTo(o, a) {
    var r = o.s - a.s;
    if (r != 0) 
    return r;
    var i = o.t;
    r = i - a.t;
    if (r != 0) 
    return r;
    while (--i >= 0) 
      if ((r = o.arr[i] - a.arr[i]) != 0) 
      return r;
    return 0;
  }
  function nbits(x) {
    var r = 1, t;
    if ((t = x >>> 16) != 0) 
    {
      x = t;
      r += 16;
    }
    if ((t = x >> 8) != 0) 
    {
      x = t;
      r += 8;
    }
    if ((t = x >> 4) != 0) 
    {
      x = t;
      r += 4;
    }
    if ((t = x >> 2) != 0) 
    {
      x = t;
      r += 2;
    }
    if ((t = x >> 1) != 0) 
    {
      x = t;
      r += 1;
    }
    return r;
  }
  function bnpDLShift(o, n) {
    var i, t, r = {arr: Array((t = o.t) + n), s: 0, t: 0};
    for (i = t - 1; i >= 0; --i) 
      r.arr[i + n] = o.arr[i];
    for (i = n - 1; i >= 0; --i) 
      r.arr[i] = 0;
    r.t = t + n;
    r.s = o.s;
    return r;
  }
  function bnpDRShiftTo(o, n, r) {
    for (var i = n; i < o.t; ++i) 
      r.arr[i - n] = o.arr[i];
    r.t = Math.floor(Math.max(o.t - n * 1.0, 0.0));
    r.s = o.s;
  }
  function bnpLShiftTo(o, n, r) {
    var bs = n % DB, cbs = DB - bs, bm = (1 << cbs) - 1, ds = Math.floor(n / DB + 0.0), c = ((s = o.s) << bs) & DM, i, z, t, s;
    for (i = (t = o.t) - 1; i >= 0; --i) 
      {
        r.arr[i + ds + 1] = ((z = o.arr[i]) >> cbs) | c;
        c = (z & bm) << bs;
      }
    for (i = ds - 1; i >= 0; --i) 
      r.arr[i] = 0;
    r.arr[ds] = c;
    r.t = t + ds + 1;
    r.s = s;
    clamp(r);
  }
  function bnpRShiftTo(o, n, r) {
    r.s = o.s;
    var ds = Math.floor(n / DB + 0.0), t = o.t, z;
    if (ds >= t) 
    {
      r.t = 0;
      return;
    }
    var bs = n % DB, cbs = DB - bs, bm = (1 << bs) - 1;
    r.arr[0] = o.arr[ds] >> bs;
    for (var i = ds + 1; i < t; ++i) 
      {
        r.arr[i - ds - 1] |= ((z = o.arr[i]) & bm) << cbs;
        r.arr[i - ds] = z >> bs;
      }
    if (bs > 0) 
    r.arr[t - ds - 1] |= (o.s & bm) << cbs;
    r.t = t - ds;
    clamp(r);
  }
  function bnpSubTo(o, a, r) {
    var i = 0, c = 0, t, m = Math.min(a.t * 1.0, t = o.t * 1.0);
    while (i < m) 
      {
        c += o.arr[i] - a.arr[i];
        r.arr[i++] = c & DM;
        c >>= DB;
      }
    if (a.t < t) 
    {
      c -= a.s;
      while (i < t) 
        {
          c += o.arr[i];
          r.arr[i++] = c & DM;
          c >>= DB;
        }
      c += o.s;
    } else {
      c += o.s;
      while (i < a.t) 
        {
          c -= a.arr[i];
          r.arr[i++] = c & DM;
          c >>= DB;
        }
      c -= a.s;
    }
    r.s = (c < 0) ? -1 : 0;
    if (c < -1) 
    r.arr[i++] = DV + c; else if (c > 0) 
    r.arr[i++] = c;
    r.t = i;
    clamp(r);
  }
  function bnpMultiplyTo(o, a, r) {
    var x = abs(o), y = abs(a);
    var i = x.t;
    r.t = i + y.t;
    while (--i >= 0) 
      r.arr[i] = 0;
    for (i = 0; i < y.t; ++i) 
      r.arr[i + x.t] = am(x, 0, y.arr[i], r, i, 0, x.t);
    r.s = 0;
    clamp(r);
    if (o.s != a.s) 
    bnpSubTo(ZERO, r, r);
  }
  function bnpDivRemTo(o, m, q, r) {
    var pm = abs(m);
    if (pm.t <= 0) 
    return;
    var pt = abs(o);
    if (pt.t < pm.t) 
    {
      fromInt(q, 0);
      if (r != null) 
      copyTo(o, r);
      return;
    }
    if (r == null) 
    r = {arr: [], s: 0, t: 0};
    var y = {arr: [], s: 0, t: 0}, ts = o.s, ms = m.s;
    var nsh = DB - nbits(pm.arr[pm.t - 1]);
    if (nsh > 0) 
    {
      bnpLShiftTo(pm, nsh, y);
      bnpLShiftTo(pt, nsh, r);
    } else {
      copyTo(pm, y);
      copyTo(pt, r);
    }
    var ys = y.t;
    var y0 = y.arr[ys - 1];
    if (y0 == 0) 
    return;
    var yt = y0 * (1 << F1) + ((ys > 1) ? y.arr[ys - 2] >> F2 : 0);
    var d1 = FV / yt, d2 = (1 << F1) / yt, e = 1 << F2;
    var i = r.t, j = i - ys, t = bnpDLShift(y, j);
    if (bnCompareTo(r, t) >= 0) 
    {
      r.arr[r.t++] = 1;
      bnpSubTo(r, t, r);
    }
    t = bnpDLShift(ONE, ys);
    bnpSubTo(t, y, y);
    while (y.t < ys) 
      y.arr[y.t++] = 0;
    while (--j >= 0) 
      {
        var qd = (r.arr[--i] == y0) ? DM : Math.floor(r.arr[i] * d1 + (r.arr[i - 1] + e) * d2 + 0.0);
        if ((r.arr[i] += am(y, 0, qd, r, j, 0, ys)) < qd) 
        {
          t = bnpDLShift(y, j);
          bnpSubTo(r, t, r);
          while (r.arr[i] < --qd) 
            bnpSubTo(r, t, r);
        }
      }
    if (q != null) 
    {
      bnpDRShiftTo(r, ys, q);
      if (ts != ms) 
      bnpSubTo(ZERO, q, q);
    }
    r.t = ys;
    clamp(r);
    if (nsh > 0) 
    bnpRShiftTo(r, nsh, r);
    if (ts < 0) 
    bnpSubTo(ZERO, r, r);
  }
  var ZERO = nbv(0);
  var ONE = nbv(1);
  function intValue(o) {
    if (o.s < 0) 
    {
      if (o.t == 1) 
      return o.arr[0] - DV; else if (o.t == 0) 
      return -1;
    } else if (o.t == 1) 
    return o.arr[0]; else if (o.t == 0) 
    return 0;
    return ((o.arr[1] & ((1 << (32 - DB)) - 1)) << DB) | o.arr[0];
  }
  function shiftLeft(o, n) {
    var r = {arr: [], s: 0, t: 0};
    if (n < 0) 
    bnpRShiftTo(o, -n, r); else bnpLShiftTo(o, n, r);
    return r;
  }
  function bnpAddTo(o, a, r) {
    var i = 0, c = 0, m = Math.min(a.t * 1.0, o.t * 1.0);
    while (i < m) 
      {
        c += o.arr[i] + a.arr[i];
        r.arr[i++] = c & DM;
        c >>= DB;
      }
    if (a.t < o.t) 
    {
      c += a.s;
      while (i < o.t) 
        {
          c += o.arr[i];
          r.arr[i++] = c & DM;
          c >>= DB;
        }
      c += o.s;
    } else {
      c += o.s;
      while (i < a.t) 
        {
          c += a.arr[i];
          r.arr[i++] = c & DM;
          c >>= DB;
        }
      c += a.s;
    }
    r.s = (c < 0) ? -1 : 0;
    if (c > 0) 
    r.arr[i++] = c; else if (c < -1) 
    r.arr[i++] = DV + c;
    r.t = i;
    clamp(r);
  }
  return {compareTo: bnCompareTo, multiply: function multiply(o, a) {
  var r = {arr: [], s: 0, t: 0};
  bnpMultiplyTo(o, a, r);
  return r;
}, divide: function divide(o, a) {
  var r = {arr: [], s: 0, t: 0};
  bnpDivRemTo(o, a, r, null);
  return r;
}, addTo: bnpAddTo, add: function add(o, a) {
  var r = {arr: [], s: 0, t: 0};
  bnpAddTo(o, a, r);
  return r;
}, nbv: nbv, shiftLeft: shiftLeft, intValue: intValue};
} --> () -> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
functions.add --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
functions.add --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
functions.addTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
functions.addTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void
functions.compareTo --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer
functions.divide --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
functions.divide --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
functions.intValue --> ({  | arr: Array<integer>, s: integer, t: integer }) -> integer
functions.intValue --> ({  | arr: Array<integer>, s: integer, t: integer }) -> integer
functions.multiply --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
functions.multiply --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
functions.multiply --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
functions.multiply --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
functions.multiply --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
functions.multiply --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
functions.multiply --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
functions.multiply --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
functions.multiply --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
functions.nbv --> (integer) -> {  | arr: Array<integer>, s: integer, t: integer }
functions.nbv --> (integer) -> {  | arr: Array<integer>, s: integer, t: integer }
functions.nbv --> (integer) -> {  | arr: Array<integer>, s: integer, t: integer }
functions.nbv --> (integer) -> {  | arr: Array<integer>, s: integer, t: integer }
functions.nbv --> (integer) -> {  | arr: Array<integer>, s: integer, t: integer }
functions.nbv --> (integer) -> {  | arr: Array<integer>, s: integer, t: integer }
functions.nbv --> (integer) -> {  | arr: Array<integer>, s: integer, t: integer }
functions.nbv --> (integer) -> {  | arr: Array<integer>, s: integer, t: integer }
functions.nbv --> (integer) -> {  | arr: Array<integer>, s: integer, t: integer }
functions.nbv --> (integer) -> {  | arr: Array<integer>, s: integer, t: integer }
functions.shiftLeft --> ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }
g += 2 --> integer
g --> integer
g --> integer
h --> integer
h --> integer
h --> integer
h --> integer
h = z >> 14 --> integer
i + ds + 1 --> integer
i + ds --> integer
i + n --> integer
i + x.t --> integer
i + y.t --> integer
i - 1 --> integer
i - a.t --> integer
i - ds - 1 --> integer
i - ds --> integer
i - ds --> integer
i - n --> integer
i - ys --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i < 10 --> boolean
i < a.t --> boolean
i < a.t --> boolean
i < m --> boolean
i < m --> boolean
i < o.t --> boolean
i < o.t --> boolean
i < t --> boolean
i < t --> boolean
i < y.t --> boolean
i = (t = o.t) - 1 --> integer
i = 0 --> integer
i = ds - 1 --> integer
i = n - 1 --> integer
i = t - 1 --> integer
i >= 0 --> boolean
i >= 0 --> boolean
i >= 0 --> boolean
i >= 0 --> boolean
i >= 0 --> boolean
i++ --> integer
i++ --> integer
i++ --> integer
i++ --> integer
i++ --> integer
i++ --> integer
i++ --> integer
i++ --> integer
i++ --> integer
i++ --> integer
intValue --> ({  | arr: Array<integer>, s: integer, t: integer }) -> integer
intValue --> ({  | arr: Array<integer>, s: integer, t: integer }) -> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j++ --> integer
k --> integer
k --> integer
l & fffffff --> integer
l += 4 --> integer
l --> integer
l --> integer
l --> integer
l --> integer
l --> integer
l --> integer
l --> integer
l --> integer
l --> integer
l = (((m = xh * (l = (z = This.arr[i]) & 3fff) + xl * (h = z >> 14)) & 3fff) << 14) + xl * l + w.arr[j] + c --> integer
l = (z = This.arr[i]) & 3fff --> integer
l >> 28 --> integer
l >> 28 --> integer
m --> float
m --> float
m --> float
m --> float
m --> integer
m --> integer
m --> integer
m --> integer
m --> {  | arr: Array<integer>, s: integer, t: integer }
m --> {  | arr: Array<integer>, s: integer, t: integer }
m --> {  | arr: Array<integer>, s: integer, t: integer }
m = xh * (l = (z = This.arr[i]) & 3fff) + xl * (h = z >> 14) --> integer
m >> 14 --> integer
m >> 14 --> integer
m.s --> integer
main --> (integer) -> void
main --> (integer) -> void
main(1000) --> void
ms --> integer
ms --> integer
multiply --> ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
n % DB --> integer
n % DB --> integer
n * 1.0 --> float
n - 1 --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n / DB + 0.0 --> float
n / DB + 0.0 --> float
n / DB --> float
n / DB --> float
n < 0 --> boolean
nbits --> (integer) -> integer
nbits --> (integer) -> integer
nbits(pm.arr[pm.t - 1]) --> integer
nbv --> (integer) -> {  | arr: Array<integer>, s: integer, t: integer }
nbv --> (integer) -> {  | arr: Array<integer>, s: integer, t: integer }
nbv --> (integer) -> {  | arr: Array<integer>, s: integer, t: integer }
nbv --> (integer) -> {  | arr: Array<integer>, s: integer, t: integer }
nbv(0) --> {  | arr: Array<integer>, s: integer, t: integer }
nbv(1) --> {  | arr: Array<integer>, s: integer, t: integer }
neg10 --> {  | arr: Array<integer>, s: integer, t: integer }
neg10 --> {  | arr: Array<integer>, s: integer, t: integer }
negate --> ({  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
negate --> ({  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }
negate(o) --> {  | arr: Array<integer>, s: integer, t: integer }
negdigits --> Array<{  | arr: Array<integer>, s: integer, t: integer }>
negdigits --> Array<{  | arr: Array<integer>, s: integer, t: integer }>
negdigits --> Array<{  | arr: Array<integer>, s: integer, t: integer }>
negdigits[$d] --> {  | arr: Array<integer>, s: integer, t: integer }
negdigits[i] --> {  | arr: Array<integer>, s: integer, t: integer }
negdigits[i] = (functions.multiply)(digits[i] = (functions.nbv)(i), neg10) --> {  | arr: Array<integer>, s: integer, t: integer }
new Array() --> Array<integer>
nsh --> integer
nsh --> integer
nsh --> integer
nsh --> integer
nsh --> integer
nsh --> integer
nsh > 0 --> boolean
nsh > 0 --> boolean
null --> {  |  }
null --> {  |  }
null --> {  |  }
null --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o --> {  | arr: Array<integer>, s: integer, t: integer }
o.arr --> Array<integer>
o.arr --> Array<integer>
o.arr --> Array<integer>
o.arr --> Array<integer>
o.arr --> Array<integer>
o.arr --> Array<integer>
o.arr --> Array<integer>
o.arr --> Array<integer>
o.arr --> Array<integer>
o.arr --> Array<integer>
o.arr --> Array<integer>
o.arr --> Array<integer>
o.arr --> Array<integer>
o.arr --> Array<integer>
o.arr --> Array<integer>
o.arr --> Array<integer>
o.arr --> Array<integer>
o.arr[0] - DV --> integer
o.arr[0] --> integer
o.arr[0] --> integer
o.arr[0] --> integer
o.arr[0] --> integer
o.arr[0] --> integer
o.arr[0] = x + DV --> integer
o.arr[0] = x --> integer
o.arr[1] & ((1 << (32 - DB)) - 1) --> integer
o.arr[1] --> integer
o.arr[ds] --> integer
o.arr[ds] >> bs --> integer
o.arr[i] + a.arr[i] --> integer
o.arr[i] - a.arr[i] --> integer
o.arr[i] - a.arr[i] --> integer
o.arr[i] --> integer
o.arr[i] --> integer
o.arr[i] --> integer
o.arr[i] --> integer
o.arr[i] --> integer
o.arr[i] --> integer
o.arr[i] --> integer
o.arr[i] --> integer
o.arr[i] --> integer
o.arr[i] --> integer
o.s != a.s --> boolean
o.s & bm --> integer
o.s - a.s --> integer
o.s --> integer
o.s --> integer
o.s --> integer
o.s --> integer
o.s --> integer
o.s --> integer
o.s --> integer
o.s --> integer
o.s --> integer
o.s --> integer
o.s --> integer
o.s --> integer
o.s --> integer
o.s --> integer
o.s --> integer
o.s --> integer
o.s < 0 --> boolean
o.s < 0 --> boolean
o.s = (x < 0) ? -1 : 0 --> integer
o.t * 1.0 --> float
o.t * 1.0 --> float
o.t - n * 1.0 --> float
o.t --> integer
o.t --> integer
o.t --> integer
o.t --> integer
o.t --> integer
o.t --> integer
o.t --> integer
o.t --> integer
o.t --> integer
o.t --> integer
o.t --> integer
o.t --> integer
o.t --> integer
o.t --> integer
o.t --> integer
o.t --> integer
o.t --> integer
o.t = 0 --> integer
o.t = 1 --> integer
o.t == 0 --> boolean
o.t == 0 --> boolean
o.t == 1 --> boolean
o.t == 1 --> boolean
pm --> {  | arr: Array<integer>, s: integer, t: integer }
pm --> {  | arr: Array<integer>, s: integer, t: integer }
pm --> {  | arr: Array<integer>, s: integer, t: integer }
pm --> {  | arr: Array<integer>, s: integer, t: integer }
pm --> {  | arr: Array<integer>, s: integer, t: integer }
pm --> {  | arr: Array<integer>, s: integer, t: integer }
pm --> {  | arr: Array<integer>, s: integer, t: integer }
pm.arr --> Array<integer>
pm.arr[pm.t - 1] --> integer
pm.t - 1 --> integer
pm.t --> integer
pm.t --> integer
pm.t --> integer
pm.t <= 0 --> boolean
pt --> {  | arr: Array<integer>, s: integer, t: integer }
pt --> {  | arr: Array<integer>, s: integer, t: integer }
pt --> {  | arr: Array<integer>, s: integer, t: integer }
pt --> {  | arr: Array<integer>, s: integer, t: integer }
pt.t --> integer
pt.t < pm.t --> boolean
q != null --> boolean
q --> {  | arr: Array<integer>, s: integer, t: integer }
q --> {  | arr: Array<integer>, s: integer, t: integer }
q --> {  | arr: Array<integer>, s: integer, t: integer }
q --> {  | arr: Array<integer>, s: integer, t: integer }
q --> {  | arr: Array<integer>, s: integer, t: integer }
q --> {  | arr: Array<integer>, s: integer, t: integer }
qd --> integer
qd --> integer
qd --> integer
qd --> integer
r != 0 --> boolean
r != 0 --> boolean
r != null --> boolean
r += 1 --> integer
r += 16 --> integer
r += 2 --> integer
r += 4 --> integer
r += 8 --> integer
r --> integer
r --> integer
r --> integer
r --> integer
r --> integer
r --> integer
r --> integer
r --> integer
r --> integer
r --> integer
r --> integer
r --> integer
r --> integer
r --> integer
r --> integer
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r --> {  | arr: Array<integer>, s: integer, t: integer }
r = i - a.t --> integer
r = o.arr[i] - a.arr[i] --> integer
r = {arr: [], s: 0, t: 0} --> {  | arr: Array<integer>, s: integer, t: integer }
r == null --> boolean
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr --> Array<integer>
r.arr[--i] --> integer
r.arr[--i] == y0 --> boolean
r.arr[0] --> integer
r.arr[0] = o.arr[ds] >> bs --> integer
r.arr[ds] --> integer
r.arr[ds] = c --> integer
r.arr[i + ds + 1] --> integer
r.arr[i + ds + 1] = ((z = o.arr[i]) >> cbs) | c --> integer
r.arr[i + n] --> integer
r.arr[i + n] = o.arr[i] --> integer
r.arr[i + x.t] --> integer
r.arr[i + x.t] = am(x, 0, y.arr[i], r, i, 0, x.t) --> integer
r.arr[i - 1] + e --> integer
r.arr[i - 1] --> integer
r.arr[i - ds - 1] --> integer
r.arr[i - ds - 1] |= ((z = o.arr[i]) & bm) << cbs --> integer
r.arr[i - ds] --> integer
r.arr[i - ds] = z >> bs --> integer
r.arr[i - n] --> integer
r.arr[i - n] = o.arr[i] --> integer
r.arr[i++] --> integer
r.arr[i++] --> integer
r.arr[i++] --> integer
r.arr[i++] --> integer
r.arr[i++] --> integer
r.arr[i++] --> integer
r.arr[i++] --> integer
r.arr[i++] --> integer
r.arr[i++] --> integer
r.arr[i++] --> integer
r.arr[i++] = DV + c --> integer
r.arr[i++] = DV + c --> integer
r.arr[i++] = c & DM --> integer
r.arr[i++] = c & DM --> integer
r.arr[i++] = c & DM --> integer
r.arr[i++] = c & DM --> integer
r.arr[i++] = c & DM --> integer
r.arr[i++] = c & DM --> integer
r.arr[i++] = c --> integer
r.arr[i++] = c --> integer
r.arr[i] * d1 + (r.arr[i - 1] + e) * d2 + 0.0 --> float
r.arr[i] * d1 + (r.arr[i - 1] + e) * d2 --> float
r.arr[i] * d1 --> float
r.arr[i] += am(y, 0, qd, r, j, 0, ys) --> integer
r.arr[i] --> integer
r.arr[i] --> integer
r.arr[i] --> integer
r.arr[i] --> integer
r.arr[i] --> integer
r.arr[i] --> integer
r.arr[i] --> integer
r.arr[i] < --qd --> boolean
r.arr[i] = 0 --> integer
r.arr[i] = 0 --> integer
r.arr[i] = 0 --> integer
r.arr[i] = o.arr[i] --> integer
r.arr[r.t++] --> integer
r.arr[r.t++] = 1 --> integer
r.arr[t - 1] --> integer
r.arr[t - 1] == c --> boolean
r.arr[t - ds - 1] --> integer
r.arr[t - ds - 1] |= (o.s & bm) << cbs --> integer
r.s & DM --> integer
r.s --> integer
r.s --> integer
r.s --> integer
r.s --> integer
r.s --> integer
r.s --> integer
r.s --> integer
r.s --> integer
r.s --> integer
r.s = (c < 0) ? -1 : 0 --> integer
r.s = (c < 0) ? -1 : 0 --> integer
r.s = 0 --> integer
r.s = o.s --> integer
r.s = o.s --> integer
r.s = o.s --> integer
r.s = o.s --> integer
r.s = s --> integer
r.t --> integer
r.t --> integer
r.t --> integer
r.t --> integer
r.t --> integer
r.t --> integer
r.t --> integer
r.t --> integer
r.t --> integer
r.t --> integer
r.t --> integer
r.t --> integer
r.t --> integer
r.t --> integer
r.t = 0 --> integer
r.t = Math.floor(Math.max(o.t - n * 1.0, 0.0)) --> integer
r.t = i + y.t --> integer
r.t = i --> integer
r.t = i --> integer
r.t = o.t --> integer
r.t = t + ds + 1 --> integer
r.t = t + n --> integer
r.t = t - ds --> integer
r.t = t --> integer
r.t = ys --> integer
r.t++ --> integer
rr --> integer
rr --> integer
rr --> integer
rr --> integer
rr --> integer
rr --> integer
rr --> integer
rr = "0".charCodeAt(0) --> integer
rr = "A".charCodeAt(0) --> integer
rr = "a".charCodeAt(0) --> integer
rr++ --> integer
rr++ --> integer
rr++ --> integer
s --> integer
s --> integer
s --> integer
s = o.s --> integer
shiftLeft --> ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }
shiftLeft --> ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }
t + ds + 1 --> integer
t + ds --> integer
t + n --> integer
t - 1 --> integer
t - 1 --> integer
t - ds - 1 --> integer
t - ds --> integer
t - ds --> integer
t --> float
t --> float
t --> float
t --> float
t --> integer
t --> integer
t --> integer
t --> integer
t --> integer
t --> integer
t --> integer
t --> integer
t --> integer
t --> integer
t --> integer
t --> integer
t --> integer
t --> integer
t --> integer
t --> integer
t --> integer
t --> integer
t --> integer
t --> integer
t --> integer
t --> integer
t --> integer
t --> integer
t --> integer
t --> integer
t --> integer
t --> integer
t --> {  | arr: Array<integer>, s: integer, t: integer }
t --> {  | arr: Array<integer>, s: integer, t: integer }
t --> {  | arr: Array<integer>, s: integer, t: integer }
t --> {  | arr: Array<integer>, s: integer, t: integer }
t --> {  | arr: Array<integer>, s: integer, t: integer }
t --> {  | arr: Array<integer>, s: integer, t: integer }
t --> {  | arr: Array<integer>, s: integer, t: integer }
t --> {  | arr: Array<integer>, s: integer, t: integer }
t = bnpDLShift(ONE, ys) --> {  | arr: Array<integer>, s: integer, t: integer }
t = bnpDLShift(y, j) --> {  | arr: Array<integer>, s: integer, t: integer }
t = o.t * 1.0 --> float
t = o.t --> integer
t = o.t --> integer
t = x >> 1 --> integer
t = x >> 2 --> integer
t = x >> 4 --> integer
t = x >> 8 --> integer
t = x >>> 16 --> integer
t > 0 && r.arr[t - 1] == c --> boolean
t > 0 --> boolean
ten --> {  | arr: Array<integer>, s: integer, t: integer }
ten --> {  | arr: Array<integer>, s: integer, t: integer }
ten --> {  | arr: Array<integer>, s: integer, t: integer }
three --> {  | arr: Array<integer>, s: integer, t: integer }
three --> {  | arr: Array<integer>, s: integer, t: integer }
ts != ms --> boolean
ts --> integer
ts --> integer
ts --> integer
ts < 0 --> boolean
vv --> integer
vv --> integer
vv --> integer
vv --> integer
vv --> integer
vv --> integer
vv --> integer
vv --> integer
vv --> integer
vv --> integer
vv --> integer
vv --> integer
vv --> integer
vv < 36 --> boolean
vv < 36 --> boolean
vv <= 9 --> boolean
vv = 0 --> integer
vv = 10 --> integer
vv = 10 --> integer
w --> {  | arr: Array<integer>, s: integer, t: integer }
w --> {  | arr: Array<integer>, s: integer, t: integer }
w --> {  | arr: Array<integer>, s: integer, t: integer }
w.arr --> Array<integer>
w.arr --> Array<integer>
w.arr[j++] --> integer
w.arr[j++] = l & fffffff --> integer
w.arr[j] --> integer
x & 3fff --> integer
x + DV --> integer
x --> integer
x --> integer
x --> integer
x --> integer
x --> integer
x --> integer
x --> integer
x --> integer
x --> integer
x --> integer
x --> integer
x --> integer
x --> integer
x --> integer
x --> integer
x --> integer
x --> integer
x --> integer
x --> integer
x --> integer
x --> {  | arr: Array<integer>, s: integer, t: integer }
x --> {  | arr: Array<integer>, s: integer, t: integer }
x --> {  | arr: Array<integer>, s: integer, t: integer }
x --> {  | arr: Array<integer>, s: integer, t: integer }
x --> {  | arr: Array<integer>, s: integer, t: integer }
x < -1 --> boolean
x < 0 --> boolean
x = t --> integer
x = t --> integer
x = t --> integer
x = t --> integer
x = t --> integer
x > 0 --> boolean
x >> 1 --> integer
x >> 14 --> integer
x >> 2 --> integer
x >> 4 --> integer
x >> 8 --> integer
x >>> 16 --> integer
x.t --> integer
x.t --> integer
x.t --> integer
xh * (l = (z = This.arr[i]) & 3fff) + xl * (h = z >> 14) --> integer
xh * (l = (z = This.arr[i]) & 3fff) --> integer
xh * h --> integer
xh * h --> integer
xh --> integer
xh --> integer
xh --> integer
xh --> integer
xl * (h = z >> 14) --> integer
xl * l --> integer
xl --> integer
xl --> integer
xl --> integer
y --> {  | arr: Array<integer>, s: integer, t: integer }
y --> {  | arr: Array<integer>, s: integer, t: integer }
y --> {  | arr: Array<integer>, s: integer, t: integer }
y --> {  | arr: Array<integer>, s: integer, t: integer }
y --> {  | arr: Array<integer>, s: integer, t: integer }
y --> {  | arr: Array<integer>, s: integer, t: integer }
y --> {  | arr: Array<integer>, s: integer, t: integer }
y --> {  | arr: Array<integer>, s: integer, t: integer }
y --> {  | arr: Array<integer>, s: integer, t: integer }
y --> {  | arr: Array<integer>, s: integer, t: integer }
y --> {  | arr: Array<integer>, s: integer, t: integer }
y --> {  | arr: Array<integer>, s: integer, t: integer }
y --> {  | arr: Array<integer>, s: integer, t: integer }
y --> {  | arr: Array<integer>, s: integer, t: integer }
y --> {  | arr: Array<integer>, s: integer, t: integer }
y --> {  | arr: Array<integer>, s: integer, t: integer }
y --> {  | arr: Array<integer>, s: integer, t: integer }
y --> {  | arr: Array<integer>, s: integer, t: integer }
y.arr --> Array<integer>
y.arr --> Array<integer>
y.arr --> Array<integer>
y.arr --> Array<integer>
y.arr[i] --> integer
y.arr[y.t++] --> integer
y.arr[y.t++] = 0 --> integer
y.arr[ys - 1] --> integer
y.arr[ys - 2] --> integer
y.arr[ys - 2] >> F2 --> integer
y.t --> integer
y.t --> integer
y.t --> integer
y.t --> integer
y.t --> integer
y.t < ys --> boolean
y.t++ --> integer
y0 * (1 << F1) + ((ys > 1) ? y.arr[ys - 2] >> F2 : 0) --> integer
y0 * (1 << F1) --> integer
y0 --> integer
y0 --> integer
y0 --> integer
y0 --> integer
y0 == 0 --> boolean
ys - 1 --> integer
ys - 2 --> integer
ys --> integer
ys --> integer
ys --> integer
ys --> integer
ys --> integer
ys --> integer
ys --> integer
ys --> integer
ys --> integer
ys --> integer
ys > 1 --> boolean
yt --> integer
yt --> integer
yt --> integer
z & bm --> integer
z --> integer
z --> integer
z --> integer
z --> integer
z --> integer
z --> integer
z --> integer
z --> integer
z --> integer
z = This.arr[i] --> integer
z = o.arr[i] --> integer
z = o.arr[i] --> integer
z >> 14 --> integer
z >> bs --> integer
{arr: Array((t = o.t) + n), s: 0, t: 0} --> {  | arr: Array<integer>, s: integer, t: integer }
{arr: [], s: 0, t: 0} --> {  | arr: Array<integer>, s: integer, t: integer }
{arr: [], s: 0, t: 0} --> {  | arr: Array<integer>, s: integer, t: integer }
{arr: [], s: 0, t: 0} --> {  | arr: Array<integer>, s: integer, t: integer }
{arr: [], s: 0, t: 0} --> {  | arr: Array<integer>, s: integer, t: integer }
{arr: [], s: 0, t: 0} --> {  | arr: Array<integer>, s: integer, t: integer }
{arr: [], s: 0, t: 0} --> {  | arr: Array<integer>, s: integer, t: integer }
{arr: [], s: 0, t: 0} --> {  | arr: Array<integer>, s: integer, t: integer }
{arr: [], s: 0, t: 0} --> {  | arr: Array<integer>, s: integer, t: integer }
{compareTo: bnCompareTo, multiply: function multiply(o, a) {
  var r = {arr: [], s: 0, t: 0};
  bnpMultiplyTo(o, a, r);
  return r;
}, divide: function divide(o, a) {
  var r = {arr: [], s: 0, t: 0};
  bnpDivRemTo(o, a, r, null);
  return r;
}, addTo: bnpAddTo, add: function add(o, a) {
  var r = {arr: [], s: 0, t: 0};
  bnpAddTo(o, a, r);
  return r;
}, nbv: nbv, shiftLeft: shiftLeft, intValue: intValue} --> {  | compareTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> integer, multiply: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, divide: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, addTo: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> void, add: ({  | arr: Array<integer>, s: integer, t: integer },{  | arr: Array<integer>, s: integer, t: integer }) -> {  | arr: Array<integer>, s: integer, t: integer }, nbv: (integer) -> {  | arr: Array<integer>, s: integer, t: integer }, shiftLeft: ({  | arr: Array<integer>, s: integer, t: integer },integer) -> {  | arr: Array<integer>, s: integer, t: integer }, intValue: ({  | arr: Array<integer>, s: integer, t: integer }) -> integer }
