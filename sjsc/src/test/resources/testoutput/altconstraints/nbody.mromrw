{bodies: bodies, advance: function(dt) {
  var dx, dy, dz, distance, mag;
  var size = this.bodies.length;
  for (var i = 0; i < size; i++) 
    {
      var bodyi = this.bodies[i];
      for (var j = i + 1; j < size; j++) 
        {
          var bodyj = this.bodies[j];
          dx = bodyi.x - bodyj.x;
          dy = bodyi.y - bodyj.y;
          dz = bodyi.z - bodyj.z;
          distance = Math.sqrt(dx * dx + dy * dy + dz * dz);
          mag = dt / (distance * distance * distance);
          bodyi.vx -= dx * bodyj.mass * mag;
          bodyi.vy -= dy * bodyj.mass * mag;
          bodyi.vz -= dz * bodyj.mass * mag;
          bodyj.vx += dx * bodyi.mass * mag;
          bodyj.vy += dy * bodyi.mass * mag;
          bodyj.vz += dz * bodyi.mass * mag;
        }
    }
  for (var i = 0; i < size; i++) 
    {
      var body = this.bodies[i];
      body.x += dt * body.vx;
      body.y += dt * body.vy;
      body.z += dt * body.vz;
    }
}, energy: function() {
  var dx, dy, dz, distance;
  var e = 0.0;
  var size = this.bodies.length;
  for (var i = 0; i < size; i++) 
    {
      var bodyi = this.bodies[i];
      e += 0.5 * bodyi.mass * (bodyi.vx * bodyi.vx + bodyi.vy * bodyi.vy + bodyi.vz * bodyi.vz);
      for (var j = i + 1; j < size; j++) 
        {
          var bodyj = this.bodies[j];
          dx = bodyi.x - bodyj.x;
          dy = bodyi.y - bodyj.y;
          dz = bodyi.z - bodyj.z;
          distance = Math.sqrt(dx * dx + dy * dy + dz * dz);
          e -= (bodyi.mass * bodyj.mass) / distance;
        }
    }
  return e;
}} (line 94) --> [MRO=[bodies], MRW=[]]
{x: x, y: y, z: z, vx: vx, vy: vy, vz: vz, mass: mass, offsetMomentum: function(px, py, pz) {
  this.vx = -px / SOLAR_MASS;
  this.vy = -py / SOLAR_MASS;
  this.vz = -pz / SOLAR_MASS;
}} (line 10) --> [MRO=[], MRW=[vx, vy, vz]]