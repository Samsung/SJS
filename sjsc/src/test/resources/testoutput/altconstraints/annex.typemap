!heap.nextLevel[mString(place[0]) + mString(place[1])] --> boolean
!this.heap --> boolean
!this.isConfigure --> boolean
!this.isContain([ni, nj], ret) --> boolean
!this.isDrawing && !this.isLock && !this.isConfigure --> boolean
!this.isDrawing && !this.isLock --> boolean
!this.isDrawing && this.isLock && !this.isResult --> boolean
!this.isDrawing --> boolean
!this.isDrawing --> boolean
!this.isDrawing --> boolean
!this.isEnd && !this.isDrawing && !this.isLock --> boolean
!this.isEnd && this.isUserTurn && !this.isDrawing && !this.isLock && !this.isConfigure --> boolean
!this.isEnd --> boolean
!this.isEnd --> boolean
!this.isEnd --> boolean
!this.isLock && !this.isConfigure --> boolean
!this.isLock --> boolean
!this.isLock --> boolean
!this.isResult --> boolean
" " --> string
" Result: " --> string
" W: " --> string
"" --> string
"" --> string
"" --> string
", Result = " --> string
", WC = " --> string
"-" --> string
"B" --> string
"B" --> string
"B: " + World.status.bc + " W: " + World.status.wc + " Result: " + World.status.result --> string
"B: " + World.status.bc + " W: " + World.status.wc + " Result: " --> string
"B: " + World.status.bc + " W: " + World.status.wc --> string
"B: " + World.status.bc + " W: " --> string
"B: " + World.status.bc --> string
"B: " --> string
"BC = " + this.status.bc + ", WC = " + this.status.wc + ", Result = " + this.status.result --> string
"BC = " + this.status.bc + ", WC = " + this.status.wc + ", Result = " --> string
"BC = " + this.status.bc + ", WC = " + this.status.wc --> string
"BC = " + this.status.bc + ", WC = " --> string
"BC = " + this.status.bc --> string
"BC = " --> string
"Computer wins" --> string
"Computer wins" --> string
"DEBUG: actionAtPoint" + place[0] + place[1] + color --> string
"DEBUG: actionAtPoint" + place[0] + place[1] --> string
"DEBUG: actionAtPoint" + place[0] --> string
"DEBUG: actionAtPoint" --> string
"DEBUG: click " + i + j + " " + (this.isUserTurn ? "true" : "false") --> string
"DEBUG: click " + i + j + " " --> string
"DEBUG: click " + i + j --> string
"DEBUG: click " + i --> string
"DEBUG: click " --> string
"DEBUG: computerTurn" --> string
"DEBUG: displayBoard" --> string
"DEBUG: drawMessage " + this.playerNum + this.currentColor + (this.isUserTurn ? "true" : "false") --> string
"DEBUG: drawMessage " + this.playerNum + this.currentColor --> string
"DEBUG: drawMessage " + this.playerNum --> string
"DEBUG: drawMessage " --> string
"DEBUG: drawMessage exiting " + this.playerNum + this.currentColor + (this.isUserTurn ? "true" : "false") --> string
"DEBUG: drawMessage exiting " + this.playerNum + this.currentColor --> string
"DEBUG: drawMessage exiting " + this.playerNum --> string
"DEBUG: drawMessage exiting " --> string
"Draw" --> string
"Draw" --> string
"IDC_BUTTON_00" --> string
"IDC_BUTTON_01" --> string
"IDC_BUTTON_02" --> string
"IDC_BUTTON_03" --> string
"IDC_BUTTON_04" --> string
"IDC_BUTTON_05" --> string
"IDC_BUTTON_06" --> string
"IDC_BUTTON_07" --> string
"IDC_BUTTON_10" --> string
"IDC_BUTTON_11" --> string
"IDC_BUTTON_12" --> string
"IDC_BUTTON_13" --> string
"IDC_BUTTON_14" --> string
"IDC_BUTTON_15" --> string
"IDC_BUTTON_16" --> string
"IDC_BUTTON_17" --> string
"IDC_BUTTON_20" --> string
"IDC_BUTTON_21" --> string
"IDC_BUTTON_22" --> string
"IDC_BUTTON_23" --> string
"IDC_BUTTON_24" --> string
"IDC_BUTTON_25" --> string
"IDC_BUTTON_26" --> string
"IDC_BUTTON_27" --> string
"IDC_BUTTON_30" --> string
"IDC_BUTTON_31" --> string
"IDC_BUTTON_32" --> string
"IDC_BUTTON_33" --> string
"IDC_BUTTON_34" --> string
"IDC_BUTTON_35" --> string
"IDC_BUTTON_36" --> string
"IDC_BUTTON_37" --> string
"IDC_BUTTON_40" --> string
"IDC_BUTTON_41" --> string
"IDC_BUTTON_42" --> string
"IDC_BUTTON_43" --> string
"IDC_BUTTON_44" --> string
"IDC_BUTTON_45" --> string
"IDC_BUTTON_46" --> string
"IDC_BUTTON_47" --> string
"IDC_BUTTON_50" --> string
"IDC_BUTTON_51" --> string
"IDC_BUTTON_52" --> string
"IDC_BUTTON_53" --> string
"IDC_BUTTON_54" --> string
"IDC_BUTTON_55" --> string
"IDC_BUTTON_56" --> string
"IDC_BUTTON_57" --> string
"IDC_BUTTON_60" --> string
"IDC_BUTTON_61" --> string
"IDC_BUTTON_62" --> string
"IDC_BUTTON_63" --> string
"IDC_BUTTON_64" --> string
"IDC_BUTTON_65" --> string
"IDC_BUTTON_66" --> string
"IDC_BUTTON_67" --> string
"IDC_BUTTON_70" --> string
"IDC_BUTTON_71" --> string
"IDC_BUTTON_72" --> string
"IDC_BUTTON_73" --> string
"IDC_BUTTON_74" --> string
"IDC_BUTTON_75" --> string
"IDC_BUTTON_76" --> string
"IDC_BUTTON_77" --> string
"IDC_LABEL1" --> string
"IDL_FORM" --> string
"Player 1 wins" --> string
"Player 1 wins" --> string
"Unknown" --> string
"Unknown" --> string
"W" --> string
"W" --> string
"_" --> string
"false" --> string
"false" --> string
"false" --> string
"hello" --> string
"true" --> string
"true" --> string
"true" --> string
'' --> string
'Error: No Setting place for Computer' --> string
'Error: No possible places?!!!' --> string
'black' --> string
'black' --> string
'black' --> string
'black' --> string
'black' --> string
'black' --> string
'black' --> string
'black' --> string
'black' --> string
'black' --> string
'black' --> string
'black' --> string
'black' --> string
'black' --> string
'board' --> string
'board' --> string
'board' --> string
'board' --> string
'board' --> string
'message' --> string
'result' --> string
'white' --> string
'white' --> string
'white' --> string
'white' --> string
'white' --> string
'white' --> string
'white' --> string
'white' --> string
'white' --> string
'white' --> string
'white' --> string
'white' --> string
'white' --> string
'white' --> string
'white' --> string
'white' --> string
'white' --> string
'white' --> string
'white' --> string
'white' --> string
'white' --> string
'white' --> string
'white' --> string
'white' --> string
((bpossible.length == 0 && wpossible.length == 0) || (this.step == 64)) --> boolean
((color == 'white') ? 'black' : 'white') --> string
((color == 'white') ? 'black' : 'white') --> string
((color == 'white') ? 'black' : 'white') --> string
((color == 'white') ? 'black' : 'white') --> string
((color == 'white') ? 1 : -1) --> integer
(bpossible.length == 0 && wpossible.length == 0) --> boolean
(bpossible.length == 0 && wpossible.length == 0) || (this.step == 64) --> boolean
(color == 'white') --> boolean
(color == 'white') --> boolean
(color == 'white') --> boolean
(color == 'white') --> boolean
(color == 'white') --> boolean
(color == 'white') ? 'black' : 'white' --> string
(color == 'white') ? 'black' : 'white' --> string
(color == 'white') ? 'black' : 'white' --> string
(color == 'white') ? 'black' : 'white' --> string
(color == 'white') ? 1 : -1 --> integer
(cp.length - up.length) * 10 --> integer
(cp.length - up.length) --> integer
(cv - uv) * 2 --> integer
(cv - uv) --> integer
(function() {
  var w = {board: [[], [], [], [], [], [], [], []], bounder: 8, boardview: 'board', messageview: 'message', result: 'result', isEnd: false, endMessage: '', isUserTurn: true, isDrawing: false, isLock: false, isInit: false, isConfigure: false, isResult: false, level: 3, hasHelp: false, hasInit: false, playerNum: 1, currentColor: 'black', step: 4, point: null, directs: [[1, 0], [1, 1], [1, -1], [0, 1], [0, -1], [-1, 0], [-1, 1], [-1, -1]], heap: new Heap(), possible: null, pendingDrawMessage: 0, status: {bc: 0, wc: 0, result: "Unknown"}, init: function _init(play) {
  this.playerNum = play || 1;
  var i;
  var j;
  for (i = 0; i < this.bounder; i++) 
    {
      for (j = 0; j < this.bounder; j++) 
        {
          this.board[i][j] = 'board';
        }
    }
  this.board[3][3] = 'black';
  this.board[4][4] = 'black';
  this.board[3][4] = 'white';
  this.board[4][3] = 'white';
  this.isUserTurn = true;
  this.isLock = false;
  this.isConfigure = false;
  this.isResult = false;
  this.currentColor = 'white';
  this.step = 4;
  this.level = 3;
  this.point = [];
  this.heap = new Heap();
  this.isInit = true;
  this.endConfigure();
  this.drawMessage();
}, endConfigure: function() {
  this.isConfigure = false;
}, startOver: function() {
  this.init(this.playerNum);
  this.endConfigure();
}, actionAtPoint: function(place, color) {
  console.log("DEBUG: actionAtPoint" + place[0] + place[1] + color);
  var path = [];
  this.heap = this.heap.nextLevel[mString(place[0]) + mString(place[1])];
  if (!this.heap) 
  this.heap = new Heap();
  if (this.heap.value > -1 && this.heap.color == color) 
  {
    path = this.heap.path;
  } else {
    var act = this.getRevertPath(place, color, null);
    path = act.path;
    var heap = new Heap();
    heap.color = color;
    heap.path = path;
    heap.place = place;
    this.heap = heap;
  }
  this.step += 1;
  if (this.step >= 50) 
  this.level += 1; else if (this.step >= 53) 
  this.level += 1; else if (this.step >= 55) 
  this.level += 2;
  this.setPoint(place, color);
  this.drawPath(path, color);
}, setPoint: function(place, color) {
  this.board[place[0]][place[1]] = color;
  this.drawPoint(place, color);
}, drawPoint: function(place, color) {
}, drawPath: function(path, color) {
  this.isDrawing = true;
  var n;
  for (n = 0; n < path.length; n++) 
    {
      this.board[path[n][0]][path[n][1]] = color;
      this.drawPoint([path[n][0], path[n][1]], color);
    }
  this.pendingDrawMessage = this.pendingDrawMessage + 1;
}, drawMessage: function() {
  console.log("DEBUG: drawMessage " + this.playerNum + this.currentColor + (this.isUserTurn ? "true" : "false"));
  var bc = 0;
  var wc = 0;
  if (this.heap.value > -1) 
  {
    bc = this.heap.colorCount['black'];
    wc = this.heap.colorCount['white'];
  } else {
    var count = {'black': 0, 'white': 0};
    var i, j;
    for (i = 0; i < this.bounder; i++) 
      {
        for (j = 0; j < this.bounder; j++) 
          {
            count[this.board[i][j]] += 1;
          }
      }
    bc = count['black'];
    wc = count['white'];
  }
  var bpossible;
  var wpossible;
  this.status = {bc: bc, wc: wc, result: "Unknown"};
  if (this.heap.value > -1 && this.heap.color == this.currentColor) 
  {
    if (this.heap.color == 'white') 
    {
      bpossible = this.heap.upossible;
      wpossible = this.heap.cpossible;
    } else {
      wpossible = this.heap.upossible;
      bpossible = this.heap.cpossible;
    }
  } else {
    wpossible = this.possiblePlace('white', null);
    bpossible = this.possiblePlace('black', null);
  }
  this.isEnd = ((bpossible.length == 0 && wpossible.length == 0) || (this.step == 64));
  if (!this.isEnd) 
  {
    var tpossible = bpossible;
    if (this.currentColor == 'black') 
    {
      if (wpossible.length > 0) 
      {
        this.currentColor = 'white';
        tpossible = wpossible;
      }
    } else {
      if (bpossible.length > 0) 
      {
        this.currentColor = 'black';
      } else {
        tpossible = wpossible;
      }
    }
    this.possible = tpossible;
    if (this.playerNum == 1 && this.currentColor == 'white') 
    {
      this.isUserTurn = false;
      this.computerTurn();
    } else {
      this.isUserTurn = true;
    }
  } else {
    if (bc > wc) 
    {
      console.log("Player 1 wins");
      this.status.result = "Player 1 wins";
    } else if (bc == wc) 
    {
      console.log("Draw");
      this.status.result = "Draw";
    } else {
      console.log("Computer wins");
      this.status.result = "Computer wins";
    }
    this.isLock = true;
    this.isResult = true;
  }
  console.log("DEBUG: drawMessage exiting " + this.playerNum + this.currentColor + (this.isUserTurn ? "true" : "false"));
  this.isDrawing = false;
}, closeResult: function() {
  this.isResult = false;
}, displayBoard: function() {
  console.log("DEBUG: displayBoard");
  var i, j;
  for (i = 0; i < this.bounder; i++) 
    {
      var line = "";
      for (j = 0; j < this.bounder; j++) 
        {
          var c = "_";
          if (this.board[i][j] === 'black') 
          c = "B"; else if (this.board[i][j] === 'white') 
          c = "W";
          line = line + c;
        }
      console.log(line);
    }
  console.log("BC = " + this.status.bc + ", WC = " + this.status.wc + ", Result = " + this.status.result);
  console.log("");
}, click: function(i, j) {
  console.log("DEBUG: click " + i + j + " " + (this.isUserTurn ? "true" : "false"));
  if (this.board[i][j] === 'board' && !this.isEnd && this.isUserTurn && !this.isDrawing && !this.isLock && !this.isConfigure) 
  {
    if (this.canRevert([i, j], this.currentColor, null)) 
    {
      this.actionAtPoint([i, j], this.currentColor);
      if (this.playerNum == 1) 
      this.isUserTurn = false;
    } else {
    }
  } else if ((this.isConfigure && !this.isEnd && !this.isDrawing && !this.isLock) || (this.isConfigure && this.isEnd && !this.isDrawing && this.isLock && !this.isResult)) 
  {
    this.endConfigure();
  }
  while (this.pendingDrawMessage > 0) 
    {
      this.pendingDrawMessage = this.pendingDrawMessage - 1;
      this.drawMessage();
    }
}, computerTurn: function() {
  console.log("DEBUG: computerTurn");
  var possible;
  if (this.heap.value > -1) 
  {
    if (this.heap.color == 'white') 
    {
      possible = this.heap.cpossible;
    } else {
      possible = this.heap.upossible;
    }
  } else {
    possible = this.possiblePlace('white', null);
  }
  var place = this.bestPlace(possible);
  if (possible.length > 0 && place.length > 0) 
  {
    this.actionAtPoint(place, 'white');
  }
}, isContain: function(place, _array) {
  var heat = _array || [];
  var i = 0;
  for (i = 0; i < heat.length; i++) 
    {
      if (heat[i][0] == place[0] && heat[i][1] == place[1]) 
      {
        return true;
      }
    }
  return false;
}, possiblePlace: function(color, _board) {
  var ret = [];
  var tmp = {};
  var revColor = ((color == 'white') ? 'black' : 'white');
  var board = _board ? _board : this.board;
  var i, j, n;
  for (i = 0; i < this.bounder; i++) 
    {
      for (j = 0; j < this.bounder; j++) 
        {
          if (board[i][j] === revColor) 
          {
            for (n = 0; n < this.directs.length; n++) 
              {
                var ni = i + this.directs[n][0];
                var nj = j + this.directs[n][1];
                if (ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === 'board') 
                {
                  if (this.canRevert([ni, nj], color, board) && !this.isContain([ni, nj], ret)) 
                  {
                    ret.push([ni, nj]);
                  }
                }
              }
          }
        }
    }
  return ret;
}, canRevert: function(place, color, _board) {
  var i = place[0];
  var j = place[1];
  var revColor = ((color == 'white') ? 'black' : 'white');
  var board = _board ? _board : this.board;
  var n;
  for (n = 0; n < this.directs.length; n++) 
    {
      var di = this.directs[n][0];
      var dj = this.directs[n][1];
      var ni = i + di;
      var nj = j + dj;
      while (ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === revColor) 
        {
          ni += di;
          nj += dj;
          if (ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === color) 
          {
            return true;
          }
        }
    }
  return false;
}, getClone: function(obj) {
  var ret = [[], [], [], [], [], [], [], []];
  var i, j;
  for (i = 0; i < this.bounder; i++) 
    {
      for (j = 0; j < this.bounder; j++) 
        {
          ret[i][j] = obj[i][j];
        }
    }
  return ret;
}, getRevertPath: function(place, color, _board) {
  var i = place[0];
  var j = place[1];
  var revColor = ((color == 'white') ? 'black' : 'white');
  var board = _board ? _board : this.board;
  var path = [];
  var n;
  for (n = 0; n < this.directs.length; n++) 
    {
      var ni = i + this.directs[n][0];
      var nj = j + this.directs[n][1];
      var tpath = [];
      while (ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === revColor) 
        {
          tpath.push([ni, nj]);
          ni += this.directs[n][0];
          nj += this.directs[n][1];
          if (ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === color) 
          {
            var tmp = [0, 0];
            while (tpath.length > 0) 
              {
                tmp = tpath.pop();
                path.push(tmp);
              }
          }
        }
    }
  return {place: place, path: path, color: color};
}, doRevert: function(action, _board) {
  var color = action.color;
  var board = _board ? _board : this.board;
  var path = action.path;
  var p;
  for (p = 0; p < path.length; p++) 
    {
      board[path[p][0]][path[p][1]] = color;
    }
  return board;
}, getValue: function(place, _board) {
  var ret = 0;
  var board = _board ? _board : this.board;
  var i = place[0];
  var j = place[1];
  var mtable = [[100, -50, 40, 30, 30, 40, -50, 100], [-50, -30, 5, 1, 1, 5, -30, -50], [40, 5, 20, 10, 10, 20, 5, 40], [30, 1, 10, 0, 0, 10, 1, 30], [30, 1, 10, 0, 0, 10, 1, 30], [40, 5, 20, 10, 10, 20, 5, 40], [-50, -30, 5, 1, 1, 5, -30, -50], [100, -50, 40, 30, 30, 40, -50, 100]];
  return mtable[i][j];
}, evaluate: function(place, _color, _board, _level, _heap) {
  var ret = -100000;
  var level = _level ? _level : this.level;
  var heap = _heap ? _heap : this.heap;
  if (!heap.nextLevel[mString(place[0]) + mString(place[1])]) 
  {
    heap.nextLevel[mString(place[0]) + mString(place[1])] = new Heap();
  }
  heap = heap.nextLevel[mString(place[0]) + mString(place[1])];
  var toEndLevel = 64 - this.step;
  level = (level > toEndLevel ? toEndLevel : level);
  var nextValue = 0.0;
  var color = _color || 'white';
  var board = _board ? _board : this.board;
  board = this.getClone(board);
  var revColor = ((color == 'white') ? 'black' : 'white');
  var sym = ((color == 'white') ? 1 : -1);
  board[place[0]][place[1]] = color;
  var path;
  var cp;
  var up;
  if (heap.value > -1) 
  {
    path = heap.path;
    ret = heap.value;
    cp = heap.cpossible;
    up = heap.upossible;
    board = this.doRevert(heap, board);
  } else {
    var act = this.getRevertPath(place, color, board);
    heap.path = act.path;
    heap.color = color;
    heap.place = place;
    board = this.doRevert(heap, board);
    cp = this.possiblePlace(color, board);
    up = this.possiblePlace(revColor, board);
    var cv = 0;
    var uv = 0;
    var cc = 0;
    var uc = 0;
    var i, j;
    for (i = 0; i < this.bounder; i++) 
      {
        for (j = 0; j < this.bounder; j++) 
          {
            if (board[i][j] === color) 
            {
              cv += this.getValue([i, j], board);
              cc++;
            } else if (board[i][j] === revColor) 
            {
              uv += this.getValue([i, j], board);
              uc++;
            }
          }
      }
    ret = (cp.length - up.length) * 10;
    ret += (cv - uv) * 2;
    if (up.length == 0 && cp.length > 0) 
    ret = 100000;
    heap.value = ret;
    heap.nextLevel = {};
    heap.cpossible = cp;
    heap.upossible = up;
    heap.colorCount[color] = cc;
    heap.colorCount[revColor] = uc;
  }
  if (level > 1 && (up.length > 0 || cp.length > 0)) 
  {
    if (up.length == 0) 
    {
      up = cp;
      revColor = color;
    }
    up = this.getBestPlaceSet(up);
    var p;
    for (p = 0; p < up.length; p++) 
      {
        nextValue = nextValue + this.evaluate(up[p], revColor, board, level - 1, heap);
      }
    if (up.length > 0) 
    {
      nextValue = nextValue / up.length;
      ret = Math.round(ret * 0.5 + nextValue * 0.5);
    }
  }
  return ret * sym;
}, getBestPlaceSet: function(possible) {
  var best = [];
  var middle = [];
  var ret = [];
  var i;
  for (i = 0; i < possible.length; i++) 
    {
      var t = this.getValue(possible[i], null);
      if (t == 100) 
      {
        best.push(possible[i]);
      } else if (t >= 0) 
      {
        middle.push(possible[i]);
      }
    }
  if (best.length > 0) 
  {
    ret = best;
  } else if (middle.length > 0) 
  {
    ret = middle;
  } else {
    ret = possible;
  }
  return ret;
}, bestPlace: function(possible) {
  if (possible.length == 0) 
  console.log('Error: No possible places?!!!');
  possible = this.getBestPlaceSet(possible);
  var ret = [];
  if (possible.length > 0) 
  {
    ret = possible[0];
    var p;
    var value = this.evaluate(ret, null, null, 0, null);
    for (p = 1; p < possible.length; p++) 
      {
        var v = this.evaluate(possible[p], null, null, 0, null);
        if (v > value) 
        {
          value = v;
          ret = possible[p];
        }
      }
  } else {
    console.log('Error: No Setting place for Computer');
  }
  return ret;
}};
  return w;
}) --> () -> {  | board: Array<Array<string>>, bounder: integer, boardview: string, messageview: string, result: string, isEnd: boolean, endMessage: string, isUserTurn: boolean, isDrawing: boolean, isLock: boolean, isInit: boolean, isConfigure: boolean, isResult: boolean, level: integer, hasHelp: boolean, hasInit: boolean, playerNum: integer, currentColor: string, step: integer, point: Array<___>, directs: Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, possible: Array<Array<integer>>, pendingDrawMessage: integer, status: {  | bc: integer, wc: integer, result: string }, init: [](integer) -> void, endConfigure: []() -> void, startOver: []() -> void, actionAtPoint: [](Array<integer>,string) -> void, setPoint: [](Array<integer>,string) -> void, drawPoint: (Array<integer>,string) -> void, drawPath: [](Array<Array<integer>>,string) -> void, drawMessage: []() -> void, closeResult: []() -> void, displayBoard: []() -> void, click: [](integer,integer) -> void, computerTurn: []() -> void, isContain: (Array<integer>,Array<Array<integer>>) -> boolean, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, getClone: [](Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, bestPlace: [](Array<Array<integer>>) -> Array<integer> }
(function() {
  var w = {board: [[], [], [], [], [], [], [], []], bounder: 8, boardview: 'board', messageview: 'message', result: 'result', isEnd: false, endMessage: '', isUserTurn: true, isDrawing: false, isLock: false, isInit: false, isConfigure: false, isResult: false, level: 3, hasHelp: false, hasInit: false, playerNum: 1, currentColor: 'black', step: 4, point: null, directs: [[1, 0], [1, 1], [1, -1], [0, 1], [0, -1], [-1, 0], [-1, 1], [-1, -1]], heap: new Heap(), possible: null, pendingDrawMessage: 0, status: {bc: 0, wc: 0, result: "Unknown"}, init: function _init(play) {
  this.playerNum = play || 1;
  var i;
  var j;
  for (i = 0; i < this.bounder; i++) 
    {
      for (j = 0; j < this.bounder; j++) 
        {
          this.board[i][j] = 'board';
        }
    }
  this.board[3][3] = 'black';
  this.board[4][4] = 'black';
  this.board[3][4] = 'white';
  this.board[4][3] = 'white';
  this.isUserTurn = true;
  this.isLock = false;
  this.isConfigure = false;
  this.isResult = false;
  this.currentColor = 'white';
  this.step = 4;
  this.level = 3;
  this.point = [];
  this.heap = new Heap();
  this.isInit = true;
  this.endConfigure();
  this.drawMessage();
}, endConfigure: function() {
  this.isConfigure = false;
}, startOver: function() {
  this.init(this.playerNum);
  this.endConfigure();
}, actionAtPoint: function(place, color) {
  console.log("DEBUG: actionAtPoint" + place[0] + place[1] + color);
  var path = [];
  this.heap = this.heap.nextLevel[mString(place[0]) + mString(place[1])];
  if (!this.heap) 
  this.heap = new Heap();
  if (this.heap.value > -1 && this.heap.color == color) 
  {
    path = this.heap.path;
  } else {
    var act = this.getRevertPath(place, color, null);
    path = act.path;
    var heap = new Heap();
    heap.color = color;
    heap.path = path;
    heap.place = place;
    this.heap = heap;
  }
  this.step += 1;
  if (this.step >= 50) 
  this.level += 1; else if (this.step >= 53) 
  this.level += 1; else if (this.step >= 55) 
  this.level += 2;
  this.setPoint(place, color);
  this.drawPath(path, color);
}, setPoint: function(place, color) {
  this.board[place[0]][place[1]] = color;
  this.drawPoint(place, color);
}, drawPoint: function(place, color) {
}, drawPath: function(path, color) {
  this.isDrawing = true;
  var n;
  for (n = 0; n < path.length; n++) 
    {
      this.board[path[n][0]][path[n][1]] = color;
      this.drawPoint([path[n][0], path[n][1]], color);
    }
  this.pendingDrawMessage = this.pendingDrawMessage + 1;
}, drawMessage: function() {
  console.log("DEBUG: drawMessage " + this.playerNum + this.currentColor + (this.isUserTurn ? "true" : "false"));
  var bc = 0;
  var wc = 0;
  if (this.heap.value > -1) 
  {
    bc = this.heap.colorCount['black'];
    wc = this.heap.colorCount['white'];
  } else {
    var count = {'black': 0, 'white': 0};
    var i, j;
    for (i = 0; i < this.bounder; i++) 
      {
        for (j = 0; j < this.bounder; j++) 
          {
            count[this.board[i][j]] += 1;
          }
      }
    bc = count['black'];
    wc = count['white'];
  }
  var bpossible;
  var wpossible;
  this.status = {bc: bc, wc: wc, result: "Unknown"};
  if (this.heap.value > -1 && this.heap.color == this.currentColor) 
  {
    if (this.heap.color == 'white') 
    {
      bpossible = this.heap.upossible;
      wpossible = this.heap.cpossible;
    } else {
      wpossible = this.heap.upossible;
      bpossible = this.heap.cpossible;
    }
  } else {
    wpossible = this.possiblePlace('white', null);
    bpossible = this.possiblePlace('black', null);
  }
  this.isEnd = ((bpossible.length == 0 && wpossible.length == 0) || (this.step == 64));
  if (!this.isEnd) 
  {
    var tpossible = bpossible;
    if (this.currentColor == 'black') 
    {
      if (wpossible.length > 0) 
      {
        this.currentColor = 'white';
        tpossible = wpossible;
      }
    } else {
      if (bpossible.length > 0) 
      {
        this.currentColor = 'black';
      } else {
        tpossible = wpossible;
      }
    }
    this.possible = tpossible;
    if (this.playerNum == 1 && this.currentColor == 'white') 
    {
      this.isUserTurn = false;
      this.computerTurn();
    } else {
      this.isUserTurn = true;
    }
  } else {
    if (bc > wc) 
    {
      console.log("Player 1 wins");
      this.status.result = "Player 1 wins";
    } else if (bc == wc) 
    {
      console.log("Draw");
      this.status.result = "Draw";
    } else {
      console.log("Computer wins");
      this.status.result = "Computer wins";
    }
    this.isLock = true;
    this.isResult = true;
  }
  console.log("DEBUG: drawMessage exiting " + this.playerNum + this.currentColor + (this.isUserTurn ? "true" : "false"));
  this.isDrawing = false;
}, closeResult: function() {
  this.isResult = false;
}, displayBoard: function() {
  console.log("DEBUG: displayBoard");
  var i, j;
  for (i = 0; i < this.bounder; i++) 
    {
      var line = "";
      for (j = 0; j < this.bounder; j++) 
        {
          var c = "_";
          if (this.board[i][j] === 'black') 
          c = "B"; else if (this.board[i][j] === 'white') 
          c = "W";
          line = line + c;
        }
      console.log(line);
    }
  console.log("BC = " + this.status.bc + ", WC = " + this.status.wc + ", Result = " + this.status.result);
  console.log("");
}, click: function(i, j) {
  console.log("DEBUG: click " + i + j + " " + (this.isUserTurn ? "true" : "false"));
  if (this.board[i][j] === 'board' && !this.isEnd && this.isUserTurn && !this.isDrawing && !this.isLock && !this.isConfigure) 
  {
    if (this.canRevert([i, j], this.currentColor, null)) 
    {
      this.actionAtPoint([i, j], this.currentColor);
      if (this.playerNum == 1) 
      this.isUserTurn = false;
    } else {
    }
  } else if ((this.isConfigure && !this.isEnd && !this.isDrawing && !this.isLock) || (this.isConfigure && this.isEnd && !this.isDrawing && this.isLock && !this.isResult)) 
  {
    this.endConfigure();
  }
  while (this.pendingDrawMessage > 0) 
    {
      this.pendingDrawMessage = this.pendingDrawMessage - 1;
      this.drawMessage();
    }
}, computerTurn: function() {
  console.log("DEBUG: computerTurn");
  var possible;
  if (this.heap.value > -1) 
  {
    if (this.heap.color == 'white') 
    {
      possible = this.heap.cpossible;
    } else {
      possible = this.heap.upossible;
    }
  } else {
    possible = this.possiblePlace('white', null);
  }
  var place = this.bestPlace(possible);
  if (possible.length > 0 && place.length > 0) 
  {
    this.actionAtPoint(place, 'white');
  }
}, isContain: function(place, _array) {
  var heat = _array || [];
  var i = 0;
  for (i = 0; i < heat.length; i++) 
    {
      if (heat[i][0] == place[0] && heat[i][1] == place[1]) 
      {
        return true;
      }
    }
  return false;
}, possiblePlace: function(color, _board) {
  var ret = [];
  var tmp = {};
  var revColor = ((color == 'white') ? 'black' : 'white');
  var board = _board ? _board : this.board;
  var i, j, n;
  for (i = 0; i < this.bounder; i++) 
    {
      for (j = 0; j < this.bounder; j++) 
        {
          if (board[i][j] === revColor) 
          {
            for (n = 0; n < this.directs.length; n++) 
              {
                var ni = i + this.directs[n][0];
                var nj = j + this.directs[n][1];
                if (ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === 'board') 
                {
                  if (this.canRevert([ni, nj], color, board) && !this.isContain([ni, nj], ret)) 
                  {
                    ret.push([ni, nj]);
                  }
                }
              }
          }
        }
    }
  return ret;
}, canRevert: function(place, color, _board) {
  var i = place[0];
  var j = place[1];
  var revColor = ((color == 'white') ? 'black' : 'white');
  var board = _board ? _board : this.board;
  var n;
  for (n = 0; n < this.directs.length; n++) 
    {
      var di = this.directs[n][0];
      var dj = this.directs[n][1];
      var ni = i + di;
      var nj = j + dj;
      while (ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === revColor) 
        {
          ni += di;
          nj += dj;
          if (ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === color) 
          {
            return true;
          }
        }
    }
  return false;
}, getClone: function(obj) {
  var ret = [[], [], [], [], [], [], [], []];
  var i, j;
  for (i = 0; i < this.bounder; i++) 
    {
      for (j = 0; j < this.bounder; j++) 
        {
          ret[i][j] = obj[i][j];
        }
    }
  return ret;
}, getRevertPath: function(place, color, _board) {
  var i = place[0];
  var j = place[1];
  var revColor = ((color == 'white') ? 'black' : 'white');
  var board = _board ? _board : this.board;
  var path = [];
  var n;
  for (n = 0; n < this.directs.length; n++) 
    {
      var ni = i + this.directs[n][0];
      var nj = j + this.directs[n][1];
      var tpath = [];
      while (ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === revColor) 
        {
          tpath.push([ni, nj]);
          ni += this.directs[n][0];
          nj += this.directs[n][1];
          if (ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === color) 
          {
            var tmp = [0, 0];
            while (tpath.length > 0) 
              {
                tmp = tpath.pop();
                path.push(tmp);
              }
          }
        }
    }
  return {place: place, path: path, color: color};
}, doRevert: function(action, _board) {
  var color = action.color;
  var board = _board ? _board : this.board;
  var path = action.path;
  var p;
  for (p = 0; p < path.length; p++) 
    {
      board[path[p][0]][path[p][1]] = color;
    }
  return board;
}, getValue: function(place, _board) {
  var ret = 0;
  var board = _board ? _board : this.board;
  var i = place[0];
  var j = place[1];
  var mtable = [[100, -50, 40, 30, 30, 40, -50, 100], [-50, -30, 5, 1, 1, 5, -30, -50], [40, 5, 20, 10, 10, 20, 5, 40], [30, 1, 10, 0, 0, 10, 1, 30], [30, 1, 10, 0, 0, 10, 1, 30], [40, 5, 20, 10, 10, 20, 5, 40], [-50, -30, 5, 1, 1, 5, -30, -50], [100, -50, 40, 30, 30, 40, -50, 100]];
  return mtable[i][j];
}, evaluate: function(place, _color, _board, _level, _heap) {
  var ret = -100000;
  var level = _level ? _level : this.level;
  var heap = _heap ? _heap : this.heap;
  if (!heap.nextLevel[mString(place[0]) + mString(place[1])]) 
  {
    heap.nextLevel[mString(place[0]) + mString(place[1])] = new Heap();
  }
  heap = heap.nextLevel[mString(place[0]) + mString(place[1])];
  var toEndLevel = 64 - this.step;
  level = (level > toEndLevel ? toEndLevel : level);
  var nextValue = 0.0;
  var color = _color || 'white';
  var board = _board ? _board : this.board;
  board = this.getClone(board);
  var revColor = ((color == 'white') ? 'black' : 'white');
  var sym = ((color == 'white') ? 1 : -1);
  board[place[0]][place[1]] = color;
  var path;
  var cp;
  var up;
  if (heap.value > -1) 
  {
    path = heap.path;
    ret = heap.value;
    cp = heap.cpossible;
    up = heap.upossible;
    board = this.doRevert(heap, board);
  } else {
    var act = this.getRevertPath(place, color, board);
    heap.path = act.path;
    heap.color = color;
    heap.place = place;
    board = this.doRevert(heap, board);
    cp = this.possiblePlace(color, board);
    up = this.possiblePlace(revColor, board);
    var cv = 0;
    var uv = 0;
    var cc = 0;
    var uc = 0;
    var i, j;
    for (i = 0; i < this.bounder; i++) 
      {
        for (j = 0; j < this.bounder; j++) 
          {
            if (board[i][j] === color) 
            {
              cv += this.getValue([i, j], board);
              cc++;
            } else if (board[i][j] === revColor) 
            {
              uv += this.getValue([i, j], board);
              uc++;
            }
          }
      }
    ret = (cp.length - up.length) * 10;
    ret += (cv - uv) * 2;
    if (up.length == 0 && cp.length > 0) 
    ret = 100000;
    heap.value = ret;
    heap.nextLevel = {};
    heap.cpossible = cp;
    heap.upossible = up;
    heap.colorCount[color] = cc;
    heap.colorCount[revColor] = uc;
  }
  if (level > 1 && (up.length > 0 || cp.length > 0)) 
  {
    if (up.length == 0) 
    {
      up = cp;
      revColor = color;
    }
    up = this.getBestPlaceSet(up);
    var p;
    for (p = 0; p < up.length; p++) 
      {
        nextValue = nextValue + this.evaluate(up[p], revColor, board, level - 1, heap);
      }
    if (up.length > 0) 
    {
      nextValue = nextValue / up.length;
      ret = Math.round(ret * 0.5 + nextValue * 0.5);
    }
  }
  return ret * sym;
}, getBestPlaceSet: function(possible) {
  var best = [];
  var middle = [];
  var ret = [];
  var i;
  for (i = 0; i < possible.length; i++) 
    {
      var t = this.getValue(possible[i], null);
      if (t == 100) 
      {
        best.push(possible[i]);
      } else if (t >= 0) 
      {
        middle.push(possible[i]);
      }
    }
  if (best.length > 0) 
  {
    ret = best;
  } else if (middle.length > 0) 
  {
    ret = middle;
  } else {
    ret = possible;
  }
  return ret;
}, bestPlace: function(possible) {
  if (possible.length == 0) 
  console.log('Error: No possible places?!!!');
  possible = this.getBestPlaceSet(possible);
  var ret = [];
  if (possible.length > 0) 
  {
    ret = possible[0];
    var p;
    var value = this.evaluate(ret, null, null, 0, null);
    for (p = 1; p < possible.length; p++) 
      {
        var v = this.evaluate(possible[p], null, null, 0, null);
        if (v > value) 
        {
          value = v;
          ret = possible[p];
        }
      }
  } else {
    console.log('Error: No Setting place for Computer');
  }
  return ret;
}};
  return w;
})() --> {  | board: Array<Array<string>>, bounder: integer, boardview: string, messageview: string, result: string, isEnd: boolean, endMessage: string, isUserTurn: boolean, isDrawing: boolean, isLock: boolean, isInit: boolean, isConfigure: boolean, isResult: boolean, level: integer, hasHelp: boolean, hasInit: boolean, playerNum: integer, currentColor: string, step: integer, point: Array<___>, directs: Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, possible: Array<Array<integer>>, pendingDrawMessage: integer, status: {  | bc: integer, wc: integer, result: string }, init: [](integer) -> void, endConfigure: []() -> void, startOver: []() -> void, actionAtPoint: [](Array<integer>,string) -> void, setPoint: [](Array<integer>,string) -> void, drawPoint: (Array<integer>,string) -> void, drawPath: [](Array<Array<integer>>,string) -> void, drawMessage: []() -> void, closeResult: []() -> void, displayBoard: []() -> void, click: [](integer,integer) -> void, computerTurn: []() -> void, isContain: (Array<integer>,Array<Array<integer>>) -> boolean, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, getClone: [](Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, bestPlace: [](Array<Array<integer>>) -> Array<integer> }
(i * 8) --> integer
(level > toEndLevel ? toEndLevel : level) --> integer
(this.isConfigure && !this.isEnd && !this.isDrawing && !this.isLock) --> boolean
(this.isConfigure && !this.isEnd && !this.isDrawing && !this.isLock) || (this.isConfigure && this.isEnd && !this.isDrawing && this.isLock && !this.isResult) --> boolean
(this.isConfigure && this.isEnd && !this.isDrawing && this.isLock && !this.isResult) --> boolean
(this.isUserTurn ? "true" : "false") --> string
(this.isUserTurn ? "true" : "false") --> string
(this.isUserTurn ? "true" : "false") --> string
(this.step == 64) --> boolean
(up.length > 0 || cp.length > 0) --> boolean
-1 --> integer
-1 --> integer
-1 --> integer
-1 --> integer
-1 --> integer
-1 --> integer
-1 --> integer
-1 --> integer
-1 --> integer
-1 --> integer
-1 --> integer
-1 --> integer
-1 --> integer
-100000 --> integer
-30 --> integer
-30 --> integer
-30 --> integer
-30 --> integer
-50 --> integer
-50 --> integer
-50 --> integer
-50 --> integer
-50 --> integer
-50 --> integer
-50 --> integer
-50 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0.0 --> float
0.5 --> float
0.5 --> float
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
10 --> integer
10 --> integer
10 --> integer
10 --> integer
10 --> integer
10 --> integer
10 --> integer
10 --> integer
10 --> integer
100 --> integer
100 --> integer
100 --> integer
100 --> integer
100 --> integer
100000 --> integer
100000 --> integer
2 --> integer
2 --> integer
2 --> integer
2 --> integer
2 --> integer
20 --> integer
20 --> integer
20 --> integer
20 --> integer
3 --> integer
3 --> integer
3 --> integer
3 --> integer
3 --> integer
3 --> integer
3 --> integer
30 --> integer
30 --> integer
30 --> integer
30 --> integer
30 --> integer
30 --> integer
30 --> integer
30 --> integer
30 --> integer
30 --> integer
30 --> integer
30 --> integer
4 --> integer
4 --> integer
4 --> integer
4 --> integer
4 --> integer
4 --> integer
4 --> integer
4 --> integer
40 --> integer
40 --> integer
40 --> integer
40 --> integer
40 --> integer
40 --> integer
40 --> integer
40 --> integer
5 --> integer
5 --> integer
5 --> integer
5 --> integer
5 --> integer
5 --> integer
5 --> integer
5 --> integer
5 --> integer
50 --> integer
50 --> integer
50 --> integer
50 --> integer
50 --> integer
50 --> integer
50 --> integer
50 --> integer
50 --> integer
53 --> integer
55 --> integer
64 - this.step --> integer
64 --> integer
64 --> integer
64 --> integer
8 --> integer
8 --> integer
8 --> integer
8 --> integer
ALIGNMENT_RIGHT --> integer
ALIGNMENT_RIGHT --> integer
Annex --> ctor<0>[{ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, Terminate: []() -> void |  }]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, Terminate: []() -> void | OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean }
Annex --> ctor<0>[{ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, Terminate: []() -> void |  }]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, Terminate: []() -> void | OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean }
Annex --> ctor<0>[{ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, Terminate: []() -> void |  }]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, Terminate: []() -> void | OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean }
Annex.prototype --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, Terminate: []() -> void |  }
Annex.prototype = new TizenLib.Application() --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, Terminate: []() -> void |  }
AnnexActionEventListener --> ctor<0>[{ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }]({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }) -> { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: <<recursive>>, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }
AnnexActionEventListener --> ctor<0>[{ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }]({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }) -> { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: <<recursive>>, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }
AnnexActionEventListener --> ctor<0>[{ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }]({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }) -> { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: <<recursive>>, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }
AnnexActionEventListener.prototype --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }
AnnexActionEventListener.prototype = new TizenLib.IActionEventListener() --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }
AnnexForm --> ctor<0>[{ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
AnnexForm --> ctor<0>[{ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
AnnexForm --> ctor<0>[{ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
AnnexForm.prototype --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }
AnnexForm.prototype = new TizenLib.Form() --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }
BUTTON_COUNT --> integer
BUTTON_COUNT --> integer
E_SUCCESS --> integer
E_SUCCESS --> integer
E_SUCCESS --> integer
E_SUCCESS --> integer
E_SUCCESS --> integer
HEADER_STYLE_TITLE --> integer
Heap --> ctor<0>[null]() -> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
Heap --> ctor<0>[null]() -> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
Heap --> ctor<0>[null]() -> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
Heap --> ctor<0>[null]() -> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
Heap --> ctor<0>[null]() -> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
Heap --> ctor<0>[null]() -> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
IDC_BUTTON_00 --> string
IDC_BUTTON_00 --> string
IDC_BUTTON_01 --> string
IDC_BUTTON_01 --> string
IDC_BUTTON_02 --> string
IDC_BUTTON_02 --> string
IDC_BUTTON_03 --> string
IDC_BUTTON_03 --> string
IDC_BUTTON_04 --> string
IDC_BUTTON_04 --> string
IDC_BUTTON_05 --> string
IDC_BUTTON_05 --> string
IDC_BUTTON_06 --> string
IDC_BUTTON_06 --> string
IDC_BUTTON_07 --> string
IDC_BUTTON_07 --> string
IDC_BUTTON_10 --> string
IDC_BUTTON_10 --> string
IDC_BUTTON_11 --> string
IDC_BUTTON_11 --> string
IDC_BUTTON_12 --> string
IDC_BUTTON_12 --> string
IDC_BUTTON_13 --> string
IDC_BUTTON_13 --> string
IDC_BUTTON_14 --> string
IDC_BUTTON_14 --> string
IDC_BUTTON_15 --> string
IDC_BUTTON_15 --> string
IDC_BUTTON_16 --> string
IDC_BUTTON_16 --> string
IDC_BUTTON_17 --> string
IDC_BUTTON_17 --> string
IDC_BUTTON_20 --> string
IDC_BUTTON_20 --> string
IDC_BUTTON_21 --> string
IDC_BUTTON_21 --> string
IDC_BUTTON_22 --> string
IDC_BUTTON_22 --> string
IDC_BUTTON_23 --> string
IDC_BUTTON_23 --> string
IDC_BUTTON_24 --> string
IDC_BUTTON_24 --> string
IDC_BUTTON_25 --> string
IDC_BUTTON_25 --> string
IDC_BUTTON_26 --> string
IDC_BUTTON_26 --> string
IDC_BUTTON_27 --> string
IDC_BUTTON_27 --> string
IDC_BUTTON_30 --> string
IDC_BUTTON_30 --> string
IDC_BUTTON_31 --> string
IDC_BUTTON_31 --> string
IDC_BUTTON_32 --> string
IDC_BUTTON_32 --> string
IDC_BUTTON_33 --> string
IDC_BUTTON_33 --> string
IDC_BUTTON_34 --> string
IDC_BUTTON_34 --> string
IDC_BUTTON_35 --> string
IDC_BUTTON_35 --> string
IDC_BUTTON_36 --> string
IDC_BUTTON_36 --> string
IDC_BUTTON_37 --> string
IDC_BUTTON_37 --> string
IDC_BUTTON_40 --> string
IDC_BUTTON_40 --> string
IDC_BUTTON_41 --> string
IDC_BUTTON_41 --> string
IDC_BUTTON_42 --> string
IDC_BUTTON_42 --> string
IDC_BUTTON_43 --> string
IDC_BUTTON_43 --> string
IDC_BUTTON_44 --> string
IDC_BUTTON_44 --> string
IDC_BUTTON_45 --> string
IDC_BUTTON_45 --> string
IDC_BUTTON_46 --> string
IDC_BUTTON_46 --> string
IDC_BUTTON_47 --> string
IDC_BUTTON_47 --> string
IDC_BUTTON_50 --> string
IDC_BUTTON_50 --> string
IDC_BUTTON_51 --> string
IDC_BUTTON_51 --> string
IDC_BUTTON_52 --> string
IDC_BUTTON_52 --> string
IDC_BUTTON_53 --> string
IDC_BUTTON_53 --> string
IDC_BUTTON_54 --> string
IDC_BUTTON_54 --> string
IDC_BUTTON_55 --> string
IDC_BUTTON_55 --> string
IDC_BUTTON_56 --> string
IDC_BUTTON_56 --> string
IDC_BUTTON_57 --> string
IDC_BUTTON_57 --> string
IDC_BUTTON_60 --> string
IDC_BUTTON_60 --> string
IDC_BUTTON_61 --> string
IDC_BUTTON_61 --> string
IDC_BUTTON_62 --> string
IDC_BUTTON_62 --> string
IDC_BUTTON_63 --> string
IDC_BUTTON_63 --> string
IDC_BUTTON_64 --> string
IDC_BUTTON_64 --> string
IDC_BUTTON_65 --> string
IDC_BUTTON_65 --> string
IDC_BUTTON_66 --> string
IDC_BUTTON_66 --> string
IDC_BUTTON_67 --> string
IDC_BUTTON_67 --> string
IDC_BUTTON_70 --> string
IDC_BUTTON_70 --> string
IDC_BUTTON_71 --> string
IDC_BUTTON_71 --> string
IDC_BUTTON_72 --> string
IDC_BUTTON_72 --> string
IDC_BUTTON_73 --> string
IDC_BUTTON_73 --> string
IDC_BUTTON_74 --> string
IDC_BUTTON_74 --> string
IDC_BUTTON_75 --> string
IDC_BUTTON_75 --> string
IDC_BUTTON_76 --> string
IDC_BUTTON_76 --> string
IDC_BUTTON_77 --> string
IDC_BUTTON_77 --> string
IDC_LABEL1 --> string
IDC_LABEL1 --> string
Math --> { E: float, LN2: float, LN10: float, LOG2E: float, LOG10E: float, PI: float, SQRT1_2: float, SQRT2: float, abs: [](float) -> float, acos: [](float) -> float, acosh: [](float) -> float, asin: [](float) -> float, asinh: [](float) -> float, atan: [](float) -> float, atanh: [](float) -> float, atan2: [](float,float) -> float, cbrt: [](float) -> float, ceil: [](float) -> float, cos: [](float) -> float, cosh: [](float) -> float, exp: [](float) -> float, expm1: [](float) -> float, floor: [](float) -> integer, fround: [](float) -> float, hypot: [](float,float) -> float, imul: [](float,float) -> float, log: [](float) -> float, log1p: [](float) -> float, log10: [](float) -> float, log2: [](float) -> float, max: [](float,float) -> float, min: [](float,float) -> float, pow: [](float,float) -> float, random: []() -> float, round: [](float) -> float, sign: [](float) -> float, sin: [](float) -> float, sinh: [](float) -> float, sqrt: [](float) -> float, tan: [](float) -> float, tanh: [](float) -> float, toSource: []() -> string, trunc: [](float) -> float |  }
Math --> { E: float, LN2: float, LN10: float, LOG2E: float, LOG10E: float, PI: float, SQRT1_2: float, SQRT2: float, abs: [](float) -> float, acos: [](float) -> float, acosh: [](float) -> float, asin: [](float) -> float, asinh: [](float) -> float, atan: [](float) -> float, atanh: [](float) -> float, atan2: [](float,float) -> float, cbrt: [](float) -> float, ceil: [](float) -> float, cos: [](float) -> float, cosh: [](float) -> float, exp: [](float) -> float, expm1: [](float) -> float, floor: [](float) -> integer, fround: [](float) -> float, hypot: [](float,float) -> float, imul: [](float,float) -> float, log: [](float) -> float, log1p: [](float) -> float, log10: [](float) -> float, log2: [](float) -> float, max: [](float,float) -> float, min: [](float,float) -> float, pow: [](float,float) -> float, random: []() -> float, round: [](float) -> float, sign: [](float) -> float, sin: [](float) -> float, sinh: [](float) -> float, sqrt: [](float) -> float, tan: [](float) -> float, tanh: [](float) -> float, toSource: []() -> string, trunc: [](float) -> float |  }
Math.floor --> [](float) -> integer
Math.floor(actionId / 8) --> integer
Math.round --> [](float) -> float
Math.round(ret * 0.5 + nextValue * 0.5) --> float
TizenLib --> { Control: ctor<0>[null]() -> { _____cpp_receiver: void |  }, String: ctor<0>[null](string) -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }, Form: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }, Application: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, Terminate: []() -> void |  }, Button: ctor<0>[null]() -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, IFormBackEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }, IActionEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }, AppRegistry: ctor<0>[null]() -> { _____cpp_receiver: void |  }, Header: ctor<0>[null]() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, Label: ctor<0>[null]() -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, Frame: ctor<0>[null]() -> { _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }, casts: { Button_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, Label_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  } |  } |  }
TizenLib --> { Control: ctor<0>[null]() -> { _____cpp_receiver: void |  }, String: ctor<0>[null](string) -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }, Form: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }, Application: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, Terminate: []() -> void |  }, Button: ctor<0>[null]() -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, IFormBackEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }, IActionEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }, AppRegistry: ctor<0>[null]() -> { _____cpp_receiver: void |  }, Header: ctor<0>[null]() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, Label: ctor<0>[null]() -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, Frame: ctor<0>[null]() -> { _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }, casts: { Button_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, Label_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  } |  } |  }
TizenLib --> { Control: ctor<0>[null]() -> { _____cpp_receiver: void |  }, String: ctor<0>[null](string) -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }, Form: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }, Application: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, Terminate: []() -> void |  }, Button: ctor<0>[null]() -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, IFormBackEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }, IActionEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }, AppRegistry: ctor<0>[null]() -> { _____cpp_receiver: void |  }, Header: ctor<0>[null]() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, Label: ctor<0>[null]() -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, Frame: ctor<0>[null]() -> { _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }, casts: { Button_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, Label_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  } |  } |  }
TizenLib --> { Control: ctor<0>[null]() -> { _____cpp_receiver: void |  }, String: ctor<0>[null](string) -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }, Form: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }, Application: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, Terminate: []() -> void |  }, Button: ctor<0>[null]() -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, IFormBackEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }, IActionEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }, AppRegistry: ctor<0>[null]() -> { _____cpp_receiver: void |  }, Header: ctor<0>[null]() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, Label: ctor<0>[null]() -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, Frame: ctor<0>[null]() -> { _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }, casts: { Button_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, Label_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  } |  } |  }
TizenLib --> { Control: ctor<0>[null]() -> { _____cpp_receiver: void |  }, String: ctor<0>[null](string) -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }, Form: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }, Application: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, Terminate: []() -> void |  }, Button: ctor<0>[null]() -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, IFormBackEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }, IActionEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }, AppRegistry: ctor<0>[null]() -> { _____cpp_receiver: void |  }, Header: ctor<0>[null]() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, Label: ctor<0>[null]() -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, Frame: ctor<0>[null]() -> { _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }, casts: { Button_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, Label_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  } |  } |  }
TizenLib --> { Control: ctor<0>[null]() -> { _____cpp_receiver: void |  }, String: ctor<0>[null](string) -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }, Form: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }, Application: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, Terminate: []() -> void |  }, Button: ctor<0>[null]() -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, IFormBackEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }, IActionEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }, AppRegistry: ctor<0>[null]() -> { _____cpp_receiver: void |  }, Header: ctor<0>[null]() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, Label: ctor<0>[null]() -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, Frame: ctor<0>[null]() -> { _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }, casts: { Button_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, Label_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  } |  } |  }
TizenLib --> { Control: ctor<0>[null]() -> { _____cpp_receiver: void |  }, String: ctor<0>[null](string) -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }, Form: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }, Application: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, Terminate: []() -> void |  }, Button: ctor<0>[null]() -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, IFormBackEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }, IActionEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }, AppRegistry: ctor<0>[null]() -> { _____cpp_receiver: void |  }, Header: ctor<0>[null]() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, Label: ctor<0>[null]() -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, Frame: ctor<0>[null]() -> { _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }, casts: { Button_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, Label_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  } |  } |  }
TizenLib --> { Control: ctor<0>[null]() -> { _____cpp_receiver: void |  }, String: ctor<0>[null](string) -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }, Form: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }, Application: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, Terminate: []() -> void |  }, Button: ctor<0>[null]() -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, IFormBackEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }, IActionEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }, AppRegistry: ctor<0>[null]() -> { _____cpp_receiver: void |  }, Header: ctor<0>[null]() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, Label: ctor<0>[null]() -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, Frame: ctor<0>[null]() -> { _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }, casts: { Button_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, Label_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  } |  } |  }
TizenLib --> { Control: ctor<0>[null]() -> { _____cpp_receiver: void |  }, String: ctor<0>[null](string) -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }, Form: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }, Application: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, Terminate: []() -> void |  }, Button: ctor<0>[null]() -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, IFormBackEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }, IActionEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }, AppRegistry: ctor<0>[null]() -> { _____cpp_receiver: void |  }, Header: ctor<0>[null]() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, Label: ctor<0>[null]() -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, Frame: ctor<0>[null]() -> { _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }, casts: { Button_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, Label_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  } |  } |  }
TizenLib --> { Control: ctor<0>[null]() -> { _____cpp_receiver: void |  }, String: ctor<0>[null](string) -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }, Form: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }, Application: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, Terminate: []() -> void |  }, Button: ctor<0>[null]() -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, IFormBackEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }, IActionEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }, AppRegistry: ctor<0>[null]() -> { _____cpp_receiver: void |  }, Header: ctor<0>[null]() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, Label: ctor<0>[null]() -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, Frame: ctor<0>[null]() -> { _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }, casts: { Button_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, Label_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  } |  } |  }
TizenLib --> { Control: ctor<0>[null]() -> { _____cpp_receiver: void |  }, String: ctor<0>[null](string) -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }, Form: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }, Application: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, Terminate: []() -> void |  }, Button: ctor<0>[null]() -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, IFormBackEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }, IActionEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }, AppRegistry: ctor<0>[null]() -> { _____cpp_receiver: void |  }, Header: ctor<0>[null]() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, Label: ctor<0>[null]() -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, Frame: ctor<0>[null]() -> { _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }, casts: { Button_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, Label_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  } |  } |  }
TizenLib --> { Control: ctor<0>[null]() -> { _____cpp_receiver: void |  }, String: ctor<0>[null](string) -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }, Form: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }, Application: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, Terminate: []() -> void |  }, Button: ctor<0>[null]() -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, IFormBackEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }, IActionEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }, AppRegistry: ctor<0>[null]() -> { _____cpp_receiver: void |  }, Header: ctor<0>[null]() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, Label: ctor<0>[null]() -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, Frame: ctor<0>[null]() -> { _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }, casts: { Button_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, Label_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  } |  } |  }
TizenLib --> { Control: ctor<0>[null]() -> { _____cpp_receiver: void |  }, String: ctor<0>[null](string) -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }, Form: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }, Application: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, Terminate: []() -> void |  }, Button: ctor<0>[null]() -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, IFormBackEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }, IActionEventListener: ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }, AppRegistry: ctor<0>[null]() -> { _____cpp_receiver: void |  }, Header: ctor<0>[null]() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, Label: ctor<0>[null]() -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, Frame: ctor<0>[null]() -> { _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }, casts: { Button_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, Label_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  } |  } |  }
TizenLib.Application --> ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, Terminate: []() -> void |  }
TizenLib.Form --> ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }
TizenLib.Frame --> ctor<0>[null]() -> { _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }
TizenLib.IActionEventListener --> ctor<0>[null]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }
TizenLib.String --> ctor<0>[null](string) -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }
TizenLib.String --> ctor<0>[null](string) -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }
TizenLib.String --> ctor<0>[null](string) -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }
TizenLib.String --> ctor<0>[null](string) -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }
TizenLib.String --> ctor<0>[null](string) -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }
TizenLib.String --> ctor<0>[null](string) -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }
TizenLib.casts --> { Button_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, Label_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  } |  }
TizenLib.casts --> { Button_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, Label_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  } |  }
TizenLib.casts --> { Button_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }, Label_of_Control: ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  } |  }
TizenLib.casts.Button_of_Control --> ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }
TizenLib.casts.Button_of_Control --> ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }
TizenLib.casts.Button_of_Control(this.GetControl(button_name)) --> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }
TizenLib.casts.Button_of_Control(this.GetControl(button_name)) --> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }
TizenLib.casts.Label_of_Control --> ({ _____cpp_receiver: void |  }) -> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }
TizenLib.casts.Label_of_Control(this.GetControl(id)) --> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }
World --> {  | board: Array<Array<string>>, bounder: integer, boardview: string, messageview: string, result: string, isEnd: boolean, endMessage: string, isUserTurn: boolean, isDrawing: boolean, isLock: boolean, isInit: boolean, isConfigure: boolean, isResult: boolean, level: integer, hasHelp: boolean, hasInit: boolean, playerNum: integer, currentColor: string, step: integer, point: Array<___>, directs: Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, possible: Array<Array<integer>>, pendingDrawMessage: integer, status: {  | bc: integer, wc: integer, result: string }, init: [](integer) -> void, endConfigure: []() -> void, startOver: []() -> void, actionAtPoint: [](Array<integer>,string) -> void, setPoint: [](Array<integer>,string) -> void, drawPoint: (Array<integer>,string) -> void, drawPath: [](Array<Array<integer>>,string) -> void, drawMessage: []() -> void, closeResult: []() -> void, displayBoard: []() -> void, click: [](integer,integer) -> void, computerTurn: []() -> void, isContain: (Array<integer>,Array<Array<integer>>) -> boolean, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, getClone: [](Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, bestPlace: [](Array<Array<integer>>) -> Array<integer> }
World --> {  | board: Array<Array<string>>, bounder: integer, boardview: string, messageview: string, result: string, isEnd: boolean, endMessage: string, isUserTurn: boolean, isDrawing: boolean, isLock: boolean, isInit: boolean, isConfigure: boolean, isResult: boolean, level: integer, hasHelp: boolean, hasInit: boolean, playerNum: integer, currentColor: string, step: integer, point: Array<___>, directs: Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, possible: Array<Array<integer>>, pendingDrawMessage: integer, status: {  | bc: integer, wc: integer, result: string }, init: [](integer) -> void, endConfigure: []() -> void, startOver: []() -> void, actionAtPoint: [](Array<integer>,string) -> void, setPoint: [](Array<integer>,string) -> void, drawPoint: (Array<integer>,string) -> void, drawPath: [](Array<Array<integer>>,string) -> void, drawMessage: []() -> void, closeResult: []() -> void, displayBoard: []() -> void, click: [](integer,integer) -> void, computerTurn: []() -> void, isContain: (Array<integer>,Array<Array<integer>>) -> boolean, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, getClone: [](Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, bestPlace: [](Array<Array<integer>>) -> Array<integer> }
World --> {  | board: Array<Array<string>>, bounder: integer, boardview: string, messageview: string, result: string, isEnd: boolean, endMessage: string, isUserTurn: boolean, isDrawing: boolean, isLock: boolean, isInit: boolean, isConfigure: boolean, isResult: boolean, level: integer, hasHelp: boolean, hasInit: boolean, playerNum: integer, currentColor: string, step: integer, point: Array<___>, directs: Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, possible: Array<Array<integer>>, pendingDrawMessage: integer, status: {  | bc: integer, wc: integer, result: string }, init: [](integer) -> void, endConfigure: []() -> void, startOver: []() -> void, actionAtPoint: [](Array<integer>,string) -> void, setPoint: [](Array<integer>,string) -> void, drawPoint: (Array<integer>,string) -> void, drawPath: [](Array<Array<integer>>,string) -> void, drawMessage: []() -> void, closeResult: []() -> void, displayBoard: []() -> void, click: [](integer,integer) -> void, computerTurn: []() -> void, isContain: (Array<integer>,Array<Array<integer>>) -> boolean, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, getClone: [](Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, bestPlace: [](Array<Array<integer>>) -> Array<integer> }
World --> {  | board: Array<Array<string>>, bounder: integer, boardview: string, messageview: string, result: string, isEnd: boolean, endMessage: string, isUserTurn: boolean, isDrawing: boolean, isLock: boolean, isInit: boolean, isConfigure: boolean, isResult: boolean, level: integer, hasHelp: boolean, hasInit: boolean, playerNum: integer, currentColor: string, step: integer, point: Array<___>, directs: Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, possible: Array<Array<integer>>, pendingDrawMessage: integer, status: {  | bc: integer, wc: integer, result: string }, init: [](integer) -> void, endConfigure: []() -> void, startOver: []() -> void, actionAtPoint: [](Array<integer>,string) -> void, setPoint: [](Array<integer>,string) -> void, drawPoint: (Array<integer>,string) -> void, drawPath: [](Array<Array<integer>>,string) -> void, drawMessage: []() -> void, closeResult: []() -> void, displayBoard: []() -> void, click: [](integer,integer) -> void, computerTurn: []() -> void, isContain: (Array<integer>,Array<Array<integer>>) -> boolean, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, getClone: [](Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, bestPlace: [](Array<Array<integer>>) -> Array<integer> }
World --> {  | board: Array<Array<string>>, bounder: integer, boardview: string, messageview: string, result: string, isEnd: boolean, endMessage: string, isUserTurn: boolean, isDrawing: boolean, isLock: boolean, isInit: boolean, isConfigure: boolean, isResult: boolean, level: integer, hasHelp: boolean, hasInit: boolean, playerNum: integer, currentColor: string, step: integer, point: Array<___>, directs: Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, possible: Array<Array<integer>>, pendingDrawMessage: integer, status: {  | bc: integer, wc: integer, result: string }, init: [](integer) -> void, endConfigure: []() -> void, startOver: []() -> void, actionAtPoint: [](Array<integer>,string) -> void, setPoint: [](Array<integer>,string) -> void, drawPoint: (Array<integer>,string) -> void, drawPath: [](Array<Array<integer>>,string) -> void, drawMessage: []() -> void, closeResult: []() -> void, displayBoard: []() -> void, click: [](integer,integer) -> void, computerTurn: []() -> void, isContain: (Array<integer>,Array<Array<integer>>) -> boolean, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, getClone: [](Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, bestPlace: [](Array<Array<integer>>) -> Array<integer> }
World --> {  | board: Array<Array<string>>, bounder: integer, boardview: string, messageview: string, result: string, isEnd: boolean, endMessage: string, isUserTurn: boolean, isDrawing: boolean, isLock: boolean, isInit: boolean, isConfigure: boolean, isResult: boolean, level: integer, hasHelp: boolean, hasInit: boolean, playerNum: integer, currentColor: string, step: integer, point: Array<___>, directs: Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, possible: Array<Array<integer>>, pendingDrawMessage: integer, status: {  | bc: integer, wc: integer, result: string }, init: [](integer) -> void, endConfigure: []() -> void, startOver: []() -> void, actionAtPoint: [](Array<integer>,string) -> void, setPoint: [](Array<integer>,string) -> void, drawPoint: (Array<integer>,string) -> void, drawPath: [](Array<Array<integer>>,string) -> void, drawMessage: []() -> void, closeResult: []() -> void, displayBoard: []() -> void, click: [](integer,integer) -> void, computerTurn: []() -> void, isContain: (Array<integer>,Array<Array<integer>>) -> boolean, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, getClone: [](Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, bestPlace: [](Array<Array<integer>>) -> Array<integer> }
World --> {  | board: Array<Array<string>>, bounder: integer, boardview: string, messageview: string, result: string, isEnd: boolean, endMessage: string, isUserTurn: boolean, isDrawing: boolean, isLock: boolean, isInit: boolean, isConfigure: boolean, isResult: boolean, level: integer, hasHelp: boolean, hasInit: boolean, playerNum: integer, currentColor: string, step: integer, point: Array<___>, directs: Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, possible: Array<Array<integer>>, pendingDrawMessage: integer, status: {  | bc: integer, wc: integer, result: string }, init: [](integer) -> void, endConfigure: []() -> void, startOver: []() -> void, actionAtPoint: [](Array<integer>,string) -> void, setPoint: [](Array<integer>,string) -> void, drawPoint: (Array<integer>,string) -> void, drawPath: [](Array<Array<integer>>,string) -> void, drawMessage: []() -> void, closeResult: []() -> void, displayBoard: []() -> void, click: [](integer,integer) -> void, computerTurn: []() -> void, isContain: (Array<integer>,Array<Array<integer>>) -> boolean, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, getClone: [](Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, bestPlace: [](Array<Array<integer>>) -> Array<integer> }
World --> {  | board: Array<Array<string>>, bounder: integer, boardview: string, messageview: string, result: string, isEnd: boolean, endMessage: string, isUserTurn: boolean, isDrawing: boolean, isLock: boolean, isInit: boolean, isConfigure: boolean, isResult: boolean, level: integer, hasHelp: boolean, hasInit: boolean, playerNum: integer, currentColor: string, step: integer, point: Array<___>, directs: Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, possible: Array<Array<integer>>, pendingDrawMessage: integer, status: {  | bc: integer, wc: integer, result: string }, init: [](integer) -> void, endConfigure: []() -> void, startOver: []() -> void, actionAtPoint: [](Array<integer>,string) -> void, setPoint: [](Array<integer>,string) -> void, drawPoint: (Array<integer>,string) -> void, drawPath: [](Array<Array<integer>>,string) -> void, drawMessage: []() -> void, closeResult: []() -> void, displayBoard: []() -> void, click: [](integer,integer) -> void, computerTurn: []() -> void, isContain: (Array<integer>,Array<Array<integer>>) -> boolean, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, getClone: [](Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, bestPlace: [](Array<Array<integer>>) -> Array<integer> }
World --> {  | board: Array<Array<string>>, bounder: integer, boardview: string, messageview: string, result: string, isEnd: boolean, endMessage: string, isUserTurn: boolean, isDrawing: boolean, isLock: boolean, isInit: boolean, isConfigure: boolean, isResult: boolean, level: integer, hasHelp: boolean, hasInit: boolean, playerNum: integer, currentColor: string, step: integer, point: Array<___>, directs: Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, possible: Array<Array<integer>>, pendingDrawMessage: integer, status: {  | bc: integer, wc: integer, result: string }, init: [](integer) -> void, endConfigure: []() -> void, startOver: []() -> void, actionAtPoint: [](Array<integer>,string) -> void, setPoint: [](Array<integer>,string) -> void, drawPoint: (Array<integer>,string) -> void, drawPath: [](Array<Array<integer>>,string) -> void, drawMessage: []() -> void, closeResult: []() -> void, displayBoard: []() -> void, click: [](integer,integer) -> void, computerTurn: []() -> void, isContain: (Array<integer>,Array<Array<integer>>) -> boolean, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, getClone: [](Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, bestPlace: [](Array<Array<integer>>) -> Array<integer> }
World --> {  | board: Array<Array<string>>, bounder: integer, boardview: string, messageview: string, result: string, isEnd: boolean, endMessage: string, isUserTurn: boolean, isDrawing: boolean, isLock: boolean, isInit: boolean, isConfigure: boolean, isResult: boolean, level: integer, hasHelp: boolean, hasInit: boolean, playerNum: integer, currentColor: string, step: integer, point: Array<___>, directs: Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, possible: Array<Array<integer>>, pendingDrawMessage: integer, status: {  | bc: integer, wc: integer, result: string }, init: [](integer) -> void, endConfigure: []() -> void, startOver: []() -> void, actionAtPoint: [](Array<integer>,string) -> void, setPoint: [](Array<integer>,string) -> void, drawPoint: (Array<integer>,string) -> void, drawPath: [](Array<Array<integer>>,string) -> void, drawMessage: []() -> void, closeResult: []() -> void, displayBoard: []() -> void, click: [](integer,integer) -> void, computerTurn: []() -> void, isContain: (Array<integer>,Array<Array<integer>>) -> boolean, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, getClone: [](Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, bestPlace: [](Array<Array<integer>>) -> Array<integer> }
World --> {  | board: Array<Array<string>>, bounder: integer, boardview: string, messageview: string, result: string, isEnd: boolean, endMessage: string, isUserTurn: boolean, isDrawing: boolean, isLock: boolean, isInit: boolean, isConfigure: boolean, isResult: boolean, level: integer, hasHelp: boolean, hasInit: boolean, playerNum: integer, currentColor: string, step: integer, point: Array<___>, directs: Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, possible: Array<Array<integer>>, pendingDrawMessage: integer, status: {  | bc: integer, wc: integer, result: string }, init: [](integer) -> void, endConfigure: []() -> void, startOver: []() -> void, actionAtPoint: [](Array<integer>,string) -> void, setPoint: [](Array<integer>,string) -> void, drawPoint: (Array<integer>,string) -> void, drawPath: [](Array<Array<integer>>,string) -> void, drawMessage: []() -> void, closeResult: []() -> void, displayBoard: []() -> void, click: [](integer,integer) -> void, computerTurn: []() -> void, isContain: (Array<integer>,Array<Array<integer>>) -> boolean, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, getClone: [](Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, bestPlace: [](Array<Array<integer>>) -> Array<integer> }
World --> {  | board: Array<Array<string>>, bounder: integer, boardview: string, messageview: string, result: string, isEnd: boolean, endMessage: string, isUserTurn: boolean, isDrawing: boolean, isLock: boolean, isInit: boolean, isConfigure: boolean, isResult: boolean, level: integer, hasHelp: boolean, hasInit: boolean, playerNum: integer, currentColor: string, step: integer, point: Array<___>, directs: Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, possible: Array<Array<integer>>, pendingDrawMessage: integer, status: {  | bc: integer, wc: integer, result: string }, init: [](integer) -> void, endConfigure: []() -> void, startOver: []() -> void, actionAtPoint: [](Array<integer>,string) -> void, setPoint: [](Array<integer>,string) -> void, drawPoint: (Array<integer>,string) -> void, drawPath: [](Array<Array<integer>>,string) -> void, drawMessage: []() -> void, closeResult: []() -> void, displayBoard: []() -> void, click: [](integer,integer) -> void, computerTurn: []() -> void, isContain: (Array<integer>,Array<Array<integer>>) -> boolean, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, getClone: [](Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, bestPlace: [](Array<Array<integer>>) -> Array<integer> }
World --> {  | board: Array<Array<string>>, bounder: integer, boardview: string, messageview: string, result: string, isEnd: boolean, endMessage: string, isUserTurn: boolean, isDrawing: boolean, isLock: boolean, isInit: boolean, isConfigure: boolean, isResult: boolean, level: integer, hasHelp: boolean, hasInit: boolean, playerNum: integer, currentColor: string, step: integer, point: Array<___>, directs: Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, possible: Array<Array<integer>>, pendingDrawMessage: integer, status: {  | bc: integer, wc: integer, result: string }, init: [](integer) -> void, endConfigure: []() -> void, startOver: []() -> void, actionAtPoint: [](Array<integer>,string) -> void, setPoint: [](Array<integer>,string) -> void, drawPoint: (Array<integer>,string) -> void, drawPath: [](Array<Array<integer>>,string) -> void, drawMessage: []() -> void, closeResult: []() -> void, displayBoard: []() -> void, click: [](integer,integer) -> void, computerTurn: []() -> void, isContain: (Array<integer>,Array<Array<integer>>) -> boolean, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, getClone: [](Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, bestPlace: [](Array<Array<integer>>) -> Array<integer> }
World --> {  | board: Array<Array<string>>, bounder: integer, boardview: string, messageview: string, result: string, isEnd: boolean, endMessage: string, isUserTurn: boolean, isDrawing: boolean, isLock: boolean, isInit: boolean, isConfigure: boolean, isResult: boolean, level: integer, hasHelp: boolean, hasInit: boolean, playerNum: integer, currentColor: string, step: integer, point: Array<___>, directs: Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, possible: Array<Array<integer>>, pendingDrawMessage: integer, status: {  | bc: integer, wc: integer, result: string }, init: [](integer) -> void, endConfigure: []() -> void, startOver: []() -> void, actionAtPoint: [](Array<integer>,string) -> void, setPoint: [](Array<integer>,string) -> void, drawPoint: (Array<integer>,string) -> void, drawPath: [](Array<Array<integer>>,string) -> void, drawMessage: []() -> void, closeResult: []() -> void, displayBoard: []() -> void, click: [](integer,integer) -> void, computerTurn: []() -> void, isContain: (Array<integer>,Array<Array<integer>>) -> boolean, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, getClone: [](Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, bestPlace: [](Array<Array<integer>>) -> Array<integer> }
World --> {  | board: Array<Array<string>>, bounder: integer, boardview: string, messageview: string, result: string, isEnd: boolean, endMessage: string, isUserTurn: boolean, isDrawing: boolean, isLock: boolean, isInit: boolean, isConfigure: boolean, isResult: boolean, level: integer, hasHelp: boolean, hasInit: boolean, playerNum: integer, currentColor: string, step: integer, point: Array<___>, directs: Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, possible: Array<Array<integer>>, pendingDrawMessage: integer, status: {  | bc: integer, wc: integer, result: string }, init: [](integer) -> void, endConfigure: []() -> void, startOver: []() -> void, actionAtPoint: [](Array<integer>,string) -> void, setPoint: [](Array<integer>,string) -> void, drawPoint: (Array<integer>,string) -> void, drawPath: [](Array<Array<integer>>,string) -> void, drawMessage: []() -> void, closeResult: []() -> void, displayBoard: []() -> void, click: [](integer,integer) -> void, computerTurn: []() -> void, isContain: (Array<integer>,Array<Array<integer>>) -> boolean, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, getClone: [](Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, bestPlace: [](Array<Array<integer>>) -> Array<integer> }
World --> {  | board: Array<Array<string>>, bounder: integer, boardview: string, messageview: string, result: string, isEnd: boolean, endMessage: string, isUserTurn: boolean, isDrawing: boolean, isLock: boolean, isInit: boolean, isConfigure: boolean, isResult: boolean, level: integer, hasHelp: boolean, hasInit: boolean, playerNum: integer, currentColor: string, step: integer, point: Array<___>, directs: Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, possible: Array<Array<integer>>, pendingDrawMessage: integer, status: {  | bc: integer, wc: integer, result: string }, init: [](integer) -> void, endConfigure: []() -> void, startOver: []() -> void, actionAtPoint: [](Array<integer>,string) -> void, setPoint: [](Array<integer>,string) -> void, drawPoint: (Array<integer>,string) -> void, drawPath: [](Array<Array<integer>>,string) -> void, drawMessage: []() -> void, closeResult: []() -> void, displayBoard: []() -> void, click: [](integer,integer) -> void, computerTurn: []() -> void, isContain: (Array<integer>,Array<Array<integer>>) -> boolean, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, getClone: [](Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, bestPlace: [](Array<Array<integer>>) -> Array<integer> }
World --> {  | board: Array<Array<string>>, bounder: integer, boardview: string, messageview: string, result: string, isEnd: boolean, endMessage: string, isUserTurn: boolean, isDrawing: boolean, isLock: boolean, isInit: boolean, isConfigure: boolean, isResult: boolean, level: integer, hasHelp: boolean, hasInit: boolean, playerNum: integer, currentColor: string, step: integer, point: Array<___>, directs: Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, possible: Array<Array<integer>>, pendingDrawMessage: integer, status: {  | bc: integer, wc: integer, result: string }, init: [](integer) -> void, endConfigure: []() -> void, startOver: []() -> void, actionAtPoint: [](Array<integer>,string) -> void, setPoint: [](Array<integer>,string) -> void, drawPoint: (Array<integer>,string) -> void, drawPath: [](Array<Array<integer>>,string) -> void, drawMessage: []() -> void, closeResult: []() -> void, displayBoard: []() -> void, click: [](integer,integer) -> void, computerTurn: []() -> void, isContain: (Array<integer>,Array<Array<integer>>) -> boolean, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, getClone: [](Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, bestPlace: [](Array<Array<integer>>) -> Array<integer> }
World --> {  | board: Array<Array<string>>, bounder: integer, boardview: string, messageview: string, result: string, isEnd: boolean, endMessage: string, isUserTurn: boolean, isDrawing: boolean, isLock: boolean, isInit: boolean, isConfigure: boolean, isResult: boolean, level: integer, hasHelp: boolean, hasInit: boolean, playerNum: integer, currentColor: string, step: integer, point: Array<___>, directs: Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, possible: Array<Array<integer>>, pendingDrawMessage: integer, status: {  | bc: integer, wc: integer, result: string }, init: [](integer) -> void, endConfigure: []() -> void, startOver: []() -> void, actionAtPoint: [](Array<integer>,string) -> void, setPoint: [](Array<integer>,string) -> void, drawPoint: (Array<integer>,string) -> void, drawPath: [](Array<Array<integer>>,string) -> void, drawMessage: []() -> void, closeResult: []() -> void, displayBoard: []() -> void, click: [](integer,integer) -> void, computerTurn: []() -> void, isContain: (Array<integer>,Array<Array<integer>>) -> boolean, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, getClone: [](Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, bestPlace: [](Array<Array<integer>>) -> Array<integer> }
World.board --> Array<Array<string>>
World.board --> Array<Array<string>>
World.board[i] --> Array<string>
World.board[i] --> Array<string>
World.board[i][j] --> string
World.board[i][j] --> string
World.board[i][j] === 'black' --> boolean
World.board[i][j] === 'white' --> boolean
World.bounder --> integer
World.bounder --> integer
World.click --> [](integer,integer) -> void
World.click --> [](integer,integer) -> void
World.click --> [](integer,integer) -> void
World.click --> [](integer,integer) -> void
World.click(2, 4) --> void
World.click(4, 2) --> void
World.click(5, 3) --> void
World.click(i, j) --> void
World.displayBoard --> []() -> void
World.displayBoard --> []() -> void
World.displayBoard --> []() -> void
World.displayBoard --> []() -> void
World.displayBoard() --> void
World.displayBoard() --> void
World.displayBoard() --> void
World.displayBoard() --> void
World.init --> [](integer) -> void
World.init --> [](integer) -> void
World.init(1) --> void
World.init(1) --> void
World.status --> {  | bc: integer, wc: integer, result: string }
World.status --> {  | bc: integer, wc: integer, result: string }
World.status --> {  | bc: integer, wc: integer, result: string }
World.status.bc --> integer
World.status.result --> string
World.status.wc --> integer
[-1, -1] --> Array<integer>
[-1, 0] --> Array<integer>
[-1, 1] --> Array<integer>
[-50, -30, 5, 1, 1, 5, -30, -50] --> Array<integer>
[-50, -30, 5, 1, 1, 5, -30, -50] --> Array<integer>
[0, -1] --> Array<integer>
[0, 0] --> Array<integer>
[0, 1] --> Array<integer>
[1, -1] --> Array<integer>
[1, 0] --> Array<integer>
[1, 1] --> Array<integer>
[100, -50, 40, 30, 30, 40, -50, 100] --> Array<integer>
[100, -50, 40, 30, 30, 40, -50, 100] --> Array<integer>
[30, 1, 10, 0, 0, 10, 1, 30] --> Array<integer>
[30, 1, 10, 0, 0, 10, 1, 30] --> Array<integer>
[40, 5, 20, 10, 10, 20, 5, 40] --> Array<integer>
[40, 5, 20, 10, 10, 20, 5, 40] --> Array<integer>
[IDC_BUTTON_00, IDC_BUTTON_01, IDC_BUTTON_02, IDC_BUTTON_03, IDC_BUTTON_04, IDC_BUTTON_05, IDC_BUTTON_06, IDC_BUTTON_07, IDC_BUTTON_10, IDC_BUTTON_11, IDC_BUTTON_12, IDC_BUTTON_13, IDC_BUTTON_14, IDC_BUTTON_15, IDC_BUTTON_16, IDC_BUTTON_17, IDC_BUTTON_20, IDC_BUTTON_21, IDC_BUTTON_22, IDC_BUTTON_23, IDC_BUTTON_24, IDC_BUTTON_25, IDC_BUTTON_26, IDC_BUTTON_27, IDC_BUTTON_30, IDC_BUTTON_31, IDC_BUTTON_32, IDC_BUTTON_33, IDC_BUTTON_34, IDC_BUTTON_35, IDC_BUTTON_36, IDC_BUTTON_37, IDC_BUTTON_40, IDC_BUTTON_41, IDC_BUTTON_42, IDC_BUTTON_43, IDC_BUTTON_44, IDC_BUTTON_45, IDC_BUTTON_46, IDC_BUTTON_47, IDC_BUTTON_50, IDC_BUTTON_51, IDC_BUTTON_52, IDC_BUTTON_53, IDC_BUTTON_54, IDC_BUTTON_55, IDC_BUTTON_56, IDC_BUTTON_57, IDC_BUTTON_60, IDC_BUTTON_61, IDC_BUTTON_62, IDC_BUTTON_63, IDC_BUTTON_64, IDC_BUTTON_65, IDC_BUTTON_66, IDC_BUTTON_67, IDC_BUTTON_70, IDC_BUTTON_71, IDC_BUTTON_72, IDC_BUTTON_73, IDC_BUTTON_74, IDC_BUTTON_75, IDC_BUTTON_76, IDC_BUTTON_77] --> Array<string>
[[1, 0], [1, 1], [1, -1], [0, 1], [0, -1], [-1, 0], [-1, 1], [-1, -1]] --> Array<Array<integer>>
[[100, -50, 40, 30, 30, 40, -50, 100], [-50, -30, 5, 1, 1, 5, -30, -50], [40, 5, 20, 10, 10, 20, 5, 40], [30, 1, 10, 0, 0, 10, 1, 30], [30, 1, 10, 0, 0, 10, 1, 30], [40, 5, 20, 10, 10, 20, 5, 40], [-50, -30, 5, 1, 1, 5, -30, -50], [100, -50, 40, 30, 30, 40, -50, 100]] --> Array<Array<integer>>
[[], [], [], [], [], [], [], []] --> Array<Array<string>>
[[], [], [], [], [], [], [], []] --> Array<Array<string>>
[] --> Array<Array<integer>>
[] --> Array<Array<integer>>
[] --> Array<Array<integer>>
[] --> Array<Array<integer>>
[] --> Array<Array<integer>>
[] --> Array<Array<integer>>
[] --> Array<Array<integer>>
[] --> Array<Array<integer>>
[] --> Array<Array<integer>>
[] --> Array<Array<integer>>
[] --> Array<___>
[] --> Array<___>
[] --> Array<integer>
[] --> Array<string>
[] --> Array<string>
[] --> Array<string>
[] --> Array<string>
[] --> Array<string>
[] --> Array<string>
[] --> Array<string>
[] --> Array<string>
[] --> Array<string>
[] --> Array<string>
[] --> Array<string>
[] --> Array<string>
[] --> Array<string>
[] --> Array<string>
[] --> Array<string>
[] --> Array<string>
[i, j] --> Array<integer>
[i, j] --> Array<integer>
[i, j] --> Array<integer>
[i, j] --> Array<integer>
[ni, nj] --> Array<integer>
[ni, nj] --> Array<integer>
[ni, nj] --> Array<integer>
[ni, nj] --> Array<integer>
[path[n][0], path[n][1]] --> Array<integer>
__platform_return --> ({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, Terminate: []() -> void |  }) -> void
__platform_return(annex) --> void
_array --> Array<Array<integer>>
_array --> Array<Array<integer>>
_array || [] --> Array<Array<integer>>
_board --> Array<Array<string>>
_board --> Array<Array<string>>
_board --> Array<Array<string>>
_board --> Array<Array<string>>
_board --> Array<Array<string>>
_board --> Array<Array<string>>
_board --> Array<Array<string>>
_board --> Array<Array<string>>
_board --> Array<Array<string>>
_board --> Array<Array<string>>
_board --> Array<Array<string>>
_board --> Array<Array<string>>
_board --> Array<Array<string>>
_board --> Array<Array<string>>
_board --> Array<Array<string>>
_board --> Array<Array<string>>
_board --> Array<Array<string>>
_board --> Array<Array<string>>
_board ? _board : this.board --> Array<Array<string>>
_board ? _board : this.board --> Array<Array<string>>
_board ? _board : this.board --> Array<Array<string>>
_board ? _board : this.board --> Array<Array<string>>
_board ? _board : this.board --> Array<Array<string>>
_board ? _board : this.board --> Array<Array<string>>
_color --> string
_color --> string
_color || 'white' --> string
_heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
_heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
_heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
_heap ? _heap : this.heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
_init --> [{ drawMessage: []() -> void, endConfigure: []() -> void, board: Array<Array<string>>, bounder: integer | isInit: boolean, point: Array<___>, level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, isLock: boolean, isResult: boolean, currentColor: string, isConfigure: boolean, isUserTurn: boolean, playerNum: integer }](integer) -> void
_level --> integer
_level --> integer
_level --> integer
_level ? _level : this.level --> integer
act --> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }
act --> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }
act --> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }
act --> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }
act.path --> Array<Array<integer>>
act.path --> Array<Array<integer>>
action --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
action --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
action --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
action.color --> string
action.path --> Array<Array<integer>>
actionId - (i * 8) --> integer
actionId --> integer
actionId --> integer
actionId --> integer
actionId / 8 --> float
annex --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, Terminate: []() -> void | OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean }
annex --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, Terminate: []() -> void | OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean }
appRegistry --> { _____cpp_receiver: void |  }
appRegistry --> { _____cpp_receiver: void |  }
bc --> integer
bc --> integer
bc --> integer
bc --> integer
bc --> integer
bc --> integer
bc = count['black'] --> integer
bc = this.heap.colorCount['black'] --> integer
bc == wc --> boolean
bc > wc --> boolean
best --> Array<Array<integer>>
best --> Array<Array<integer>>
best --> Array<Array<integer>>
best --> Array<Array<integer>>
best.length --> integer
best.length > 0 --> boolean
best.push --> [](Array<integer>) -> integer
best.push(possible[i]) --> integer
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board --> Array<Array<string>>
board = this.doRevert(heap, board) --> Array<Array<string>>
board = this.doRevert(heap, board) --> Array<Array<string>>
board = this.getClone(board) --> Array<Array<string>>
board[i] --> Array<string>
board[i] --> Array<string>
board[i] --> Array<string>
board[i][j] --> string
board[i][j] --> string
board[i][j] --> string
board[i][j] === color --> boolean
board[i][j] === revColor --> boolean
board[i][j] === revColor --> boolean
board[ni] --> Array<string>
board[ni] --> Array<string>
board[ni] --> Array<string>
board[ni] --> Array<string>
board[ni] --> Array<string>
board[ni][nj] --> string
board[ni][nj] --> string
board[ni][nj] --> string
board[ni][nj] --> string
board[ni][nj] --> string
board[ni][nj] === 'board' --> boolean
board[ni][nj] === color --> boolean
board[ni][nj] === color --> boolean
board[ni][nj] === revColor --> boolean
board[ni][nj] === revColor --> boolean
board[path[p][0]] --> Array<string>
board[path[p][0]][path[p][1]] --> string
board[path[p][0]][path[p][1]] = color --> string
board[place[0]] --> Array<string>
board[place[0]][place[1]] --> string
board[place[0]][place[1]] = color --> string
bpossible --> Array<Array<integer>>
bpossible --> Array<Array<integer>>
bpossible --> Array<Array<integer>>
bpossible --> Array<Array<integer>>
bpossible --> Array<Array<integer>>
bpossible --> Array<Array<integer>>
bpossible --> Array<Array<integer>>
bpossible = this.heap.cpossible --> Array<Array<integer>>
bpossible = this.heap.upossible --> Array<Array<integer>>
bpossible = this.possiblePlace('black', null) --> Array<Array<integer>>
bpossible.length --> integer
bpossible.length --> integer
bpossible.length == 0 && wpossible.length == 0 --> boolean
bpossible.length == 0 --> boolean
bpossible.length > 0 --> boolean
button --> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }
button --> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }
button --> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }
button --> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }
button --> { _____cpp_receiver: void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void, SetActionId: [](integer) -> void, AddActionEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void |  }
button.AddActionEventListener --> []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }) -> void
button.AddActionEventListener(this.ael) --> void
button.SetActionId --> [](integer) -> void
button.SetActionId(i) --> void
button.SetText --> []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void
button.SetText(x) --> void
button_name --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }
button_name --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }
button_name --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }
button_name --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }
c --> string
c --> string
c --> string
c --> string
c --> string
c --> string
c --> string
c --> string
c = "B" --> string
c = "B" --> string
c = "W" --> string
c = "W" --> string
cc --> integer
cc --> integer
cc --> integer
cc++ --> integer
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color --> string
color == 'white' --> boolean
color == 'white' --> boolean
color == 'white' --> boolean
color == 'white' --> boolean
color == 'white' --> boolean
console --> { log: [](string) -> void, assert: [](boolean) -> void, error: [](string) -> void, warn: [](string) -> void |  }
console --> { log: [](string) -> void, assert: [](boolean) -> void, error: [](string) -> void, warn: [](string) -> void |  }
console --> { log: [](string) -> void, assert: [](boolean) -> void, error: [](string) -> void, warn: [](string) -> void |  }
console --> { log: [](string) -> void, assert: [](boolean) -> void, error: [](string) -> void, warn: [](string) -> void |  }
console --> { log: [](string) -> void, assert: [](boolean) -> void, error: [](string) -> void, warn: [](string) -> void |  }
console --> { log: [](string) -> void, assert: [](boolean) -> void, error: [](string) -> void, warn: [](string) -> void |  }
console --> { log: [](string) -> void, assert: [](boolean) -> void, error: [](string) -> void, warn: [](string) -> void |  }
console --> { log: [](string) -> void, assert: [](boolean) -> void, error: [](string) -> void, warn: [](string) -> void |  }
console --> { log: [](string) -> void, assert: [](boolean) -> void, error: [](string) -> void, warn: [](string) -> void |  }
console --> { log: [](string) -> void, assert: [](boolean) -> void, error: [](string) -> void, warn: [](string) -> void |  }
console --> { log: [](string) -> void, assert: [](boolean) -> void, error: [](string) -> void, warn: [](string) -> void |  }
console --> { log: [](string) -> void, assert: [](boolean) -> void, error: [](string) -> void, warn: [](string) -> void |  }
console --> { log: [](string) -> void, assert: [](boolean) -> void, error: [](string) -> void, warn: [](string) -> void |  }
console --> { log: [](string) -> void, assert: [](boolean) -> void, error: [](string) -> void, warn: [](string) -> void |  }
console --> { log: [](string) -> void, assert: [](boolean) -> void, error: [](string) -> void, warn: [](string) -> void |  }
console.log --> [](string) -> void
console.log --> [](string) -> void
console.log --> [](string) -> void
console.log --> [](string) -> void
console.log --> [](string) -> void
console.log --> [](string) -> void
console.log --> [](string) -> void
console.log --> [](string) -> void
console.log --> [](string) -> void
console.log --> [](string) -> void
console.log --> [](string) -> void
console.log --> [](string) -> void
console.log --> [](string) -> void
console.log --> [](string) -> void
console.log --> [](string) -> void
console.log("") --> void
console.log("BC = " + this.status.bc + ", WC = " + this.status.wc + ", Result = " + this.status.result) --> void
console.log("Computer wins") --> void
console.log("DEBUG: actionAtPoint" + place[0] + place[1] + color) --> void
console.log("DEBUG: click " + i + j + " " + (this.isUserTurn ? "true" : "false")) --> void
console.log("DEBUG: computerTurn") --> void
console.log("DEBUG: displayBoard") --> void
console.log("DEBUG: drawMessage " + this.playerNum + this.currentColor + (this.isUserTurn ? "true" : "false")) --> void
console.log("DEBUG: drawMessage exiting " + this.playerNum + this.currentColor + (this.isUserTurn ? "true" : "false")) --> void
console.log("Draw") --> void
console.log("Player 1 wins") --> void
console.log("hello") --> void
console.log('Error: No Setting place for Computer') --> void
console.log('Error: No possible places?!!!') --> void
console.log(line) --> void
count --> Map<integer>
count --> Map<integer>
count --> Map<integer>
count --> Map<integer>
count['black'] --> integer
count['white'] --> integer
count[this.board[i][j]] += 1 --> integer
count[this.board[i][j]] --> integer
cp --> Array<Array<integer>>
cp --> Array<Array<integer>>
cp --> Array<Array<integer>>
cp --> Array<Array<integer>>
cp --> Array<Array<integer>>
cp --> Array<Array<integer>>
cp --> Array<Array<integer>>
cp --> Array<Array<integer>>
cp = heap.cpossible --> Array<Array<integer>>
cp = this.possiblePlace(color, board) --> Array<Array<integer>>
cp.length - up.length --> integer
cp.length --> integer
cp.length --> integer
cp.length --> integer
cp.length > 0 --> boolean
cp.length > 0 --> boolean
cv += this.getValue([i, j], board) --> integer
cv - uv --> integer
cv --> integer
cv --> integer
cv --> integer
di --> integer
di --> integer
di --> integer
displayText --> string
displayText --> string
dj --> integer
dj --> integer
dj --> integer
f --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
f --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
false --> boolean
false --> boolean
false --> boolean
false --> boolean
false --> boolean
false --> boolean
false --> boolean
false --> boolean
false --> boolean
false --> boolean
false --> boolean
false --> boolean
false --> boolean
false --> boolean
false --> boolean
false --> boolean
false --> boolean
false --> boolean
form --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
form --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
form --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
form --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
form.init --> []() -> integer
form.init() --> integer
frame --> { _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }
frame --> { _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }
frame --> { _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }
frame --> { _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }
frame --> { _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }
frame.AddControl --> []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer
frame.AddControl(form) --> integer
frame.Construct --> []() -> integer
frame.Construct() --> integer
frame.SetCurrentForm --> []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer
frame.SetCurrentForm(form) --> integer
function Annex() {
  this.OnAppInitializing = function(appRegistry) {
  var frame = new TizenLib.Frame();
  frame.Construct();
  this.AddFrame(frame);
  var form = new AnnexForm();
  form.init();
  frame.AddControl(form);
  frame.SetCurrentForm(form);
  return true;
};
  this.OnAppTerminating = function(appRegistry, urgent) {
  var x = this;
  return true;
};
}
 --> ctor<0>[{ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, Terminate: []() -> void |  }]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, Terminate: []() -> void | OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean }
function AnnexActionEventListener(f) {
  this.annexForm = f;
  this.OnActionPerformed = function(source, actionId) {
  var i = Math.floor(actionId / 8);
  var j = actionId - (i * 8);
  World.click(i, j);
  this.annexForm.showBoard();
  var displayText = "B: " + World.status.bc + " W: " + World.status.wc + " Result: " + World.status.result;
  var s = new TizenLib.String(displayText);
  this.annexForm.labelPrint.SetText(s);
  this.annexForm.Draw();
};
}
 --> ctor<0>[{ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }]({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }) -> { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: <<recursive>>, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }
function AnnexForm() {
  this.labelPrint = null;
  this.ael = new AnnexActionEventListener(this);
  this.init = function() {
  var path = new TizenLib.String("IDL_FORM");
  var r = this.Construct(path);
  return r;
};
  this.OnInitializing = function() {
  var r = E_SUCCESS;
  r = this.AddAnnexPanel();
  return r;
};
  this.OnTerminating = function() {
  var x = this;
  return E_SUCCESS;
};
  this.OnDraw = function() {
  var x = this;
  return E_SUCCESS;
};
  this.button_names = [IDC_BUTTON_00, IDC_BUTTON_01, IDC_BUTTON_02, IDC_BUTTON_03, IDC_BUTTON_04, IDC_BUTTON_05, IDC_BUTTON_06, IDC_BUTTON_07, IDC_BUTTON_10, IDC_BUTTON_11, IDC_BUTTON_12, IDC_BUTTON_13, IDC_BUTTON_14, IDC_BUTTON_15, IDC_BUTTON_16, IDC_BUTTON_17, IDC_BUTTON_20, IDC_BUTTON_21, IDC_BUTTON_22, IDC_BUTTON_23, IDC_BUTTON_24, IDC_BUTTON_25, IDC_BUTTON_26, IDC_BUTTON_27, IDC_BUTTON_30, IDC_BUTTON_31, IDC_BUTTON_32, IDC_BUTTON_33, IDC_BUTTON_34, IDC_BUTTON_35, IDC_BUTTON_36, IDC_BUTTON_37, IDC_BUTTON_40, IDC_BUTTON_41, IDC_BUTTON_42, IDC_BUTTON_43, IDC_BUTTON_44, IDC_BUTTON_45, IDC_BUTTON_46, IDC_BUTTON_47, IDC_BUTTON_50, IDC_BUTTON_51, IDC_BUTTON_52, IDC_BUTTON_53, IDC_BUTTON_54, IDC_BUTTON_55, IDC_BUTTON_56, IDC_BUTTON_57, IDC_BUTTON_60, IDC_BUTTON_61, IDC_BUTTON_62, IDC_BUTTON_63, IDC_BUTTON_64, IDC_BUTTON_65, IDC_BUTTON_66, IDC_BUTTON_67, IDC_BUTTON_70, IDC_BUTTON_71, IDC_BUTTON_72, IDC_BUTTON_73, IDC_BUTTON_74, IDC_BUTTON_75, IDC_BUTTON_76, IDC_BUTTON_77];
  this.AddAnnexPanel = function() {
  var i = 0;
  while (i < BUTTON_COUNT) 
    {
      var button_name = new TizenLib.String(this.button_names[i]);
      var button = TizenLib.casts.Button_of_Control(this.GetControl(button_name));
      button.SetActionId(i);
      button.AddActionEventListener(this.ael);
      i++;
    }
  this.showBoard();
  var id = new TizenLib.String(IDC_LABEL1);
  this.labelPrint = TizenLib.casts.Label_of_Control(this.GetControl(id));
  this.labelPrint.SetTextHorizontalAlignment(ALIGNMENT_RIGHT);
  return E_SUCCESS;
};
  this.showBoard = function() {
  var i, j;
  for (i = 0; i < World.bounder; i++) 
    {
      for (j = 0; j < World.bounder; j++) 
        {
          var c = "-";
          if (World.board[i][j] === 'black') 
          c = "B"; else if (World.board[i][j] === 'white') 
          c = "W";
          var name = this.button_names[i * 8 + j];
          var button_name = new TizenLib.String(name);
          var button = TizenLib.casts.Button_of_Control(this.GetControl(button_name));
          var x = new TizenLib.String(c);
          button.SetText(x);
        }
    }
};
}
 --> ctor<0>[{ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }]() -> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
function Heap() {
  this.color = 'board';
  this.value = -1;
  this.path = null;
  this.place = null;
  this.bpossible = [];
  this.cpossible = [];
  this.upossible = [];
  this.colorCount = {};
  this.nextLevel = {};
}
 --> ctor<0>[null]() -> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
function _init(play) {
  this.playerNum = play || 1;
  var i;
  var j;
  for (i = 0; i < this.bounder; i++) 
    {
      for (j = 0; j < this.bounder; j++) 
        {
          this.board[i][j] = 'board';
        }
    }
  this.board[3][3] = 'black';
  this.board[4][4] = 'black';
  this.board[3][4] = 'white';
  this.board[4][3] = 'white';
  this.isUserTurn = true;
  this.isLock = false;
  this.isConfigure = false;
  this.isResult = false;
  this.currentColor = 'white';
  this.step = 4;
  this.level = 3;
  this.point = [];
  this.heap = new Heap();
  this.isInit = true;
  this.endConfigure();
  this.drawMessage();
} --> [{ drawMessage: []() -> void, endConfigure: []() -> void, board: Array<Array<string>>, bounder: integer | isInit: boolean, point: Array<___>, level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, isLock: boolean, isResult: boolean, currentColor: string, isConfigure: boolean, isUserTurn: boolean, playerNum: integer }](integer) -> void
function getMessage(x, y) {
  return x;
}
 --> (___,___) -> ___
function mString(i) {
  return i + "";
}
 --> (integer) -> string
function() {
  console.log("DEBUG: computerTurn");
  var possible;
  if (this.heap.value > -1) 
  {
    if (this.heap.color == 'white') 
    {
      possible = this.heap.cpossible;
    } else {
      possible = this.heap.upossible;
    }
  } else {
    possible = this.possiblePlace('white', null);
  }
  var place = this.bestPlace(possible);
  if (possible.length > 0 && place.length > 0) 
  {
    this.actionAtPoint(place, 'white');
  }
} --> [{ actionAtPoint: [](Array<integer>,string) -> void, bestPlace: [](Array<Array<integer>>) -> Array<integer>, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } |  }]() -> void
function() {
  console.log("DEBUG: displayBoard");
  var i, j;
  for (i = 0; i < this.bounder; i++) 
    {
      var line = "";
      for (j = 0; j < this.bounder; j++) 
        {
          var c = "_";
          if (this.board[i][j] === 'black') 
          c = "B"; else if (this.board[i][j] === 'white') 
          c = "W";
          line = line + c;
        }
      console.log(line);
    }
  console.log("BC = " + this.status.bc + ", WC = " + this.status.wc + ", Result = " + this.status.result);
  console.log("");
} --> [{ status: {  | bc: integer, wc: integer, result: string }, board: Array<Array<string>>, bounder: integer |  }]() -> void
function() {
  console.log("DEBUG: drawMessage " + this.playerNum + this.currentColor + (this.isUserTurn ? "true" : "false"));
  var bc = 0;
  var wc = 0;
  if (this.heap.value > -1) 
  {
    bc = this.heap.colorCount['black'];
    wc = this.heap.colorCount['white'];
  } else {
    var count = {'black': 0, 'white': 0};
    var i, j;
    for (i = 0; i < this.bounder; i++) 
      {
        for (j = 0; j < this.bounder; j++) 
          {
            count[this.board[i][j]] += 1;
          }
      }
    bc = count['black'];
    wc = count['white'];
  }
  var bpossible;
  var wpossible;
  this.status = {bc: bc, wc: wc, result: "Unknown"};
  if (this.heap.value > -1 && this.heap.color == this.currentColor) 
  {
    if (this.heap.color == 'white') 
    {
      bpossible = this.heap.upossible;
      wpossible = this.heap.cpossible;
    } else {
      wpossible = this.heap.upossible;
      bpossible = this.heap.cpossible;
    }
  } else {
    wpossible = this.possiblePlace('white', null);
    bpossible = this.possiblePlace('black', null);
  }
  this.isEnd = ((bpossible.length == 0 && wpossible.length == 0) || (this.step == 64));
  if (!this.isEnd) 
  {
    var tpossible = bpossible;
    if (this.currentColor == 'black') 
    {
      if (wpossible.length > 0) 
      {
        this.currentColor = 'white';
        tpossible = wpossible;
      }
    } else {
      if (bpossible.length > 0) 
      {
        this.currentColor = 'black';
      } else {
        tpossible = wpossible;
      }
    }
    this.possible = tpossible;
    if (this.playerNum == 1 && this.currentColor == 'white') 
    {
      this.isUserTurn = false;
      this.computerTurn();
    } else {
      this.isUserTurn = true;
    }
  } else {
    if (bc > wc) 
    {
      console.log("Player 1 wins");
      this.status.result = "Player 1 wins";
    } else if (bc == wc) 
    {
      console.log("Draw");
      this.status.result = "Draw";
    } else {
      console.log("Computer wins");
      this.status.result = "Computer wins";
    }
    this.isLock = true;
    this.isResult = true;
  }
  console.log("DEBUG: drawMessage exiting " + this.playerNum + this.currentColor + (this.isUserTurn ? "true" : "false"));
  this.isDrawing = false;
<<<<<<< HEAD
} --> [{ playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }]() -> void
=======
} --> [{ playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }]() -> void
>>>>>>> 93324d42df7d25cd7f22c55fb2f150fb02644ea7
function() {
  this.init(this.playerNum);
  this.endConfigure();
} --> [{ endConfigure: []() -> void, playerNum: integer, init: [](integer) -> void |  }]() -> void
function() {
  this.isConfigure = false;
} --> [{  | isConfigure: boolean }]() -> void
function() {
  this.isResult = false;
} --> [{  | isResult: boolean }]() -> void
function() {
  var i = 0;
  while (i < BUTTON_COUNT) 
    {
      var button_name = new TizenLib.String(this.button_names[i]);
      var button = TizenLib.casts.Button_of_Control(this.GetControl(button_name));
      button.SetActionId(i);
      button.AddActionEventListener(this.ael);
      i++;
    }
  this.showBoard();
  var id = new TizenLib.String(IDC_LABEL1);
  this.labelPrint = TizenLib.casts.Label_of_Control(this.GetControl(id));
  this.labelPrint.SetTextHorizontalAlignment(ALIGNMENT_RIGHT);
  return E_SUCCESS;
} --> [{ GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, showBoard: []() -> void, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: <<recursive>>, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, button_names: Array<string> | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  } }]() -> integer
function() {
  var i, j;
  for (i = 0; i < World.bounder; i++) 
    {
      for (j = 0; j < World.bounder; j++) 
        {
          var c = "-";
          if (World.board[i][j] === 'black') 
          c = "B"; else if (World.board[i][j] === 'white') 
          c = "W";
          var name = this.button_names[i * 8 + j];
          var button_name = new TizenLib.String(name);
          var button = TizenLib.casts.Button_of_Control(this.GetControl(button_name));
          var x = new TizenLib.String(c);
          button.SetText(x);
        }
    }
} --> [{ GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, button_names: Array<string> |  }]() -> void
function() {
  var path = new TizenLib.String("IDL_FORM");
  var r = this.Construct(path);
  return r;
} --> [{ Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer |  }]() -> integer
function() {
  var r = E_SUCCESS;
  r = this.AddAnnexPanel();
  return r;
} --> [{ AddAnnexPanel: []() -> integer |  }]() -> integer
function() {
  var w = {board: [[], [], [], [], [], [], [], []], bounder: 8, boardview: 'board', messageview: 'message', result: 'result', isEnd: false, endMessage: '', isUserTurn: true, isDrawing: false, isLock: false, isInit: false, isConfigure: false, isResult: false, level: 3, hasHelp: false, hasInit: false, playerNum: 1, currentColor: 'black', step: 4, point: null, directs: [[1, 0], [1, 1], [1, -1], [0, 1], [0, -1], [-1, 0], [-1, 1], [-1, -1]], heap: new Heap(), possible: null, pendingDrawMessage: 0, status: {bc: 0, wc: 0, result: "Unknown"}, init: function _init(play) {
  this.playerNum = play || 1;
  var i;
  var j;
  for (i = 0; i < this.bounder; i++) 
    {
      for (j = 0; j < this.bounder; j++) 
        {
          this.board[i][j] = 'board';
        }
    }
  this.board[3][3] = 'black';
  this.board[4][4] = 'black';
  this.board[3][4] = 'white';
  this.board[4][3] = 'white';
  this.isUserTurn = true;
  this.isLock = false;
  this.isConfigure = false;
  this.isResult = false;
  this.currentColor = 'white';
  this.step = 4;
  this.level = 3;
  this.point = [];
  this.heap = new Heap();
  this.isInit = true;
  this.endConfigure();
  this.drawMessage();
}, endConfigure: function() {
  this.isConfigure = false;
}, startOver: function() {
  this.init(this.playerNum);
  this.endConfigure();
}, actionAtPoint: function(place, color) {
  console.log("DEBUG: actionAtPoint" + place[0] + place[1] + color);
  var path = [];
  this.heap = this.heap.nextLevel[mString(place[0]) + mString(place[1])];
  if (!this.heap) 
  this.heap = new Heap();
  if (this.heap.value > -1 && this.heap.color == color) 
  {
    path = this.heap.path;
  } else {
    var act = this.getRevertPath(place, color, null);
    path = act.path;
    var heap = new Heap();
    heap.color = color;
    heap.path = path;
    heap.place = place;
    this.heap = heap;
  }
  this.step += 1;
  if (this.step >= 50) 
  this.level += 1; else if (this.step >= 53) 
  this.level += 1; else if (this.step >= 55) 
  this.level += 2;
  this.setPoint(place, color);
  this.drawPath(path, color);
}, setPoint: function(place, color) {
  this.board[place[0]][place[1]] = color;
  this.drawPoint(place, color);
}, drawPoint: function(place, color) {
}, drawPath: function(path, color) {
  this.isDrawing = true;
  var n;
  for (n = 0; n < path.length; n++) 
    {
      this.board[path[n][0]][path[n][1]] = color;
      this.drawPoint([path[n][0], path[n][1]], color);
    }
  this.pendingDrawMessage = this.pendingDrawMessage + 1;
}, drawMessage: function() {
  console.log("DEBUG: drawMessage " + this.playerNum + this.currentColor + (this.isUserTurn ? "true" : "false"));
  var bc = 0;
  var wc = 0;
  if (this.heap.value > -1) 
  {
    bc = this.heap.colorCount['black'];
    wc = this.heap.colorCount['white'];
  } else {
    var count = {'black': 0, 'white': 0};
    var i, j;
    for (i = 0; i < this.bounder; i++) 
      {
        for (j = 0; j < this.bounder; j++) 
          {
            count[this.board[i][j]] += 1;
          }
      }
    bc = count['black'];
    wc = count['white'];
  }
  var bpossible;
  var wpossible;
  this.status = {bc: bc, wc: wc, result: "Unknown"};
  if (this.heap.value > -1 && this.heap.color == this.currentColor) 
  {
    if (this.heap.color == 'white') 
    {
      bpossible = this.heap.upossible;
      wpossible = this.heap.cpossible;
    } else {
      wpossible = this.heap.upossible;
      bpossible = this.heap.cpossible;
    }
  } else {
    wpossible = this.possiblePlace('white', null);
    bpossible = this.possiblePlace('black', null);
  }
  this.isEnd = ((bpossible.length == 0 && wpossible.length == 0) || (this.step == 64));
  if (!this.isEnd) 
  {
    var tpossible = bpossible;
    if (this.currentColor == 'black') 
    {
      if (wpossible.length > 0) 
      {
        this.currentColor = 'white';
        tpossible = wpossible;
      }
    } else {
      if (bpossible.length > 0) 
      {
        this.currentColor = 'black';
      } else {
        tpossible = wpossible;
      }
    }
    this.possible = tpossible;
    if (this.playerNum == 1 && this.currentColor == 'white') 
    {
      this.isUserTurn = false;
      this.computerTurn();
    } else {
      this.isUserTurn = true;
    }
  } else {
    if (bc > wc) 
    {
      console.log("Player 1 wins");
      this.status.result = "Player 1 wins";
    } else if (bc == wc) 
    {
      console.log("Draw");
      this.status.result = "Draw";
    } else {
      console.log("Computer wins");
      this.status.result = "Computer wins";
    }
    this.isLock = true;
    this.isResult = true;
  }
  console.log("DEBUG: drawMessage exiting " + this.playerNum + this.currentColor + (this.isUserTurn ? "true" : "false"));
  this.isDrawing = false;
}, closeResult: function() {
  this.isResult = false;
}, displayBoard: function() {
  console.log("DEBUG: displayBoard");
  var i, j;
  for (i = 0; i < this.bounder; i++) 
    {
      var line = "";
      for (j = 0; j < this.bounder; j++) 
        {
          var c = "_";
          if (this.board[i][j] === 'black') 
          c = "B"; else if (this.board[i][j] === 'white') 
          c = "W";
          line = line + c;
        }
      console.log(line);
    }
  console.log("BC = " + this.status.bc + ", WC = " + this.status.wc + ", Result = " + this.status.result);
  console.log("");
}, click: function(i, j) {
  console.log("DEBUG: click " + i + j + " " + (this.isUserTurn ? "true" : "false"));
  if (this.board[i][j] === 'board' && !this.isEnd && this.isUserTurn && !this.isDrawing && !this.isLock && !this.isConfigure) 
  {
    if (this.canRevert([i, j], this.currentColor, null)) 
    {
      this.actionAtPoint([i, j], this.currentColor);
      if (this.playerNum == 1) 
      this.isUserTurn = false;
    } else {
    }
  } else if ((this.isConfigure && !this.isEnd && !this.isDrawing && !this.isLock) || (this.isConfigure && this.isEnd && !this.isDrawing && this.isLock && !this.isResult)) 
  {
    this.endConfigure();
  }
  while (this.pendingDrawMessage > 0) 
    {
      this.pendingDrawMessage = this.pendingDrawMessage - 1;
      this.drawMessage();
    }
}, computerTurn: function() {
  console.log("DEBUG: computerTurn");
  var possible;
  if (this.heap.value > -1) 
  {
    if (this.heap.color == 'white') 
    {
      possible = this.heap.cpossible;
    } else {
      possible = this.heap.upossible;
    }
  } else {
    possible = this.possiblePlace('white', null);
  }
  var place = this.bestPlace(possible);
  if (possible.length > 0 && place.length > 0) 
  {
    this.actionAtPoint(place, 'white');
  }
}, isContain: function(place, _array) {
  var heat = _array || [];
  var i = 0;
  for (i = 0; i < heat.length; i++) 
    {
      if (heat[i][0] == place[0] && heat[i][1] == place[1]) 
      {
        return true;
      }
    }
  return false;
}, possiblePlace: function(color, _board) {
  var ret = [];
  var tmp = {};
  var revColor = ((color == 'white') ? 'black' : 'white');
  var board = _board ? _board : this.board;
  var i, j, n;
  for (i = 0; i < this.bounder; i++) 
    {
      for (j = 0; j < this.bounder; j++) 
        {
          if (board[i][j] === revColor) 
          {
            for (n = 0; n < this.directs.length; n++) 
              {
                var ni = i + this.directs[n][0];
                var nj = j + this.directs[n][1];
                if (ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === 'board') 
                {
                  if (this.canRevert([ni, nj], color, board) && !this.isContain([ni, nj], ret)) 
                  {
                    ret.push([ni, nj]);
                  }
                }
              }
          }
        }
    }
  return ret;
}, canRevert: function(place, color, _board) {
  var i = place[0];
  var j = place[1];
  var revColor = ((color == 'white') ? 'black' : 'white');
  var board = _board ? _board : this.board;
  var n;
  for (n = 0; n < this.directs.length; n++) 
    {
      var di = this.directs[n][0];
      var dj = this.directs[n][1];
      var ni = i + di;
      var nj = j + dj;
      while (ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === revColor) 
        {
          ni += di;
          nj += dj;
          if (ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === color) 
          {
            return true;
          }
        }
    }
  return false;
}, getClone: function(obj) {
  var ret = [[], [], [], [], [], [], [], []];
  var i, j;
  for (i = 0; i < this.bounder; i++) 
    {
      for (j = 0; j < this.bounder; j++) 
        {
          ret[i][j] = obj[i][j];
        }
    }
  return ret;
}, getRevertPath: function(place, color, _board) {
  var i = place[0];
  var j = place[1];
  var revColor = ((color == 'white') ? 'black' : 'white');
  var board = _board ? _board : this.board;
  var path = [];
  var n;
  for (n = 0; n < this.directs.length; n++) 
    {
      var ni = i + this.directs[n][0];
      var nj = j + this.directs[n][1];
      var tpath = [];
      while (ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === revColor) 
        {
          tpath.push([ni, nj]);
          ni += this.directs[n][0];
          nj += this.directs[n][1];
          if (ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === color) 
          {
            var tmp = [0, 0];
            while (tpath.length > 0) 
              {
                tmp = tpath.pop();
                path.push(tmp);
              }
          }
        }
    }
  return {place: place, path: path, color: color};
}, doRevert: function(action, _board) {
  var color = action.color;
  var board = _board ? _board : this.board;
  var path = action.path;
  var p;
  for (p = 0; p < path.length; p++) 
    {
      board[path[p][0]][path[p][1]] = color;
    }
  return board;
}, getValue: function(place, _board) {
  var ret = 0;
  var board = _board ? _board : this.board;
  var i = place[0];
  var j = place[1];
  var mtable = [[100, -50, 40, 30, 30, 40, -50, 100], [-50, -30, 5, 1, 1, 5, -30, -50], [40, 5, 20, 10, 10, 20, 5, 40], [30, 1, 10, 0, 0, 10, 1, 30], [30, 1, 10, 0, 0, 10, 1, 30], [40, 5, 20, 10, 10, 20, 5, 40], [-50, -30, 5, 1, 1, 5, -30, -50], [100, -50, 40, 30, 30, 40, -50, 100]];
  return mtable[i][j];
}, evaluate: function(place, _color, _board, _level, _heap) {
  var ret = -100000;
  var level = _level ? _level : this.level;
  var heap = _heap ? _heap : this.heap;
  if (!heap.nextLevel[mString(place[0]) + mString(place[1])]) 
  {
    heap.nextLevel[mString(place[0]) + mString(place[1])] = new Heap();
  }
  heap = heap.nextLevel[mString(place[0]) + mString(place[1])];
  var toEndLevel = 64 - this.step;
  level = (level > toEndLevel ? toEndLevel : level);
  var nextValue = 0.0;
  var color = _color || 'white';
  var board = _board ? _board : this.board;
  board = this.getClone(board);
  var revColor = ((color == 'white') ? 'black' : 'white');
  var sym = ((color == 'white') ? 1 : -1);
  board[place[0]][place[1]] = color;
  var path;
  var cp;
  var up;
  if (heap.value > -1) 
  {
    path = heap.path;
    ret = heap.value;
    cp = heap.cpossible;
    up = heap.upossible;
    board = this.doRevert(heap, board);
  } else {
    var act = this.getRevertPath(place, color, board);
    heap.path = act.path;
    heap.color = color;
    heap.place = place;
    board = this.doRevert(heap, board);
    cp = this.possiblePlace(color, board);
    up = this.possiblePlace(revColor, board);
    var cv = 0;
    var uv = 0;
    var cc = 0;
    var uc = 0;
    var i, j;
    for (i = 0; i < this.bounder; i++) 
      {
        for (j = 0; j < this.bounder; j++) 
          {
            if (board[i][j] === color) 
            {
              cv += this.getValue([i, j], board);
              cc++;
            } else if (board[i][j] === revColor) 
            {
              uv += this.getValue([i, j], board);
              uc++;
            }
          }
      }
    ret = (cp.length - up.length) * 10;
    ret += (cv - uv) * 2;
    if (up.length == 0 && cp.length > 0) 
    ret = 100000;
    heap.value = ret;
    heap.nextLevel = {};
    heap.cpossible = cp;
    heap.upossible = up;
    heap.colorCount[color] = cc;
    heap.colorCount[revColor] = uc;
  }
  if (level > 1 && (up.length > 0 || cp.length > 0)) 
  {
    if (up.length == 0) 
    {
      up = cp;
      revColor = color;
    }
    up = this.getBestPlaceSet(up);
    var p;
    for (p = 0; p < up.length; p++) 
      {
        nextValue = nextValue + this.evaluate(up[p], revColor, board, level - 1, heap);
      }
    if (up.length > 0) 
    {
      nextValue = nextValue / up.length;
      ret = Math.round(ret * 0.5 + nextValue * 0.5);
    }
  }
  return ret * sym;
}, getBestPlaceSet: function(possible) {
  var best = [];
  var middle = [];
  var ret = [];
  var i;
  for (i = 0; i < possible.length; i++) 
    {
      var t = this.getValue(possible[i], null);
      if (t == 100) 
      {
        best.push(possible[i]);
      } else if (t >= 0) 
      {
        middle.push(possible[i]);
      }
    }
  if (best.length > 0) 
  {
    ret = best;
  } else if (middle.length > 0) 
  {
    ret = middle;
  } else {
    ret = possible;
  }
  return ret;
}, bestPlace: function(possible) {
  if (possible.length == 0) 
  console.log('Error: No possible places?!!!');
  possible = this.getBestPlaceSet(possible);
  var ret = [];
  if (possible.length > 0) 
  {
    ret = possible[0];
    var p;
    var value = this.evaluate(ret, null, null, 0, null);
    for (p = 1; p < possible.length; p++) 
      {
        var v = this.evaluate(possible[p], null, null, 0, null);
        if (v > value) 
        {
          value = v;
          ret = possible[p];
        }
      }
  } else {
    console.log('Error: No Setting place for Computer');
  }
  return ret;
}};
  return w;
} --> () -> {  | board: Array<Array<string>>, bounder: integer, boardview: string, messageview: string, result: string, isEnd: boolean, endMessage: string, isUserTurn: boolean, isDrawing: boolean, isLock: boolean, isInit: boolean, isConfigure: boolean, isResult: boolean, level: integer, hasHelp: boolean, hasInit: boolean, playerNum: integer, currentColor: string, step: integer, point: Array<___>, directs: Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, possible: Array<Array<integer>>, pendingDrawMessage: integer, status: {  | bc: integer, wc: integer, result: string }, init: [](integer) -> void, endConfigure: []() -> void, startOver: []() -> void, actionAtPoint: [](Array<integer>,string) -> void, setPoint: [](Array<integer>,string) -> void, drawPoint: (Array<integer>,string) -> void, drawPath: [](Array<Array<integer>>,string) -> void, drawMessage: []() -> void, closeResult: []() -> void, displayBoard: []() -> void, click: [](integer,integer) -> void, computerTurn: []() -> void, isContain: (Array<integer>,Array<Array<integer>>) -> boolean, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, getClone: [](Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, bestPlace: [](Array<Array<integer>>) -> Array<integer> }
function() {
  var x = this;
  return E_SUCCESS;
} --> [{  |  }]() -> integer
function() {
  var x = this;
  return E_SUCCESS;
} --> [{  |  }]() -> integer
function(action, _board) {
  var color = action.color;
  var board = _board ? _board : this.board;
  var path = action.path;
  var p;
  for (p = 0; p < path.length; p++) 
    {
      board[path[p][0]][path[p][1]] = color;
    }
  return board;
} --> [{ board: Array<Array<string>> |  }]({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>
function(appRegistry) {
  var frame = new TizenLib.Frame();
  frame.Construct();
  this.AddFrame(frame);
  var form = new AnnexForm();
  form.init();
  frame.AddControl(form);
  frame.SetCurrentForm(form);
  return true;
} --> [{ AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer |  }]({ _____cpp_receiver: void |  }) -> boolean
function(appRegistry, urgent) {
  var x = this;
  return true;
} --> [{  |  }]({ _____cpp_receiver: void |  },boolean) -> boolean
function(color, _board) {
  var ret = [];
  var tmp = {};
  var revColor = ((color == 'white') ? 'black' : 'white');
  var board = _board ? _board : this.board;
  var i, j, n;
  for (i = 0; i < this.bounder; i++) 
    {
      for (j = 0; j < this.bounder; j++) 
        {
          if (board[i][j] === revColor) 
          {
            for (n = 0; n < this.directs.length; n++) 
              {
                var ni = i + this.directs[n][0];
                var nj = j + this.directs[n][1];
                if (ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === 'board') 
                {
                  if (this.canRevert([ni, nj], color, board) && !this.isContain([ni, nj], ret)) 
                  {
                    ret.push([ni, nj]);
                  }
                }
              }
          }
        }
    }
  return ret;
} --> [{ isContain: (Array<integer>,Array<Array<integer>>) -> boolean, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }](string,Array<Array<string>>) -> Array<Array<integer>>
function(i, j) {
  console.log("DEBUG: click " + i + j + " " + (this.isUserTurn ? "true" : "false"));
  if (this.board[i][j] === 'board' && !this.isEnd && this.isUserTurn && !this.isDrawing && !this.isLock && !this.isConfigure) 
  {
    if (this.canRevert([i, j], this.currentColor, null)) 
    {
      this.actionAtPoint([i, j], this.currentColor);
      if (this.playerNum == 1) 
      this.isUserTurn = false;
    } else {
    }
  } else if ((this.isConfigure && !this.isEnd && !this.isDrawing && !this.isLock) || (this.isConfigure && this.isEnd && !this.isDrawing && this.isLock && !this.isResult)) 
  {
    this.endConfigure();
  }
  while (this.pendingDrawMessage > 0) 
    {
      this.pendingDrawMessage = this.pendingDrawMessage - 1;
      this.drawMessage();
    }
} --> [{ drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }](integer,integer) -> void
function(obj) {
  var ret = [[], [], [], [], [], [], [], []];
  var i, j;
  for (i = 0; i < this.bounder; i++) 
    {
      for (j = 0; j < this.bounder; j++) 
        {
          ret[i][j] = obj[i][j];
        }
    }
  return ret;
} --> [{ bounder: integer |  }](Array<Array<string>>) -> Array<Array<string>>
function(path, color) {
  this.isDrawing = true;
  var n;
  for (n = 0; n < path.length; n++) 
    {
      this.board[path[n][0]][path[n][1]] = color;
      this.drawPoint([path[n][0], path[n][1]], color);
    }
  this.pendingDrawMessage = this.pendingDrawMessage + 1;
} --> [{ drawPoint: (Array<integer>,string) -> void, board: Array<Array<string>> | pendingDrawMessage: integer, isDrawing: boolean }](Array<Array<integer>>,string) -> void
function(place, _array) {
  var heat = _array || [];
  var i = 0;
  for (i = 0; i < heat.length; i++) 
    {
      if (heat[i][0] == place[0] && heat[i][1] == place[1]) 
      {
        return true;
      }
    }
  return false;
} --> (Array<integer>,Array<Array<integer>>) -> boolean
function(place, _board) {
  var ret = 0;
  var board = _board ? _board : this.board;
  var i = place[0];
  var j = place[1];
  var mtable = [[100, -50, 40, 30, 30, 40, -50, 100], [-50, -30, 5, 1, 1, 5, -30, -50], [40, 5, 20, 10, 10, 20, 5, 40], [30, 1, 10, 0, 0, 10, 1, 30], [30, 1, 10, 0, 0, 10, 1, 30], [40, 5, 20, 10, 10, 20, 5, 40], [-50, -30, 5, 1, 1, 5, -30, -50], [100, -50, 40, 30, 30, 40, -50, 100]];
  return mtable[i][j];
} --> [{ board: Array<Array<string>> |  }](Array<integer>,Array<Array<string>>) -> integer
function(place, _color, _board, _level, _heap) {
  var ret = -100000;
  var level = _level ? _level : this.level;
  var heap = _heap ? _heap : this.heap;
  if (!heap.nextLevel[mString(place[0]) + mString(place[1])]) 
  {
    heap.nextLevel[mString(place[0]) + mString(place[1])] = new Heap();
  }
  heap = heap.nextLevel[mString(place[0]) + mString(place[1])];
  var toEndLevel = 64 - this.step;
  level = (level > toEndLevel ? toEndLevel : level);
  var nextValue = 0.0;
  var color = _color || 'white';
  var board = _board ? _board : this.board;
  board = this.getClone(board);
  var revColor = ((color == 'white') ? 'black' : 'white');
  var sym = ((color == 'white') ? 1 : -1);
  board[place[0]][place[1]] = color;
  var path;
  var cp;
  var up;
  if (heap.value > -1) 
  {
    path = heap.path;
    ret = heap.value;
    cp = heap.cpossible;
    up = heap.upossible;
    board = this.doRevert(heap, board);
  } else {
    var act = this.getRevertPath(place, color, board);
    heap.path = act.path;
    heap.color = color;
    heap.place = place;
    board = this.doRevert(heap, board);
    cp = this.possiblePlace(color, board);
    up = this.possiblePlace(revColor, board);
    var cv = 0;
    var uv = 0;
    var cc = 0;
    var uc = 0;
    var i, j;
    for (i = 0; i < this.bounder; i++) 
      {
        for (j = 0; j < this.bounder; j++) 
          {
            if (board[i][j] === color) 
            {
              cv += this.getValue([i, j], board);
              cc++;
            } else if (board[i][j] === revColor) 
            {
              uv += this.getValue([i, j], board);
              uc++;
            }
          }
      }
    ret = (cp.length - up.length) * 10;
    ret += (cv - uv) * 2;
    if (up.length == 0 && cp.length > 0) 
    ret = 100000;
    heap.value = ret;
    heap.nextLevel = {};
    heap.cpossible = cp;
    heap.upossible = up;
    heap.colorCount[color] = cc;
    heap.colorCount[revColor] = uc;
  }
  if (level > 1 && (up.length > 0 || cp.length > 0)) 
  {
    if (up.length == 0) 
    {
      up = cp;
      revColor = color;
    }
    up = this.getBestPlaceSet(up);
    var p;
    for (p = 0; p < up.length; p++) 
      {
        nextValue = nextValue + this.evaluate(up[p], revColor, board, level - 1, heap);
      }
    if (up.length > 0) 
    {
      nextValue = nextValue / up.length;
      ret = Math.round(ret * 0.5 + nextValue * 0.5);
    }
  }
  return ret * sym;
} --> [{ evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, bounder: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, getClone: [](Array<Array<string>>) -> Array<Array<string>>, board: Array<Array<string>>, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, level: integer |  }](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float
function(place, color) {
  console.log("DEBUG: actionAtPoint" + place[0] + place[1] + color);
  var path = [];
  this.heap = this.heap.nextLevel[mString(place[0]) + mString(place[1])];
  if (!this.heap) 
  this.heap = new Heap();
  if (this.heap.value > -1 && this.heap.color == color) 
  {
    path = this.heap.path;
  } else {
    var act = this.getRevertPath(place, color, null);
    path = act.path;
    var heap = new Heap();
    heap.color = color;
    heap.path = path;
    heap.place = place;
    this.heap = heap;
  }
  this.step += 1;
  if (this.step >= 50) 
  this.level += 1; else if (this.step >= 53) 
  this.level += 1; else if (this.step >= 55) 
  this.level += 2;
  this.setPoint(place, color);
  this.drawPath(path, color);
} --> [{ drawPath: [](Array<Array<integer>>,string) -> void, setPoint: [](Array<integer>,string) -> void, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string } | level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } }](Array<integer>,string) -> void
function(place, color) {
  this.board[place[0]][place[1]] = color;
  this.drawPoint(place, color);
} --> [{ drawPoint: (Array<integer>,string) -> void, board: Array<Array<string>> |  }](Array<integer>,string) -> void
function(place, color) {
} --> (Array<integer>,string) -> void
function(place, color, _board) {
  var i = place[0];
  var j = place[1];
  var revColor = ((color == 'white') ? 'black' : 'white');
  var board = _board ? _board : this.board;
  var n;
  for (n = 0; n < this.directs.length; n++) 
    {
      var di = this.directs[n][0];
      var dj = this.directs[n][1];
      var ni = i + di;
      var nj = j + dj;
      while (ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === revColor) 
        {
          ni += di;
          nj += dj;
          if (ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === color) 
          {
            return true;
          }
        }
    }
  return false;
} --> [{ bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }](Array<integer>,string,Array<Array<string>>) -> boolean
function(place, color, _board) {
  var i = place[0];
  var j = place[1];
  var revColor = ((color == 'white') ? 'black' : 'white');
  var board = _board ? _board : this.board;
  var path = [];
  var n;
  for (n = 0; n < this.directs.length; n++) 
    {
      var ni = i + this.directs[n][0];
      var nj = j + this.directs[n][1];
      var tpath = [];
      while (ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === revColor) 
        {
          tpath.push([ni, nj]);
          ni += this.directs[n][0];
          nj += this.directs[n][1];
          if (ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === color) 
          {
            var tmp = [0, 0];
            while (tpath.length > 0) 
              {
                tmp = tpath.pop();
                path.push(tmp);
              }
          }
        }
    }
  return {place: place, path: path, color: color};
} --> [{ bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }
function(possible) {
  if (possible.length == 0) 
  console.log('Error: No possible places?!!!');
  possible = this.getBestPlaceSet(possible);
  var ret = [];
  if (possible.length > 0) 
  {
    ret = possible[0];
    var p;
    var value = this.evaluate(ret, null, null, 0, null);
    for (p = 1; p < possible.length; p++) 
      {
        var v = this.evaluate(possible[p], null, null, 0, null);
        if (v > value) 
        {
          value = v;
          ret = possible[p];
        }
      }
  } else {
    console.log('Error: No Setting place for Computer');
  }
  return ret;
} --> [{ evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>> |  }](Array<Array<integer>>) -> Array<integer>
function(possible) {
  var best = [];
  var middle = [];
  var ret = [];
  var i;
  for (i = 0; i < possible.length; i++) 
    {
      var t = this.getValue(possible[i], null);
      if (t == 100) 
      {
        best.push(possible[i]);
      } else if (t >= 0) 
      {
        middle.push(possible[i]);
      }
    }
  if (best.length > 0) 
  {
    ret = best;
  } else if (middle.length > 0) 
  {
    ret = middle;
  } else {
    ret = possible;
  }
  return ret;
} --> [{ getValue: [](Array<integer>,Array<Array<string>>) -> integer |  }](Array<Array<integer>>) -> Array<Array<integer>>
function(source, actionId) {
  var i = Math.floor(actionId / 8);
  var j = actionId - (i * 8);
  World.click(i, j);
  this.annexForm.showBoard();
  var displayText = "B: " + World.status.bc + " W: " + World.status.wc + " Result: " + World.status.result;
  var s = new TizenLib.String(displayText);
  this.annexForm.labelPrint.SetText(s);
  this.annexForm.Draw();
} --> [{ annexForm: { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void } |  }]({ _____cpp_receiver: void |  },integer) -> void
getMessage --> (___,___) -> ___
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap = heap.nextLevel[mString(place[0]) + mString(place[1])] --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap.color --> string
heap.color --> string
heap.color = color --> string
heap.color = color --> string
heap.colorCount --> Map<integer>
heap.colorCount --> Map<integer>
heap.colorCount[color] --> integer
heap.colorCount[color] = cc --> integer
heap.colorCount[revColor] --> integer
heap.colorCount[revColor] = uc --> integer
heap.cpossible --> Array<Array<integer>>
heap.cpossible --> Array<Array<integer>>
heap.cpossible = cp --> Array<Array<integer>>
heap.nextLevel --> Map<{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }>
heap.nextLevel --> Map<{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }>
heap.nextLevel --> Map<{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }>
heap.nextLevel --> Map<{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }>
heap.nextLevel = {} --> Map<{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }>
heap.nextLevel[mString(place[0]) + mString(place[1])] --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap.nextLevel[mString(place[0]) + mString(place[1])] --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap.nextLevel[mString(place[0]) + mString(place[1])] --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap.nextLevel[mString(place[0]) + mString(place[1])] = new Heap() --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
heap.path --> Array<Array<integer>>
heap.path --> Array<Array<integer>>
heap.path --> Array<Array<integer>>
heap.path = act.path --> Array<Array<integer>>
heap.path = path --> Array<Array<integer>>
heap.place --> Array<integer>
heap.place --> Array<integer>
heap.place = place --> Array<integer>
heap.place = place --> Array<integer>
heap.upossible --> Array<Array<integer>>
heap.upossible --> Array<Array<integer>>
heap.upossible = up --> Array<Array<integer>>
heap.value --> float
heap.value --> float
heap.value --> float
heap.value = ret --> float
heap.value > -1 --> boolean
heat --> Array<Array<integer>>
heat --> Array<Array<integer>>
heat --> Array<Array<integer>>
heat --> Array<Array<integer>>
heat.length --> integer
heat[i] --> Array<integer>
heat[i] --> Array<integer>
heat[i][0] --> integer
heat[i][0] == place[0] && heat[i][1] == place[1] --> boolean
heat[i][0] == place[0] --> boolean
heat[i][1] --> integer
heat[i][1] == place[1] --> boolean
i * 8 + j --> integer
i * 8 --> integer
i * 8 --> integer
i + "" --> string
i + di --> integer
i + this.directs[n][0] --> integer
i + this.directs[n][0] --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i < BUTTON_COUNT --> boolean
i < World.bounder --> boolean
i < heat.length --> boolean
i < possible.length --> boolean
i < this.bounder --> boolean
i < this.bounder --> boolean
i < this.bounder --> boolean
i < this.bounder --> boolean
i < this.bounder --> boolean
i < this.bounder --> boolean
i = 0 --> integer
i = 0 --> integer
i = 0 --> integer
i = 0 --> integer
i = 0 --> integer
i = 0 --> integer
i = 0 --> integer
i = 0 --> integer
i = 0 --> integer
i++ --> integer
i++ --> integer
i++ --> integer
i++ --> integer
i++ --> integer
i++ --> integer
i++ --> integer
i++ --> integer
i++ --> integer
i++ --> integer
id --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }
id --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }
j + dj --> integer
j + this.directs[n][1] --> integer
j + this.directs[n][1] --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j < World.bounder --> boolean
j < this.bounder --> boolean
j < this.bounder --> boolean
j < this.bounder --> boolean
j < this.bounder --> boolean
j < this.bounder --> boolean
j < this.bounder --> boolean
j = 0 --> integer
j = 0 --> integer
j = 0 --> integer
j = 0 --> integer
j = 0 --> integer
j = 0 --> integer
j = 0 --> integer
j++ --> integer
j++ --> integer
j++ --> integer
j++ --> integer
j++ --> integer
j++ --> integer
j++ --> integer
level - 1 --> integer
level --> integer
level --> integer
level --> integer
level --> integer
level --> integer
level --> integer
level = (level > toEndLevel ? toEndLevel : level) --> integer
level > 1 && (up.length > 0 || cp.length > 0) --> boolean
level > 1 --> boolean
level > toEndLevel --> boolean
level > toEndLevel ? toEndLevel : level --> integer
line + c --> string
line --> string
line --> string
line --> string
line --> string
line = line + c --> string
mString --> (integer) -> string
mString --> (integer) -> string
mString --> (integer) -> string
mString --> (integer) -> string
mString --> (integer) -> string
mString --> (integer) -> string
mString --> (integer) -> string
mString --> (integer) -> string
mString --> (integer) -> string
mString(place[0]) + mString(place[1]) --> string
mString(place[0]) + mString(place[1]) --> string
mString(place[0]) + mString(place[1]) --> string
mString(place[0]) + mString(place[1]) --> string
mString(place[0]) --> string
mString(place[0]) --> string
mString(place[0]) --> string
mString(place[0]) --> string
mString(place[1]) --> string
mString(place[1]) --> string
mString(place[1]) --> string
mString(place[1]) --> string
middle --> Array<Array<integer>>
middle --> Array<Array<integer>>
middle --> Array<Array<integer>>
middle --> Array<Array<integer>>
middle.length --> integer
middle.length > 0 --> boolean
middle.push --> [](Array<integer>) -> integer
middle.push(possible[i]) --> integer
mtable --> Array<Array<integer>>
mtable --> Array<Array<integer>>
mtable[i] --> Array<integer>
mtable[i][j] --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n --> integer
n < path.length --> boolean
n < this.directs.length --> boolean
n < this.directs.length --> boolean
n < this.directs.length --> boolean
n = 0 --> integer
n = 0 --> integer
n = 0 --> integer
n = 0 --> integer
n++ --> integer
n++ --> integer
n++ --> integer
n++ --> integer
name --> string
name --> string
new Annex() --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, Terminate: []() -> void | OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean }
new AnnexActionEventListener(this) --> { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: <<recursive>>, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }
new AnnexForm() --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
new Heap() --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
new Heap() --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
new Heap() --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
new Heap() --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
new Heap() --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
new TizenLib.Application() --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, Terminate: []() -> void |  }
new TizenLib.Form() --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }
new TizenLib.Frame() --> { _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }
new TizenLib.IActionEventListener() --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void |  }
new TizenLib.String("IDL_FORM") --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }
new TizenLib.String(IDC_LABEL1) --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }
new TizenLib.String(c) --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }
new TizenLib.String(displayText) --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }
new TizenLib.String(name) --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }
new TizenLib.String(this.button_names[i]) --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }
nextValue * 0.5 --> float
nextValue + this.evaluate(up[p], revColor, board, level - 1, heap) --> float
nextValue --> float
nextValue --> float
nextValue --> float
nextValue --> float
nextValue --> float
nextValue --> float
nextValue / up.length --> float
nextValue = nextValue + this.evaluate(up[p], revColor, board, level - 1, heap) --> float
nextValue = nextValue / up.length --> float
ni += di --> integer
ni += this.directs[n][0] --> integer
ni --> integer
ni --> integer
ni --> integer
ni --> integer
ni --> integer
ni --> integer
ni --> integer
ni --> integer
ni --> integer
ni --> integer
ni --> integer
ni --> integer
ni --> integer
ni --> integer
ni --> integer
ni --> integer
ni --> integer
ni --> integer
ni --> integer
ni --> integer
ni --> integer
ni --> integer
ni --> integer
ni --> integer
ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === 'board' --> boolean
ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === color --> boolean
ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === color --> boolean
ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === revColor --> boolean
ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === revColor --> boolean
ni < this.bounder --> boolean
ni < this.bounder --> boolean
ni < this.bounder --> boolean
ni < this.bounder --> boolean
ni < this.bounder --> boolean
ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === 'board' --> boolean
ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === color --> boolean
ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === color --> boolean
ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === revColor --> boolean
ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === revColor --> boolean
ni >= 0 --> boolean
ni >= 0 --> boolean
ni >= 0 --> boolean
ni >= 0 --> boolean
ni >= 0 --> boolean
nj += dj --> integer
nj += this.directs[n][1] --> integer
nj --> integer
nj --> integer
nj --> integer
nj --> integer
nj --> integer
nj --> integer
nj --> integer
nj --> integer
nj --> integer
nj --> integer
nj --> integer
nj --> integer
nj --> integer
nj --> integer
nj --> integer
nj --> integer
nj --> integer
nj --> integer
nj --> integer
nj --> integer
nj --> integer
nj --> integer
nj --> integer
nj --> integer
nj < this.bounder && board[ni][nj] === 'board' --> boolean
nj < this.bounder && board[ni][nj] === color --> boolean
nj < this.bounder && board[ni][nj] === color --> boolean
nj < this.bounder && board[ni][nj] === revColor --> boolean
nj < this.bounder && board[ni][nj] === revColor --> boolean
nj < this.bounder --> boolean
nj < this.bounder --> boolean
nj < this.bounder --> boolean
nj < this.bounder --> boolean
nj < this.bounder --> boolean
nj >= 0 && nj < this.bounder && board[ni][nj] === 'board' --> boolean
nj >= 0 && nj < this.bounder && board[ni][nj] === color --> boolean
nj >= 0 && nj < this.bounder && board[ni][nj] === color --> boolean
nj >= 0 && nj < this.bounder && board[ni][nj] === revColor --> boolean
nj >= 0 && nj < this.bounder && board[ni][nj] === revColor --> boolean
nj >= 0 --> boolean
nj >= 0 --> boolean
nj >= 0 --> boolean
nj >= 0 --> boolean
nj >= 0 --> boolean
null --> Array<Array<integer>>
null --> Array<Array<integer>>
null --> Array<Array<string>>
null --> Array<Array<string>>
null --> Array<Array<string>>
null --> Array<Array<string>>
null --> Array<Array<string>>
null --> Array<Array<string>>
null --> Array<Array<string>>
null --> Array<Array<string>>
null --> Array<___>
null --> Array<integer>
null --> string
null --> string
null --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
null --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
null --> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }
obj --> Array<Array<string>>
obj --> Array<Array<string>>
obj[i] --> Array<string>
obj[i][j] --> string
p --> integer
p --> integer
p --> integer
p --> integer
p --> integer
p --> integer
p --> integer
p --> integer
p --> integer
p --> integer
p --> integer
p --> integer
p --> integer
p --> integer
p --> integer
p --> integer
p --> integer
p < path.length --> boolean
p < possible.length --> boolean
p < up.length --> boolean
p = 0 --> integer
p = 0 --> integer
p = 1 --> integer
p++ --> integer
p++ --> integer
p++ --> integer
path --> Array<Array<integer>>
path --> Array<Array<integer>>
path --> Array<Array<integer>>
path --> Array<Array<integer>>
path --> Array<Array<integer>>
path --> Array<Array<integer>>
path --> Array<Array<integer>>
path --> Array<Array<integer>>
path --> Array<Array<integer>>
path --> Array<Array<integer>>
path --> Array<Array<integer>>
path --> Array<Array<integer>>
path --> Array<Array<integer>>
path --> Array<Array<integer>>
path --> Array<Array<integer>>
path --> Array<Array<integer>>
path --> Array<Array<integer>>
path --> Array<Array<integer>>
path --> Array<Array<integer>>
path --> Array<Array<integer>>
path --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }
path --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }
path = act.path --> Array<Array<integer>>
path = heap.path --> Array<Array<integer>>
path = this.heap.path --> Array<Array<integer>>
path.length --> integer
path.length --> integer
path.push --> [](Array<integer>) -> integer
path.push(tmp) --> integer
path[n] --> Array<integer>
path[n] --> Array<integer>
path[n] --> Array<integer>
path[n] --> Array<integer>
path[n][0] --> integer
path[n][0] --> integer
path[n][1] --> integer
path[n][1] --> integer
path[p] --> Array<integer>
path[p] --> Array<integer>
path[p][0] --> integer
path[p][1] --> integer
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place --> Array<integer>
place.length --> integer
place.length > 0 --> boolean
place[0] --> integer
place[0] --> integer
place[0] --> integer
place[0] --> integer
place[0] --> integer
place[0] --> integer
place[0] --> integer
place[0] --> integer
place[0] --> integer
place[0] --> integer
place[0] --> integer
place[1] --> integer
place[1] --> integer
place[1] --> integer
place[1] --> integer
place[1] --> integer
place[1] --> integer
place[1] --> integer
place[1] --> integer
place[1] --> integer
place[1] --> integer
place[1] --> integer
play --> integer
play --> integer
play || 1 --> integer
possible --> Array<Array<integer>>
possible --> Array<Array<integer>>
possible --> Array<Array<integer>>
possible --> Array<Array<integer>>
possible --> Array<Array<integer>>
possible --> Array<Array<integer>>
possible --> Array<Array<integer>>
possible --> Array<Array<integer>>
possible --> Array<Array<integer>>
possible --> Array<Array<integer>>
possible --> Array<Array<integer>>
possible --> Array<Array<integer>>
possible --> Array<Array<integer>>
possible --> Array<Array<integer>>
possible --> Array<Array<integer>>
possible --> Array<Array<integer>>
possible --> Array<Array<integer>>
possible --> Array<Array<integer>>
possible --> Array<Array<integer>>
possible --> Array<Array<integer>>
possible --> Array<Array<integer>>
possible = this.getBestPlaceSet(possible) --> Array<Array<integer>>
possible = this.heap.cpossible --> Array<Array<integer>>
possible = this.heap.upossible --> Array<Array<integer>>
possible = this.possiblePlace('white', null) --> Array<Array<integer>>
possible.length --> integer
possible.length --> integer
possible.length --> integer
possible.length --> integer
possible.length --> integer
possible.length == 0 --> boolean
possible.length > 0 && place.length > 0 --> boolean
possible.length > 0 --> boolean
possible.length > 0 --> boolean
possible[0] --> Array<integer>
possible[i] --> Array<integer>
possible[i] --> Array<integer>
possible[i] --> Array<integer>
possible[p] --> Array<integer>
possible[p] --> Array<integer>
r --> integer
r --> integer
r --> integer
r --> integer
r --> integer
r = this.AddAnnexPanel() --> integer
ret * 0.5 + nextValue * 0.5 --> float
ret * 0.5 --> float
ret * sym --> float
ret += (cv - uv) * 2 --> float
ret --> Array<Array<integer>>
ret --> Array<Array<integer>>
ret --> Array<Array<integer>>
ret --> Array<Array<integer>>
ret --> Array<Array<integer>>
ret --> Array<Array<integer>>
ret --> Array<Array<integer>>
ret --> Array<Array<integer>>
ret --> Array<Array<integer>>
ret --> Array<Array<string>>
ret --> Array<Array<string>>
ret --> Array<Array<string>>
ret --> Array<integer>
ret --> Array<integer>
ret --> Array<integer>
ret --> Array<integer>
ret --> Array<integer>
ret --> float
ret --> float
ret --> float
ret --> float
ret --> float
ret --> float
ret --> float
ret --> float
ret --> float
ret --> integer
ret = (cp.length - up.length) * 10 --> float
ret = 100000 --> float
ret = Math.round(ret * 0.5 + nextValue * 0.5) --> float
ret = best --> Array<Array<integer>>
ret = heap.value --> float
ret = middle --> Array<Array<integer>>
ret = possible --> Array<Array<integer>>
ret = possible[0] --> Array<integer>
ret = possible[p] --> Array<integer>
ret.push --> [](Array<integer>) -> integer
ret.push([ni, nj]) --> integer
ret[i] --> Array<string>
ret[i][j] --> string
ret[i][j] = obj[i][j] --> string
revColor --> string
revColor --> string
revColor --> string
revColor --> string
revColor --> string
revColor --> string
revColor --> string
revColor --> string
revColor --> string
revColor --> string
revColor --> string
revColor --> string
revColor = color --> string
s --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }
s --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }
source --> { _____cpp_receiver: void |  }
sym --> integer
sym --> integer
t --> integer
t --> integer
t --> integer
t == 100 --> boolean
t >= 0 --> boolean
this --> ___
this --> ___
this --> ___
this --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this --> {  | isConfigure: boolean }
this --> {  | isResult: boolean }
this --> { AddAnnexPanel: []() -> integer |  }
this --> { AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer |  }
this --> { Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer |  }
this --> { GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, button_names: Array<string> |  }
this --> { GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, button_names: Array<string> |  }
this --> { GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, showBoard: []() -> void, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: <<recursive>>, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, button_names: Array<string> | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  } }
this --> { GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, showBoard: []() -> void, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: <<recursive>>, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, button_names: Array<string> | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  } }
this --> { GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, showBoard: []() -> void, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: <<recursive>>, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, button_names: Array<string> | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  } }
this --> { GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, showBoard: []() -> void, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: <<recursive>>, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, button_names: Array<string> | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  } }
this --> { GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, showBoard: []() -> void, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: <<recursive>>, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, button_names: Array<string> | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  } }
this --> { GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, showBoard: []() -> void, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: <<recursive>>, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, button_names: Array<string> | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  } }
this --> { GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, showBoard: []() -> void, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: <<recursive>>, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, button_names: Array<string> | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  } }
this --> { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: <<recursive>>, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }
this --> { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: <<recursive>>, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }
this --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, Terminate: []() -> void | OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean }
this --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, AddFrame: []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer, Terminate: []() -> void | OnAppInitializing: []({ _____cpp_receiver: void |  }) -> boolean, OnAppTerminating: []({ _____cpp_receiver: void |  },boolean) -> boolean }
this --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
this --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
this --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
this --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
this --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
this --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
this --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
this --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
this --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
this --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
this --> { actionAtPoint: [](Array<integer>,string) -> void, bestPlace: [](Array<Array<integer>>) -> Array<integer>, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } |  }
this --> { actionAtPoint: [](Array<integer>,string) -> void, bestPlace: [](Array<Array<integer>>) -> Array<integer>, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } |  }
this --> { actionAtPoint: [](Array<integer>,string) -> void, bestPlace: [](Array<Array<integer>>) -> Array<integer>, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } |  }
this --> { actionAtPoint: [](Array<integer>,string) -> void, bestPlace: [](Array<Array<integer>>) -> Array<integer>, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } |  }
this --> { actionAtPoint: [](Array<integer>,string) -> void, bestPlace: [](Array<Array<integer>>) -> Array<integer>, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } |  }
this --> { actionAtPoint: [](Array<integer>,string) -> void, bestPlace: [](Array<Array<integer>>) -> Array<integer>, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } |  }
this --> { actionAtPoint: [](Array<integer>,string) -> void, bestPlace: [](Array<Array<integer>>) -> Array<integer>, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } |  }
this --> { annexForm: { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void } |  }
this --> { annexForm: { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void } |  }
this --> { annexForm: { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void } |  }
this --> { board: Array<Array<string>> |  }
this --> { board: Array<Array<string>> |  }
this --> { bounder: integer |  }
this --> { bounder: integer |  }
this --> { bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, board: Array<Array<string>>, bounder: integer | isInit: boolean, point: Array<___>, level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, isLock: boolean, isResult: boolean, currentColor: string, isConfigure: boolean, isUserTurn: boolean, playerNum: integer }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, board: Array<Array<string>>, bounder: integer | isInit: boolean, point: Array<___>, level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, isLock: boolean, isResult: boolean, currentColor: string, isConfigure: boolean, isUserTurn: boolean, playerNum: integer }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, board: Array<Array<string>>, bounder: integer | isInit: boolean, point: Array<___>, level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, isLock: boolean, isResult: boolean, currentColor: string, isConfigure: boolean, isUserTurn: boolean, playerNum: integer }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, board: Array<Array<string>>, bounder: integer | isInit: boolean, point: Array<___>, level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, isLock: boolean, isResult: boolean, currentColor: string, isConfigure: boolean, isUserTurn: boolean, playerNum: integer }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, board: Array<Array<string>>, bounder: integer | isInit: boolean, point: Array<___>, level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, isLock: boolean, isResult: boolean, currentColor: string, isConfigure: boolean, isUserTurn: boolean, playerNum: integer }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, board: Array<Array<string>>, bounder: integer | isInit: boolean, point: Array<___>, level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, isLock: boolean, isResult: boolean, currentColor: string, isConfigure: boolean, isUserTurn: boolean, playerNum: integer }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, board: Array<Array<string>>, bounder: integer | isInit: boolean, point: Array<___>, level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, isLock: boolean, isResult: boolean, currentColor: string, isConfigure: boolean, isUserTurn: boolean, playerNum: integer }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, board: Array<Array<string>>, bounder: integer | isInit: boolean, point: Array<___>, level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, isLock: boolean, isResult: boolean, currentColor: string, isConfigure: boolean, isUserTurn: boolean, playerNum: integer }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, board: Array<Array<string>>, bounder: integer | isInit: boolean, point: Array<___>, level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, isLock: boolean, isResult: boolean, currentColor: string, isConfigure: boolean, isUserTurn: boolean, playerNum: integer }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, board: Array<Array<string>>, bounder: integer | isInit: boolean, point: Array<___>, level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, isLock: boolean, isResult: boolean, currentColor: string, isConfigure: boolean, isUserTurn: boolean, playerNum: integer }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, board: Array<Array<string>>, bounder: integer | isInit: boolean, point: Array<___>, level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, isLock: boolean, isResult: boolean, currentColor: string, isConfigure: boolean, isUserTurn: boolean, playerNum: integer }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, board: Array<Array<string>>, bounder: integer | isInit: boolean, point: Array<___>, level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, isLock: boolean, isResult: boolean, currentColor: string, isConfigure: boolean, isUserTurn: boolean, playerNum: integer }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, board: Array<Array<string>>, bounder: integer | isInit: boolean, point: Array<___>, level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, isLock: boolean, isResult: boolean, currentColor: string, isConfigure: boolean, isUserTurn: boolean, playerNum: integer }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, board: Array<Array<string>>, bounder: integer | isInit: boolean, point: Array<___>, level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, isLock: boolean, isResult: boolean, currentColor: string, isConfigure: boolean, isUserTurn: boolean, playerNum: integer }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, board: Array<Array<string>>, bounder: integer | isInit: boolean, point: Array<___>, level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, isLock: boolean, isResult: boolean, currentColor: string, isConfigure: boolean, isUserTurn: boolean, playerNum: integer }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, board: Array<Array<string>>, bounder: integer | isInit: boolean, point: Array<___>, level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, isLock: boolean, isResult: boolean, currentColor: string, isConfigure: boolean, isUserTurn: boolean, playerNum: integer }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, board: Array<Array<string>>, bounder: integer | isInit: boolean, point: Array<___>, level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, isLock: boolean, isResult: boolean, currentColor: string, isConfigure: boolean, isUserTurn: boolean, playerNum: integer }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, board: Array<Array<string>>, bounder: integer | isInit: boolean, point: Array<___>, level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, isLock: boolean, isResult: boolean, currentColor: string, isConfigure: boolean, isUserTurn: boolean, playerNum: integer }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, board: Array<Array<string>>, bounder: integer | isInit: boolean, point: Array<___>, level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, isLock: boolean, isResult: boolean, currentColor: string, isConfigure: boolean, isUserTurn: boolean, playerNum: integer }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, board: Array<Array<string>>, bounder: integer | isInit: boolean, point: Array<___>, level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, isLock: boolean, isResult: boolean, currentColor: string, isConfigure: boolean, isUserTurn: boolean, playerNum: integer }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawMessage: []() -> void, endConfigure: []() -> void, isResult: boolean, isLock: boolean, isDrawing: boolean, isEnd: boolean, isConfigure: boolean, playerNum: integer, currentColor: string, actionAtPoint: [](Array<integer>,string) -> void, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, board: Array<Array<string>> | pendingDrawMessage: integer, isUserTurn: boolean }
this --> { drawPath: [](Array<Array<integer>>,string) -> void, setPoint: [](Array<integer>,string) -> void, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string } | level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } }
this --> { drawPath: [](Array<Array<integer>>,string) -> void, setPoint: [](Array<integer>,string) -> void, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string } | level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } }
this --> { drawPath: [](Array<Array<integer>>,string) -> void, setPoint: [](Array<integer>,string) -> void, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string } | level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } }
this --> { drawPath: [](Array<Array<integer>>,string) -> void, setPoint: [](Array<integer>,string) -> void, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string } | level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } }
this --> { drawPath: [](Array<Array<integer>>,string) -> void, setPoint: [](Array<integer>,string) -> void, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string } | level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } }
this --> { drawPath: [](Array<Array<integer>>,string) -> void, setPoint: [](Array<integer>,string) -> void, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string } | level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } }
this --> { drawPath: [](Array<Array<integer>>,string) -> void, setPoint: [](Array<integer>,string) -> void, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string } | level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } }
this --> { drawPath: [](Array<Array<integer>>,string) -> void, setPoint: [](Array<integer>,string) -> void, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string } | level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } }
this --> { drawPath: [](Array<Array<integer>>,string) -> void, setPoint: [](Array<integer>,string) -> void, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string } | level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } }
this --> { drawPath: [](Array<Array<integer>>,string) -> void, setPoint: [](Array<integer>,string) -> void, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string } | level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } }
this --> { drawPath: [](Array<Array<integer>>,string) -> void, setPoint: [](Array<integer>,string) -> void, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string } | level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } }
this --> { drawPath: [](Array<Array<integer>>,string) -> void, setPoint: [](Array<integer>,string) -> void, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string } | level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } }
this --> { drawPath: [](Array<Array<integer>>,string) -> void, setPoint: [](Array<integer>,string) -> void, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string } | level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } }
this --> { drawPath: [](Array<Array<integer>>,string) -> void, setPoint: [](Array<integer>,string) -> void, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string } | level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } }
this --> { drawPath: [](Array<Array<integer>>,string) -> void, setPoint: [](Array<integer>,string) -> void, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string } | level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } }
this --> { drawPath: [](Array<Array<integer>>,string) -> void, setPoint: [](Array<integer>,string) -> void, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string } | level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } }
this --> { drawPath: [](Array<Array<integer>>,string) -> void, setPoint: [](Array<integer>,string) -> void, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string } | level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } }
this --> { drawPath: [](Array<Array<integer>>,string) -> void, setPoint: [](Array<integer>,string) -> void, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string } | level: integer, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> } }
this --> { drawPoint: (Array<integer>,string) -> void, board: Array<Array<string>> |  }
this --> { drawPoint: (Array<integer>,string) -> void, board: Array<Array<string>> |  }
this --> { drawPoint: (Array<integer>,string) -> void, board: Array<Array<string>> | pendingDrawMessage: integer, isDrawing: boolean }
this --> { drawPoint: (Array<integer>,string) -> void, board: Array<Array<string>> | pendingDrawMessage: integer, isDrawing: boolean }
this --> { drawPoint: (Array<integer>,string) -> void, board: Array<Array<string>> | pendingDrawMessage: integer, isDrawing: boolean }
this --> { drawPoint: (Array<integer>,string) -> void, board: Array<Array<string>> | pendingDrawMessage: integer, isDrawing: boolean }
this --> { drawPoint: (Array<integer>,string) -> void, board: Array<Array<string>> | pendingDrawMessage: integer, isDrawing: boolean }
this --> { endConfigure: []() -> void, playerNum: integer, init: [](integer) -> void |  }
this --> { endConfigure: []() -> void, playerNum: integer, init: [](integer) -> void |  }
this --> { endConfigure: []() -> void, playerNum: integer, init: [](integer) -> void |  }
this --> { evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>> |  }
this --> { evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>> |  }
this --> { evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>> |  }
this --> { evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, bounder: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, getClone: [](Array<Array<string>>) -> Array<Array<string>>, board: Array<Array<string>>, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, level: integer |  }
this --> { evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, bounder: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, getClone: [](Array<Array<string>>) -> Array<Array<string>>, board: Array<Array<string>>, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, level: integer |  }
this --> { evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, bounder: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, getClone: [](Array<Array<string>>) -> Array<Array<string>>, board: Array<Array<string>>, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, level: integer |  }
this --> { evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, bounder: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, getClone: [](Array<Array<string>>) -> Array<Array<string>>, board: Array<Array<string>>, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, level: integer |  }
this --> { evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, bounder: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, getClone: [](Array<Array<string>>) -> Array<Array<string>>, board: Array<Array<string>>, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, level: integer |  }
this --> { evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, bounder: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, getClone: [](Array<Array<string>>) -> Array<Array<string>>, board: Array<Array<string>>, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, level: integer |  }
this --> { evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, bounder: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, getClone: [](Array<Array<string>>) -> Array<Array<string>>, board: Array<Array<string>>, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, level: integer |  }
this --> { evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, bounder: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, getClone: [](Array<Array<string>>) -> Array<Array<string>>, board: Array<Array<string>>, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, level: integer |  }
this --> { evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, bounder: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, getClone: [](Array<Array<string>>) -> Array<Array<string>>, board: Array<Array<string>>, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, level: integer |  }
this --> { evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, bounder: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, getClone: [](Array<Array<string>>) -> Array<Array<string>>, board: Array<Array<string>>, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, level: integer |  }
this --> { evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, bounder: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, getClone: [](Array<Array<string>>) -> Array<Array<string>>, board: Array<Array<string>>, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, level: integer |  }
this --> { evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, bounder: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, getClone: [](Array<Array<string>>) -> Array<Array<string>>, board: Array<Array<string>>, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, level: integer |  }
this --> { evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, bounder: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, getClone: [](Array<Array<string>>) -> Array<Array<string>>, board: Array<Array<string>>, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, level: integer |  }
this --> { evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, bounder: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, getClone: [](Array<Array<string>>) -> Array<Array<string>>, board: Array<Array<string>>, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, level: integer |  }
this --> { evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, bounder: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, getClone: [](Array<Array<string>>) -> Array<Array<string>>, board: Array<Array<string>>, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, level: integer |  }
this --> { evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, bounder: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, getClone: [](Array<Array<string>>) -> Array<Array<string>>, board: Array<Array<string>>, step: integer, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, level: integer |  }
this --> { getValue: [](Array<integer>,Array<Array<string>>) -> integer |  }
this --> { isContain: (Array<integer>,Array<Array<integer>>) -> boolean, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { isContain: (Array<integer>,Array<Array<integer>>) -> boolean, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { isContain: (Array<integer>,Array<Array<integer>>) -> boolean, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { isContain: (Array<integer>,Array<Array<integer>>) -> boolean, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { isContain: (Array<integer>,Array<Array<integer>>) -> boolean, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { isContain: (Array<integer>,Array<Array<integer>>) -> boolean, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { isContain: (Array<integer>,Array<Array<integer>>) -> boolean, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { isContain: (Array<integer>,Array<Array<integer>>) -> boolean, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { isContain: (Array<integer>,Array<Array<integer>>) -> boolean, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
this --> { isContain: (Array<integer>,Array<Array<integer>>) -> boolean, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, bounder: integer, directs: Array<Array<integer>>, board: Array<Array<string>> |  }
<<<<<<< HEAD
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], board: Array<Array<string>>, bounder: integer |  }
this --> { status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], board: Array<Array<string>>, bounder: integer |  }
this --> { status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], board: Array<Array<string>>, bounder: integer |  }
this --> { status: ObjectUnionType [{  | bc: integer, wc: integer, result: string }, {  | bc: integer, wc: integer, result: string }], board: Array<Array<string>>, bounder: integer |  }
=======
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { playerNum: integer, computerTurn: []() -> void, step: integer, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, board: Array<Array<string>>, bounder: integer | isDrawing: boolean, isUserTurn: boolean, currentColor: string, isResult: boolean, isLock: boolean, status: {  | bc: integer, wc: integer, result: string }, possible: Array<Array<integer>>, isEnd: boolean }
this --> { status: {  | bc: integer, wc: integer, result: string }, board: Array<Array<string>>, bounder: integer |  }
this --> { status: {  | bc: integer, wc: integer, result: string }, board: Array<Array<string>>, bounder: integer |  }
this --> { status: {  | bc: integer, wc: integer, result: string }, board: Array<Array<string>>, bounder: integer |  }
this --> { status: {  | bc: integer, wc: integer, result: string }, board: Array<Array<string>>, bounder: integer |  }
>>>>>>> 93324d42df7d25cd7f22c55fb2f150fb02644ea7
this --> { status: {  | bc: integer, wc: integer, result: string }, board: Array<Array<string>>, bounder: integer |  }
this --> { status: {  | bc: integer, wc: integer, result: string }, board: Array<Array<string>>, bounder: integer |  }
this --> { status: {  | bc: integer, wc: integer, result: string }, board: Array<Array<string>>, bounder: integer |  }
this.AddAnnexPanel --> []() -> integer
this.AddAnnexPanel --> []() -> integer
this.AddAnnexPanel = function() {
  var i = 0;
  while (i < BUTTON_COUNT) 
    {
      var button_name = new TizenLib.String(this.button_names[i]);
      var button = TizenLib.casts.Button_of_Control(this.GetControl(button_name));
      button.SetActionId(i);
      button.AddActionEventListener(this.ael);
      i++;
    }
  this.showBoard();
  var id = new TizenLib.String(IDC_LABEL1);
  this.labelPrint = TizenLib.casts.Label_of_Control(this.GetControl(id));
  this.labelPrint.SetTextHorizontalAlignment(ALIGNMENT_RIGHT);
  return E_SUCCESS;
} --> []() -> integer
this.AddAnnexPanel() --> integer
this.AddFrame --> []({ _____cpp_receiver: void, SetCurrentForm: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, AddControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: [](<<recursive>>) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> integer, Construct: []() -> integer |  }) -> integer
this.AddFrame(frame) --> integer
this.Construct --> []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer
this.Construct(path) --> integer
this.GetControl --> []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }
this.GetControl --> []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }
this.GetControl --> []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }
this.GetControl(button_name) --> { _____cpp_receiver: void |  }
this.GetControl(button_name) --> { _____cpp_receiver: void |  }
this.GetControl(id) --> { _____cpp_receiver: void |  }
this.OnActionPerformed --> []({ _____cpp_receiver: void |  },integer) -> void
this.OnActionPerformed = function(source, actionId) {
  var i = Math.floor(actionId / 8);
  var j = actionId - (i * 8);
  World.click(i, j);
  this.annexForm.showBoard();
  var displayText = "B: " + World.status.bc + " W: " + World.status.wc + " Result: " + World.status.result;
  var s = new TizenLib.String(displayText);
  this.annexForm.labelPrint.SetText(s);
  this.annexForm.Draw();
} --> []({ _____cpp_receiver: void |  },integer) -> void
this.OnAppInitializing --> []({ _____cpp_receiver: void |  }) -> boolean
this.OnAppInitializing = function(appRegistry) {
  var frame = new TizenLib.Frame();
  frame.Construct();
  this.AddFrame(frame);
  var form = new AnnexForm();
  form.init();
  frame.AddControl(form);
  frame.SetCurrentForm(form);
  return true;
} --> []({ _____cpp_receiver: void |  }) -> boolean
this.OnAppTerminating --> []({ _____cpp_receiver: void |  },boolean) -> boolean
this.OnAppTerminating = function(appRegistry, urgent) {
  var x = this;
  return true;
} --> []({ _____cpp_receiver: void |  },boolean) -> boolean
this.OnDraw --> []() -> integer
this.OnDraw = function() {
  var x = this;
  return E_SUCCESS;
} --> []() -> integer
this.OnInitializing --> []() -> integer
this.OnInitializing = function() {
  var r = E_SUCCESS;
  r = this.AddAnnexPanel();
  return r;
} --> []() -> integer
this.OnTerminating --> []() -> integer
this.OnTerminating = function() {
  var x = this;
  return E_SUCCESS;
} --> []() -> integer
this.actionAtPoint --> [](Array<integer>,string) -> void
this.actionAtPoint --> [](Array<integer>,string) -> void
this.actionAtPoint([i, j], this.currentColor) --> void
this.actionAtPoint(place, 'white') --> void
this.ael --> { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: <<recursive>>, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }
this.ael --> { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: <<recursive>>, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }
this.ael = new AnnexActionEventListener(this) --> { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: <<recursive>>, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }
this.annexForm --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
this.annexForm --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
this.annexForm --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
this.annexForm --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
this.annexForm = f --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, SetFormBackEventListener: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, OnFormBackRequested: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, GetControl: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> { _____cpp_receiver: void |  }, Draw: []() -> void, OnTerminating: []() -> integer, GetHeader: []() -> { _____cpp_receiver: void, SetTitleText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, SetStyle: [](integer) -> integer |  }, OnDraw: []() -> integer, SetFormBackEventListener: [](<<recursive>>) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer, OnInitializing: []() -> integer |  }) -> void |  }) -> void, Construct: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> integer | labelPrint: { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }, ael: { _____cpp_receiver: void, _____gen_cpp_proxy: void | annexForm: <<recursive>>, OnActionPerformed: []({ _____cpp_receiver: void |  },integer) -> void }, init: []() -> integer, OnInitializing: []() -> integer, OnTerminating: []() -> integer, OnDraw: []() -> integer, button_names: Array<string>, AddAnnexPanel: []() -> integer, showBoard: []() -> void }
this.annexForm.Draw --> []() -> void
this.annexForm.Draw() --> void
this.annexForm.labelPrint --> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }
this.annexForm.labelPrint.SetText --> []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void
this.annexForm.labelPrint.SetText(s) --> void
this.annexForm.showBoard --> []() -> void
this.annexForm.showBoard() --> void
this.bestPlace --> [](Array<Array<integer>>) -> Array<integer>
this.bestPlace(possible) --> Array<integer>
this.board --> Array<Array<string>>
this.board --> Array<Array<string>>
this.board --> Array<Array<string>>
this.board --> Array<Array<string>>
this.board --> Array<Array<string>>
this.board --> Array<Array<string>>
this.board --> Array<Array<string>>
this.board --> Array<Array<string>>
this.board --> Array<Array<string>>
this.board --> Array<Array<string>>
this.board --> Array<Array<string>>
this.board --> Array<Array<string>>
this.board --> Array<Array<string>>
this.board --> Array<Array<string>>
this.board --> Array<Array<string>>
this.board --> Array<Array<string>>
this.board --> Array<Array<string>>
this.board[3] --> Array<string>
this.board[3] --> Array<string>
this.board[3][3] --> string
this.board[3][3] = 'black' --> string
this.board[3][4] --> string
this.board[3][4] = 'white' --> string
this.board[4] --> Array<string>
this.board[4] --> Array<string>
this.board[4][3] --> string
this.board[4][3] = 'white' --> string
this.board[4][4] --> string
this.board[4][4] = 'black' --> string
this.board[i] --> Array<string>
this.board[i] --> Array<string>
this.board[i] --> Array<string>
this.board[i] --> Array<string>
this.board[i] --> Array<string>
this.board[i][j] --> string
this.board[i][j] --> string
this.board[i][j] --> string
this.board[i][j] --> string
this.board[i][j] --> string
this.board[i][j] = 'board' --> string
this.board[i][j] === 'black' --> boolean
this.board[i][j] === 'board' && !this.isEnd && this.isUserTurn && !this.isDrawing && !this.isLock && !this.isConfigure --> boolean
this.board[i][j] === 'board' --> boolean
this.board[i][j] === 'white' --> boolean
this.board[path[n][0]] --> Array<string>
this.board[path[n][0]][path[n][1]] --> string
this.board[path[n][0]][path[n][1]] = color --> string
this.board[place[0]] --> Array<string>
this.board[place[0]][place[1]] --> string
this.board[place[0]][place[1]] = color --> string
this.bounder --> integer
this.bounder --> integer
this.bounder --> integer
this.bounder --> integer
this.bounder --> integer
this.bounder --> integer
this.bounder --> integer
this.bounder --> integer
this.bounder --> integer
this.bounder --> integer
this.bounder --> integer
this.bounder --> integer
this.bounder --> integer
this.bounder --> integer
this.bounder --> integer
this.bounder --> integer
this.bounder --> integer
this.bounder --> integer
this.bounder --> integer
this.bounder --> integer
this.bounder --> integer
this.bounder --> integer
this.bpossible --> Array<___>
this.bpossible = [] --> Array<___>
this.button_names --> Array<string>
this.button_names --> Array<string>
this.button_names --> Array<string>
this.button_names = [IDC_BUTTON_00, IDC_BUTTON_01, IDC_BUTTON_02, IDC_BUTTON_03, IDC_BUTTON_04, IDC_BUTTON_05, IDC_BUTTON_06, IDC_BUTTON_07, IDC_BUTTON_10, IDC_BUTTON_11, IDC_BUTTON_12, IDC_BUTTON_13, IDC_BUTTON_14, IDC_BUTTON_15, IDC_BUTTON_16, IDC_BUTTON_17, IDC_BUTTON_20, IDC_BUTTON_21, IDC_BUTTON_22, IDC_BUTTON_23, IDC_BUTTON_24, IDC_BUTTON_25, IDC_BUTTON_26, IDC_BUTTON_27, IDC_BUTTON_30, IDC_BUTTON_31, IDC_BUTTON_32, IDC_BUTTON_33, IDC_BUTTON_34, IDC_BUTTON_35, IDC_BUTTON_36, IDC_BUTTON_37, IDC_BUTTON_40, IDC_BUTTON_41, IDC_BUTTON_42, IDC_BUTTON_43, IDC_BUTTON_44, IDC_BUTTON_45, IDC_BUTTON_46, IDC_BUTTON_47, IDC_BUTTON_50, IDC_BUTTON_51, IDC_BUTTON_52, IDC_BUTTON_53, IDC_BUTTON_54, IDC_BUTTON_55, IDC_BUTTON_56, IDC_BUTTON_57, IDC_BUTTON_60, IDC_BUTTON_61, IDC_BUTTON_62, IDC_BUTTON_63, IDC_BUTTON_64, IDC_BUTTON_65, IDC_BUTTON_66, IDC_BUTTON_67, IDC_BUTTON_70, IDC_BUTTON_71, IDC_BUTTON_72, IDC_BUTTON_73, IDC_BUTTON_74, IDC_BUTTON_75, IDC_BUTTON_76, IDC_BUTTON_77] --> Array<string>
this.button_names[i * 8 + j] --> string
this.button_names[i] --> string
this.canRevert --> [](Array<integer>,string,Array<Array<string>>) -> boolean
this.canRevert --> [](Array<integer>,string,Array<Array<string>>) -> boolean
this.canRevert([i, j], this.currentColor, null) --> boolean
this.canRevert([ni, nj], color, board) && !this.isContain([ni, nj], ret) --> boolean
this.canRevert([ni, nj], color, board) --> boolean
this.color --> string
this.color = 'board' --> string
this.colorCount --> Map<integer>
this.colorCount = {} --> Map<integer>
this.computerTurn --> []() -> void
this.computerTurn() --> void
this.cpossible --> Array<Array<integer>>
this.cpossible = [] --> Array<Array<integer>>
this.currentColor --> string
this.currentColor --> string
this.currentColor --> string
this.currentColor --> string
this.currentColor --> string
this.currentColor --> string
this.currentColor --> string
this.currentColor --> string
this.currentColor --> string
this.currentColor --> string
this.currentColor = 'black' --> string
this.currentColor = 'white' --> string
this.currentColor = 'white' --> string
this.currentColor == 'black' --> boolean
this.currentColor == 'white' --> boolean
this.directs --> Array<Array<integer>>
this.directs --> Array<Array<integer>>
this.directs --> Array<Array<integer>>
this.directs --> Array<Array<integer>>
this.directs --> Array<Array<integer>>
this.directs --> Array<Array<integer>>
this.directs --> Array<Array<integer>>
this.directs --> Array<Array<integer>>
this.directs --> Array<Array<integer>>
this.directs --> Array<Array<integer>>
this.directs --> Array<Array<integer>>
this.directs.length --> integer
this.directs.length --> integer
this.directs.length --> integer
this.directs[n] --> Array<integer>
this.directs[n] --> Array<integer>
this.directs[n] --> Array<integer>
this.directs[n] --> Array<integer>
this.directs[n] --> Array<integer>
this.directs[n] --> Array<integer>
this.directs[n] --> Array<integer>
this.directs[n] --> Array<integer>
this.directs[n][0] --> integer
this.directs[n][0] --> integer
this.directs[n][0] --> integer
this.directs[n][0] --> integer
this.directs[n][1] --> integer
this.directs[n][1] --> integer
this.directs[n][1] --> integer
this.directs[n][1] --> integer
this.doRevert --> []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>
this.doRevert --> []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>
this.doRevert(heap, board) --> Array<Array<string>>
this.doRevert(heap, board) --> Array<Array<string>>
this.drawMessage --> []() -> void
this.drawMessage --> []() -> void
this.drawMessage() --> void
this.drawMessage() --> void
this.drawPath --> [](Array<Array<integer>>,string) -> void
this.drawPath(path, color) --> void
this.drawPoint --> (Array<integer>,string) -> void
this.drawPoint --> (Array<integer>,string) -> void
this.drawPoint([path[n][0], path[n][1]], color) --> void
this.drawPoint(place, color) --> void
this.endConfigure --> []() -> void
this.endConfigure --> []() -> void
this.endConfigure --> []() -> void
this.endConfigure() --> void
this.endConfigure() --> void
this.endConfigure() --> void
this.evaluate --> [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float
this.evaluate --> [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float
this.evaluate --> [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float
this.evaluate(possible[p], null, null, 0, null) --> float
this.evaluate(ret, null, null, 0, null) --> float
this.evaluate(up[p], revColor, board, level - 1, heap) --> float
this.getBestPlaceSet --> [](Array<Array<integer>>) -> Array<Array<integer>>
this.getBestPlaceSet --> [](Array<Array<integer>>) -> Array<Array<integer>>
this.getBestPlaceSet(possible) --> Array<Array<integer>>
this.getBestPlaceSet(up) --> Array<Array<integer>>
this.getClone --> [](Array<Array<string>>) -> Array<Array<string>>
this.getClone(board) --> Array<Array<string>>
this.getRevertPath --> [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }
this.getRevertPath --> [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }
this.getRevertPath(place, color, board) --> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }
this.getRevertPath(place, color, null) --> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }
this.getValue --> [](Array<integer>,Array<Array<string>>) -> integer
this.getValue --> [](Array<integer>,Array<Array<string>>) -> integer
this.getValue --> [](Array<integer>,Array<Array<string>>) -> integer
this.getValue([i, j], board) --> integer
this.getValue([i, j], board) --> integer
this.getValue(possible[i], null) --> integer
this.heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap = heap --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap = new Heap() --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap = new Heap() --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap = this.heap.nextLevel[mString(place[0]) + mString(place[1])] --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap.color --> string
this.heap.color --> string
this.heap.color --> string
this.heap.color --> string
this.heap.color == 'white' --> boolean
this.heap.color == 'white' --> boolean
this.heap.color == color --> boolean
this.heap.color == this.currentColor --> boolean
this.heap.colorCount --> Map<integer>
this.heap.colorCount --> Map<integer>
this.heap.colorCount['black'] --> integer
this.heap.colorCount['white'] --> integer
this.heap.cpossible --> Array<Array<integer>>
this.heap.cpossible --> Array<Array<integer>>
this.heap.cpossible --> Array<Array<integer>>
this.heap.nextLevel --> Map<{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }>
this.heap.nextLevel[mString(place[0]) + mString(place[1])] --> {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }
this.heap.path --> Array<Array<integer>>
this.heap.upossible --> Array<Array<integer>>
this.heap.upossible --> Array<Array<integer>>
this.heap.upossible --> Array<Array<integer>>
this.heap.value --> float
this.heap.value --> float
this.heap.value --> float
this.heap.value --> float
this.heap.value > -1 && this.heap.color == color --> boolean
this.heap.value > -1 && this.heap.color == this.currentColor --> boolean
this.heap.value > -1 --> boolean
this.heap.value > -1 --> boolean
this.heap.value > -1 --> boolean
this.heap.value > -1 --> boolean
this.init --> []() -> integer
this.init --> [](integer) -> void
this.init = function() {
  var path = new TizenLib.String("IDL_FORM");
  var r = this.Construct(path);
  return r;
} --> []() -> integer
this.init(this.playerNum) --> void
this.isConfigure && !this.isEnd && !this.isDrawing && !this.isLock --> boolean
this.isConfigure && this.isEnd && !this.isDrawing && this.isLock && !this.isResult --> boolean
this.isConfigure --> boolean
this.isConfigure --> boolean
this.isConfigure --> boolean
this.isConfigure --> boolean
this.isConfigure --> boolean
this.isConfigure = false --> boolean
this.isConfigure = false --> boolean
this.isContain --> (Array<integer>,Array<Array<integer>>) -> boolean
this.isContain([ni, nj], ret) --> boolean
this.isDrawing --> boolean
this.isDrawing --> boolean
this.isDrawing --> boolean
this.isDrawing --> boolean
this.isDrawing --> boolean
this.isDrawing = false --> boolean
this.isDrawing = true --> boolean
this.isEnd && !this.isDrawing && this.isLock && !this.isResult --> boolean
this.isEnd --> boolean
this.isEnd --> boolean
this.isEnd --> boolean
this.isEnd --> boolean
this.isEnd --> boolean
this.isEnd = ((bpossible.length == 0 && wpossible.length == 0) || (this.step == 64)) --> boolean
this.isInit --> boolean
this.isInit = true --> boolean
this.isLock && !this.isResult --> boolean
this.isLock --> boolean
this.isLock --> boolean
this.isLock --> boolean
this.isLock --> boolean
this.isLock --> boolean
this.isLock = false --> boolean
this.isLock = true --> boolean
this.isResult --> boolean
this.isResult --> boolean
this.isResult --> boolean
this.isResult --> boolean
this.isResult = false --> boolean
this.isResult = false --> boolean
this.isResult = true --> boolean
this.isUserTurn && !this.isDrawing && !this.isLock && !this.isConfigure --> boolean
this.isUserTurn --> boolean
this.isUserTurn --> boolean
this.isUserTurn --> boolean
this.isUserTurn --> boolean
this.isUserTurn --> boolean
this.isUserTurn --> boolean
this.isUserTurn --> boolean
this.isUserTurn --> boolean
this.isUserTurn = false --> boolean
this.isUserTurn = false --> boolean
this.isUserTurn = true --> boolean
this.isUserTurn = true --> boolean
this.isUserTurn ? "true" : "false" --> string
this.isUserTurn ? "true" : "false" --> string
this.isUserTurn ? "true" : "false" --> string
this.labelPrint --> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }
this.labelPrint --> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }
this.labelPrint --> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }
this.labelPrint = TizenLib.casts.Label_of_Control(this.GetControl(id)) --> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }
this.labelPrint = null --> { _____cpp_receiver: void, SetTextHorizontalAlignment: [](integer) -> void, SetText: []({ _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }) -> void |  }
this.labelPrint.SetTextHorizontalAlignment --> [](integer) -> void
this.labelPrint.SetTextHorizontalAlignment(ALIGNMENT_RIGHT) --> void
this.level += 1 --> integer
this.level += 1 --> integer
this.level += 2 --> integer
this.level --> integer
this.level --> integer
this.level --> integer
this.level --> integer
this.level --> integer
this.level = 3 --> integer
this.nextLevel --> Map<{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }>
this.nextLevel = {} --> Map<{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }>
this.path --> Array<Array<integer>>
this.path = null --> Array<Array<integer>>
this.pendingDrawMessage + 1 --> integer
this.pendingDrawMessage - 1 --> integer
this.pendingDrawMessage --> integer
this.pendingDrawMessage --> integer
this.pendingDrawMessage --> integer
this.pendingDrawMessage --> integer
this.pendingDrawMessage --> integer
this.pendingDrawMessage = this.pendingDrawMessage + 1 --> integer
this.pendingDrawMessage = this.pendingDrawMessage - 1 --> integer
this.pendingDrawMessage > 0 --> boolean
this.place --> Array<integer>
this.place = null --> Array<integer>
this.playerNum --> integer
this.playerNum --> integer
this.playerNum --> integer
this.playerNum --> integer
this.playerNum --> integer
this.playerNum --> integer
this.playerNum = play || 1 --> integer
this.playerNum == 1 && this.currentColor == 'white' --> boolean
this.playerNum == 1 --> boolean
this.playerNum == 1 --> boolean
this.point --> Array<___>
this.point = [] --> Array<___>
this.possible --> Array<Array<integer>>
this.possible = tpossible --> Array<Array<integer>>
this.possiblePlace --> [](string,Array<Array<string>>) -> Array<Array<integer>>
this.possiblePlace --> [](string,Array<Array<string>>) -> Array<Array<integer>>
this.possiblePlace --> [](string,Array<Array<string>>) -> Array<Array<integer>>
this.possiblePlace --> [](string,Array<Array<string>>) -> Array<Array<integer>>
this.possiblePlace --> [](string,Array<Array<string>>) -> Array<Array<integer>>
this.possiblePlace('black', null) --> Array<Array<integer>>
this.possiblePlace('white', null) --> Array<Array<integer>>
this.possiblePlace('white', null) --> Array<Array<integer>>
this.possiblePlace(color, board) --> Array<Array<integer>>
this.possiblePlace(revColor, board) --> Array<Array<integer>>
this.setPoint --> [](Array<integer>,string) -> void
this.setPoint(place, color) --> void
this.showBoard --> []() -> void
this.showBoard --> []() -> void
this.showBoard = function() {
  var i, j;
  for (i = 0; i < World.bounder; i++) 
    {
      for (j = 0; j < World.bounder; j++) 
        {
          var c = "-";
          if (World.board[i][j] === 'black') 
          c = "B"; else if (World.board[i][j] === 'white') 
          c = "W";
          var name = this.button_names[i * 8 + j];
          var button_name = new TizenLib.String(name);
          var button = TizenLib.casts.Button_of_Control(this.GetControl(button_name));
          var x = new TizenLib.String(c);
          button.SetText(x);
        }
    }
} --> []() -> void
this.showBoard() --> void
this.status --> {  | bc: integer, wc: integer, result: string }
this.status --> {  | bc: integer, wc: integer, result: string }
this.status --> {  | bc: integer, wc: integer, result: string }
this.status --> {  | bc: integer, wc: integer, result: string }
this.status --> {  | bc: integer, wc: integer, result: string }
this.status --> {  | bc: integer, wc: integer, result: string }
this.status --> {  | bc: integer, wc: integer, result: string }
this.status = {bc: bc, wc: wc, result: "Unknown"} --> {  | bc: integer, wc: integer, result: string }
this.status.bc --> integer
this.status.result --> string
this.status.result --> string
this.status.result --> string
this.status.result --> string
this.status.result = "Computer wins" --> string
this.status.result = "Draw" --> string
this.status.result = "Player 1 wins" --> string
this.status.wc --> integer
this.step += 1 --> integer
this.step --> integer
this.step --> integer
this.step --> integer
this.step --> integer
this.step --> integer
this.step --> integer
this.step --> integer
this.step = 4 --> integer
this.step == 64 --> boolean
this.step >= 50 --> boolean
this.step >= 53 --> boolean
this.step >= 55 --> boolean
this.upossible --> Array<Array<integer>>
this.upossible = [] --> Array<Array<integer>>
this.value --> float
this.value = -1 --> float
tmp --> Array<integer>
tmp --> Array<integer>
tmp --> Array<integer>
tmp --> Map<___>
tmp = tpath.pop() --> Array<integer>
toEndLevel --> integer
toEndLevel --> integer
toEndLevel --> integer
tpath --> Array<Array<integer>>
tpath --> Array<Array<integer>>
tpath --> Array<Array<integer>>
tpath --> Array<Array<integer>>
tpath.length --> integer
tpath.length > 0 --> boolean
tpath.pop --> []() -> Array<integer>
tpath.pop() --> Array<integer>
tpath.push --> [](Array<integer>) -> integer
tpath.push([ni, nj]) --> integer
tpossible --> Array<Array<integer>>
tpossible --> Array<Array<integer>>
tpossible --> Array<Array<integer>>
tpossible --> Array<Array<integer>>
tpossible = wpossible --> Array<Array<integer>>
tpossible = wpossible --> Array<Array<integer>>
true --> boolean
true --> boolean
true --> boolean
true --> boolean
true --> boolean
true --> boolean
true --> boolean
true --> boolean
true --> boolean
true --> boolean
true --> boolean
uc --> integer
uc --> integer
uc --> integer
uc++ --> integer
up --> Array<Array<integer>>
up --> Array<Array<integer>>
up --> Array<Array<integer>>
up --> Array<Array<integer>>
up --> Array<Array<integer>>
up --> Array<Array<integer>>
up --> Array<Array<integer>>
up --> Array<Array<integer>>
up --> Array<Array<integer>>
up --> Array<Array<integer>>
up --> Array<Array<integer>>
up --> Array<Array<integer>>
up --> Array<Array<integer>>
up --> Array<Array<integer>>
up --> Array<Array<integer>>
up = cp --> Array<Array<integer>>
up = heap.upossible --> Array<Array<integer>>
up = this.getBestPlaceSet(up) --> Array<Array<integer>>
up = this.possiblePlace(revColor, board) --> Array<Array<integer>>
up.length --> integer
up.length --> integer
up.length --> integer
up.length --> integer
up.length --> integer
up.length --> integer
up.length --> integer
up.length == 0 && cp.length > 0 --> boolean
up.length == 0 --> boolean
up.length == 0 --> boolean
up.length > 0 --> boolean
up.length > 0 --> boolean
up.length > 0 || cp.length > 0 --> boolean
up[p] --> Array<integer>
urgent --> boolean
uv += this.getValue([i, j], board) --> integer
uv --> integer
uv --> integer
uv --> integer
v --> float
v --> float
v --> float
v > value --> boolean
value --> float
value --> float
value --> float
value = v --> float
w --> {  | board: Array<Array<string>>, bounder: integer, boardview: string, messageview: string, result: string, isEnd: boolean, endMessage: string, isUserTurn: boolean, isDrawing: boolean, isLock: boolean, isInit: boolean, isConfigure: boolean, isResult: boolean, level: integer, hasHelp: boolean, hasInit: boolean, playerNum: integer, currentColor: string, step: integer, point: Array<___>, directs: Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, possible: Array<Array<integer>>, pendingDrawMessage: integer, status: {  | bc: integer, wc: integer, result: string }, init: [](integer) -> void, endConfigure: []() -> void, startOver: []() -> void, actionAtPoint: [](Array<integer>,string) -> void, setPoint: [](Array<integer>,string) -> void, drawPoint: (Array<integer>,string) -> void, drawPath: [](Array<Array<integer>>,string) -> void, drawMessage: []() -> void, closeResult: []() -> void, displayBoard: []() -> void, click: [](integer,integer) -> void, computerTurn: []() -> void, isContain: (Array<integer>,Array<Array<integer>>) -> boolean, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, getClone: [](Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, bestPlace: [](Array<Array<integer>>) -> Array<integer> }
w --> {  | board: Array<Array<string>>, bounder: integer, boardview: string, messageview: string, result: string, isEnd: boolean, endMessage: string, isUserTurn: boolean, isDrawing: boolean, isLock: boolean, isInit: boolean, isConfigure: boolean, isResult: boolean, level: integer, hasHelp: boolean, hasInit: boolean, playerNum: integer, currentColor: string, step: integer, point: Array<___>, directs: Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, possible: Array<Array<integer>>, pendingDrawMessage: integer, status: {  | bc: integer, wc: integer, result: string }, init: [](integer) -> void, endConfigure: []() -> void, startOver: []() -> void, actionAtPoint: [](Array<integer>,string) -> void, setPoint: [](Array<integer>,string) -> void, drawPoint: (Array<integer>,string) -> void, drawPath: [](Array<Array<integer>>,string) -> void, drawMessage: []() -> void, closeResult: []() -> void, displayBoard: []() -> void, click: [](integer,integer) -> void, computerTurn: []() -> void, isContain: (Array<integer>,Array<Array<integer>>) -> boolean, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, getClone: [](Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, bestPlace: [](Array<Array<integer>>) -> Array<integer> }
wc --> integer
wc --> integer
wc --> integer
wc --> integer
wc --> integer
wc --> integer
wc = count['white'] --> integer
wc = this.heap.colorCount['white'] --> integer
wpossible --> Array<Array<integer>>
wpossible --> Array<Array<integer>>
wpossible --> Array<Array<integer>>
wpossible --> Array<Array<integer>>
wpossible --> Array<Array<integer>>
wpossible --> Array<Array<integer>>
wpossible --> Array<Array<integer>>
wpossible --> Array<Array<integer>>
wpossible = this.heap.cpossible --> Array<Array<integer>>
wpossible = this.heap.upossible --> Array<Array<integer>>
wpossible = this.possiblePlace('white', null) --> Array<Array<integer>>
wpossible.length --> integer
wpossible.length --> integer
wpossible.length == 0 --> boolean
wpossible.length > 0 --> boolean
x --> ___
x --> ___
x --> ___
x --> ___
x --> ___
x --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }
x --> { _____cpp_receiver: void, _____gen_cpp_proxy: void, IndexOf: [](string,integer) -> integer, Clear: []() -> void, Contains: [](<<recursive>>) -> boolean, SubString: [](integer) -> <<recursive>>, IsEmpty: []() -> boolean, CompareTo: [](<<recursive>>) -> integer, GetPointer: []() -> string, Append: [](<<recursive>>) -> integer |  }
y --> ___
{'black': 0, 'white': 0} --> Map<integer>
{bc: 0, wc: 0, result: "Unknown"} --> {  | bc: integer, wc: integer, result: string }
{bc: bc, wc: wc, result: "Unknown"} --> {  | bc: integer, wc: integer, result: string }
{board: [[], [], [], [], [], [], [], []], bounder: 8, boardview: 'board', messageview: 'message', result: 'result', isEnd: false, endMessage: '', isUserTurn: true, isDrawing: false, isLock: false, isInit: false, isConfigure: false, isResult: false, level: 3, hasHelp: false, hasInit: false, playerNum: 1, currentColor: 'black', step: 4, point: null, directs: [[1, 0], [1, 1], [1, -1], [0, 1], [0, -1], [-1, 0], [-1, 1], [-1, -1]], heap: new Heap(), possible: null, pendingDrawMessage: 0, status: {bc: 0, wc: 0, result: "Unknown"}, init: function _init(play) {
  this.playerNum = play || 1;
  var i;
  var j;
  for (i = 0; i < this.bounder; i++) 
    {
      for (j = 0; j < this.bounder; j++) 
        {
          this.board[i][j] = 'board';
        }
    }
  this.board[3][3] = 'black';
  this.board[4][4] = 'black';
  this.board[3][4] = 'white';
  this.board[4][3] = 'white';
  this.isUserTurn = true;
  this.isLock = false;
  this.isConfigure = false;
  this.isResult = false;
  this.currentColor = 'white';
  this.step = 4;
  this.level = 3;
  this.point = [];
  this.heap = new Heap();
  this.isInit = true;
  this.endConfigure();
  this.drawMessage();
}, endConfigure: function() {
  this.isConfigure = false;
}, startOver: function() {
  this.init(this.playerNum);
  this.endConfigure();
}, actionAtPoint: function(place, color) {
  console.log("DEBUG: actionAtPoint" + place[0] + place[1] + color);
  var path = [];
  this.heap = this.heap.nextLevel[mString(place[0]) + mString(place[1])];
  if (!this.heap) 
  this.heap = new Heap();
  if (this.heap.value > -1 && this.heap.color == color) 
  {
    path = this.heap.path;
  } else {
    var act = this.getRevertPath(place, color, null);
    path = act.path;
    var heap = new Heap();
    heap.color = color;
    heap.path = path;
    heap.place = place;
    this.heap = heap;
  }
  this.step += 1;
  if (this.step >= 50) 
  this.level += 1; else if (this.step >= 53) 
  this.level += 1; else if (this.step >= 55) 
  this.level += 2;
  this.setPoint(place, color);
  this.drawPath(path, color);
}, setPoint: function(place, color) {
  this.board[place[0]][place[1]] = color;
  this.drawPoint(place, color);
}, drawPoint: function(place, color) {
}, drawPath: function(path, color) {
  this.isDrawing = true;
  var n;
  for (n = 0; n < path.length; n++) 
    {
      this.board[path[n][0]][path[n][1]] = color;
      this.drawPoint([path[n][0], path[n][1]], color);
    }
  this.pendingDrawMessage = this.pendingDrawMessage + 1;
}, drawMessage: function() {
  console.log("DEBUG: drawMessage " + this.playerNum + this.currentColor + (this.isUserTurn ? "true" : "false"));
  var bc = 0;
  var wc = 0;
  if (this.heap.value > -1) 
  {
    bc = this.heap.colorCount['black'];
    wc = this.heap.colorCount['white'];
  } else {
    var count = {'black': 0, 'white': 0};
    var i, j;
    for (i = 0; i < this.bounder; i++) 
      {
        for (j = 0; j < this.bounder; j++) 
          {
            count[this.board[i][j]] += 1;
          }
      }
    bc = count['black'];
    wc = count['white'];
  }
  var bpossible;
  var wpossible;
  this.status = {bc: bc, wc: wc, result: "Unknown"};
  if (this.heap.value > -1 && this.heap.color == this.currentColor) 
  {
    if (this.heap.color == 'white') 
    {
      bpossible = this.heap.upossible;
      wpossible = this.heap.cpossible;
    } else {
      wpossible = this.heap.upossible;
      bpossible = this.heap.cpossible;
    }
  } else {
    wpossible = this.possiblePlace('white', null);
    bpossible = this.possiblePlace('black', null);
  }
  this.isEnd = ((bpossible.length == 0 && wpossible.length == 0) || (this.step == 64));
  if (!this.isEnd) 
  {
    var tpossible = bpossible;
    if (this.currentColor == 'black') 
    {
      if (wpossible.length > 0) 
      {
        this.currentColor = 'white';
        tpossible = wpossible;
      }
    } else {
      if (bpossible.length > 0) 
      {
        this.currentColor = 'black';
      } else {
        tpossible = wpossible;
      }
    }
    this.possible = tpossible;
    if (this.playerNum == 1 && this.currentColor == 'white') 
    {
      this.isUserTurn = false;
      this.computerTurn();
    } else {
      this.isUserTurn = true;
    }
  } else {
    if (bc > wc) 
    {
      console.log("Player 1 wins");
      this.status.result = "Player 1 wins";
    } else if (bc == wc) 
    {
      console.log("Draw");
      this.status.result = "Draw";
    } else {
      console.log("Computer wins");
      this.status.result = "Computer wins";
    }
    this.isLock = true;
    this.isResult = true;
  }
  console.log("DEBUG: drawMessage exiting " + this.playerNum + this.currentColor + (this.isUserTurn ? "true" : "false"));
  this.isDrawing = false;
}, closeResult: function() {
  this.isResult = false;
}, displayBoard: function() {
  console.log("DEBUG: displayBoard");
  var i, j;
  for (i = 0; i < this.bounder; i++) 
    {
      var line = "";
      for (j = 0; j < this.bounder; j++) 
        {
          var c = "_";
          if (this.board[i][j] === 'black') 
          c = "B"; else if (this.board[i][j] === 'white') 
          c = "W";
          line = line + c;
        }
      console.log(line);
    }
  console.log("BC = " + this.status.bc + ", WC = " + this.status.wc + ", Result = " + this.status.result);
  console.log("");
}, click: function(i, j) {
  console.log("DEBUG: click " + i + j + " " + (this.isUserTurn ? "true" : "false"));
  if (this.board[i][j] === 'board' && !this.isEnd && this.isUserTurn && !this.isDrawing && !this.isLock && !this.isConfigure) 
  {
    if (this.canRevert([i, j], this.currentColor, null)) 
    {
      this.actionAtPoint([i, j], this.currentColor);
      if (this.playerNum == 1) 
      this.isUserTurn = false;
    } else {
    }
  } else if ((this.isConfigure && !this.isEnd && !this.isDrawing && !this.isLock) || (this.isConfigure && this.isEnd && !this.isDrawing && this.isLock && !this.isResult)) 
  {
    this.endConfigure();
  }
  while (this.pendingDrawMessage > 0) 
    {
      this.pendingDrawMessage = this.pendingDrawMessage - 1;
      this.drawMessage();
    }
}, computerTurn: function() {
  console.log("DEBUG: computerTurn");
  var possible;
  if (this.heap.value > -1) 
  {
    if (this.heap.color == 'white') 
    {
      possible = this.heap.cpossible;
    } else {
      possible = this.heap.upossible;
    }
  } else {
    possible = this.possiblePlace('white', null);
  }
  var place = this.bestPlace(possible);
  if (possible.length > 0 && place.length > 0) 
  {
    this.actionAtPoint(place, 'white');
  }
}, isContain: function(place, _array) {
  var heat = _array || [];
  var i = 0;
  for (i = 0; i < heat.length; i++) 
    {
      if (heat[i][0] == place[0] && heat[i][1] == place[1]) 
      {
        return true;
      }
    }
  return false;
}, possiblePlace: function(color, _board) {
  var ret = [];
  var tmp = {};
  var revColor = ((color == 'white') ? 'black' : 'white');
  var board = _board ? _board : this.board;
  var i, j, n;
  for (i = 0; i < this.bounder; i++) 
    {
      for (j = 0; j < this.bounder; j++) 
        {
          if (board[i][j] === revColor) 
          {
            for (n = 0; n < this.directs.length; n++) 
              {
                var ni = i + this.directs[n][0];
                var nj = j + this.directs[n][1];
                if (ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === 'board') 
                {
                  if (this.canRevert([ni, nj], color, board) && !this.isContain([ni, nj], ret)) 
                  {
                    ret.push([ni, nj]);
                  }
                }
              }
          }
        }
    }
  return ret;
}, canRevert: function(place, color, _board) {
  var i = place[0];
  var j = place[1];
  var revColor = ((color == 'white') ? 'black' : 'white');
  var board = _board ? _board : this.board;
  var n;
  for (n = 0; n < this.directs.length; n++) 
    {
      var di = this.directs[n][0];
      var dj = this.directs[n][1];
      var ni = i + di;
      var nj = j + dj;
      while (ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === revColor) 
        {
          ni += di;
          nj += dj;
          if (ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === color) 
          {
            return true;
          }
        }
    }
  return false;
}, getClone: function(obj) {
  var ret = [[], [], [], [], [], [], [], []];
  var i, j;
  for (i = 0; i < this.bounder; i++) 
    {
      for (j = 0; j < this.bounder; j++) 
        {
          ret[i][j] = obj[i][j];
        }
    }
  return ret;
}, getRevertPath: function(place, color, _board) {
  var i = place[0];
  var j = place[1];
  var revColor = ((color == 'white') ? 'black' : 'white');
  var board = _board ? _board : this.board;
  var path = [];
  var n;
  for (n = 0; n < this.directs.length; n++) 
    {
      var ni = i + this.directs[n][0];
      var nj = j + this.directs[n][1];
      var tpath = [];
      while (ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === revColor) 
        {
          tpath.push([ni, nj]);
          ni += this.directs[n][0];
          nj += this.directs[n][1];
          if (ni >= 0 && ni < this.bounder && nj >= 0 && nj < this.bounder && board[ni][nj] === color) 
          {
            var tmp = [0, 0];
            while (tpath.length > 0) 
              {
                tmp = tpath.pop();
                path.push(tmp);
              }
          }
        }
    }
  return {place: place, path: path, color: color};
}, doRevert: function(action, _board) {
  var color = action.color;
  var board = _board ? _board : this.board;
  var path = action.path;
  var p;
  for (p = 0; p < path.length; p++) 
    {
      board[path[p][0]][path[p][1]] = color;
    }
  return board;
}, getValue: function(place, _board) {
  var ret = 0;
  var board = _board ? _board : this.board;
  var i = place[0];
  var j = place[1];
  var mtable = [[100, -50, 40, 30, 30, 40, -50, 100], [-50, -30, 5, 1, 1, 5, -30, -50], [40, 5, 20, 10, 10, 20, 5, 40], [30, 1, 10, 0, 0, 10, 1, 30], [30, 1, 10, 0, 0, 10, 1, 30], [40, 5, 20, 10, 10, 20, 5, 40], [-50, -30, 5, 1, 1, 5, -30, -50], [100, -50, 40, 30, 30, 40, -50, 100]];
  return mtable[i][j];
}, evaluate: function(place, _color, _board, _level, _heap) {
  var ret = -100000;
  var level = _level ? _level : this.level;
  var heap = _heap ? _heap : this.heap;
  if (!heap.nextLevel[mString(place[0]) + mString(place[1])]) 
  {
    heap.nextLevel[mString(place[0]) + mString(place[1])] = new Heap();
  }
  heap = heap.nextLevel[mString(place[0]) + mString(place[1])];
  var toEndLevel = 64 - this.step;
  level = (level > toEndLevel ? toEndLevel : level);
  var nextValue = 0.0;
  var color = _color || 'white';
  var board = _board ? _board : this.board;
  board = this.getClone(board);
  var revColor = ((color == 'white') ? 'black' : 'white');
  var sym = ((color == 'white') ? 1 : -1);
  board[place[0]][place[1]] = color;
  var path;
  var cp;
  var up;
  if (heap.value > -1) 
  {
    path = heap.path;
    ret = heap.value;
    cp = heap.cpossible;
    up = heap.upossible;
    board = this.doRevert(heap, board);
  } else {
    var act = this.getRevertPath(place, color, board);
    heap.path = act.path;
    heap.color = color;
    heap.place = place;
    board = this.doRevert(heap, board);
    cp = this.possiblePlace(color, board);
    up = this.possiblePlace(revColor, board);
    var cv = 0;
    var uv = 0;
    var cc = 0;
    var uc = 0;
    var i, j;
    for (i = 0; i < this.bounder; i++) 
      {
        for (j = 0; j < this.bounder; j++) 
          {
            if (board[i][j] === color) 
            {
              cv += this.getValue([i, j], board);
              cc++;
            } else if (board[i][j] === revColor) 
            {
              uv += this.getValue([i, j], board);
              uc++;
            }
          }
      }
    ret = (cp.length - up.length) * 10;
    ret += (cv - uv) * 2;
    if (up.length == 0 && cp.length > 0) 
    ret = 100000;
    heap.value = ret;
    heap.nextLevel = {};
    heap.cpossible = cp;
    heap.upossible = up;
    heap.colorCount[color] = cc;
    heap.colorCount[revColor] = uc;
  }
  if (level > 1 && (up.length > 0 || cp.length > 0)) 
  {
    if (up.length == 0) 
    {
      up = cp;
      revColor = color;
    }
    up = this.getBestPlaceSet(up);
    var p;
    for (p = 0; p < up.length; p++) 
      {
        nextValue = nextValue + this.evaluate(up[p], revColor, board, level - 1, heap);
      }
    if (up.length > 0) 
    {
      nextValue = nextValue / up.length;
      ret = Math.round(ret * 0.5 + nextValue * 0.5);
    }
  }
  return ret * sym;
}, getBestPlaceSet: function(possible) {
  var best = [];
  var middle = [];
  var ret = [];
  var i;
  for (i = 0; i < possible.length; i++) 
    {
      var t = this.getValue(possible[i], null);
      if (t == 100) 
      {
        best.push(possible[i]);
      } else if (t >= 0) 
      {
        middle.push(possible[i]);
      }
    }
  if (best.length > 0) 
  {
    ret = best;
  } else if (middle.length > 0) 
  {
    ret = middle;
  } else {
    ret = possible;
  }
  return ret;
}, bestPlace: function(possible) {
  if (possible.length == 0) 
  console.log('Error: No possible places?!!!');
  possible = this.getBestPlaceSet(possible);
  var ret = [];
  if (possible.length > 0) 
  {
    ret = possible[0];
    var p;
    var value = this.evaluate(ret, null, null, 0, null);
    for (p = 1; p < possible.length; p++) 
      {
        var v = this.evaluate(possible[p], null, null, 0, null);
        if (v > value) 
        {
          value = v;
          ret = possible[p];
        }
      }
  } else {
    console.log('Error: No Setting place for Computer');
  }
  return ret;
}} --> {  | board: Array<Array<string>>, bounder: integer, boardview: string, messageview: string, result: string, isEnd: boolean, endMessage: string, isUserTurn: boolean, isDrawing: boolean, isLock: boolean, isInit: boolean, isConfigure: boolean, isResult: boolean, level: integer, hasHelp: boolean, hasInit: boolean, playerNum: integer, currentColor: string, step: integer, point: Array<___>, directs: Array<Array<integer>>, heap: {  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }, possible: Array<Array<integer>>, pendingDrawMessage: integer, status: {  | bc: integer, wc: integer, result: string }, init: [](integer) -> void, endConfigure: []() -> void, startOver: []() -> void, actionAtPoint: [](Array<integer>,string) -> void, setPoint: [](Array<integer>,string) -> void, drawPoint: (Array<integer>,string) -> void, drawPath: [](Array<Array<integer>>,string) -> void, drawMessage: []() -> void, closeResult: []() -> void, displayBoard: []() -> void, click: [](integer,integer) -> void, computerTurn: []() -> void, isContain: (Array<integer>,Array<Array<integer>>) -> boolean, possiblePlace: [](string,Array<Array<string>>) -> Array<Array<integer>>, canRevert: [](Array<integer>,string,Array<Array<string>>) -> boolean, getClone: [](Array<Array<string>>) -> Array<Array<string>>, getRevertPath: [](Array<integer>,string,Array<Array<string>>) -> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }, doRevert: []({  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> },Array<Array<string>>) -> Array<Array<string>>, getValue: [](Array<integer>,Array<Array<string>>) -> integer, evaluate: [](Array<integer>,string,Array<Array<string>>,integer,{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }) -> float, getBestPlaceSet: [](Array<Array<integer>>) -> Array<Array<integer>>, bestPlace: [](Array<Array<integer>>) -> Array<integer> }
{place: place, path: path, color: color} --> {  | place: Array<integer>, path: Array<Array<integer>>, color: string }
{} --> Map<___>
{} --> Map<integer>
{} --> Map<{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }>
{} --> Map<{  | color: string, value: float, path: Array<Array<integer>>, place: Array<integer>, bpossible: Array<___>, cpossible: Array<Array<integer>>, upossible: Array<Array<integer>>, colorCount: Map<integer>, nextLevel: Map<<<recursive>>> }>
