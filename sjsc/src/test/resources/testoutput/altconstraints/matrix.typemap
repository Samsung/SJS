0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
1 --> integer
17 --> integer
2 --> integer
2 --> integer
3 --> integer
3 --> integer
30 --> integer
4 --> integer
4 --> integer
Array --> () -> Array<Array<integer>> INTERSECT (integer) -> Array<Array<integer>> INTERSECT (Array<integer>,Array<integer>) -> Array<Array<integer>>
Array --> () -> Array<integer> INTERSECT (integer) -> Array<integer> INTERSECT (integer,integer) -> Array<integer>
Array(cols) --> Array<integer>
Array(rows) --> Array<Array<integer>>
SIZE --> integer
SIZE --> integer
SIZE --> integer
SIZE --> integer
SIZE --> integer
SIZE --> integer
SIZE --> integer
SIZE --> integer
SIZE --> integer
cols --> integer
cols --> integer
cols --> integer
cols --> integer
cols --> integer
cols --> integer
count --> integer
count --> integer
count++ --> integer
function mkmatrix(rows, cols) {
  var i, j, count = 1;
  var m = Array(rows);
  for (i = 0; i < rows; i++) 
    {
      m[i] = Array(cols);
      for (j = 0; j < cols; j++) 
        {
          m[i][j] = count++;
        }
    }
  return m;
}
 --> (integer,integer) -> Array<Array<integer>>
function mmult(rows, cols, m1, m2, m3) {
  var i, j, k, val;
  for (i = 0; i < rows; i++) 
    {
      for (j = 0; j < cols; j++) 
        {
          val = 0;
          for (k = 0; k < cols; k++) 
            {
              val += m1[i][k] * m2[k][j];
            }
          m3[i][j] = val;
        }
    }
  return m3;
}
 --> (integer,integer,Array<Array<integer>>,Array<Array<integer>>,Array<Array<integer>>) -> Array<Array<integer>>
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i --> integer
i < n --> boolean
i < rows --> boolean
i < rows --> boolean
i = 0 --> integer
i = 0 --> integer
i = 0 --> integer
i++ --> integer
i++ --> integer
i++ --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j --> integer
j < cols --> boolean
j < cols --> boolean
j = 0 --> integer
j = 0 --> integer
j++ --> integer
j++ --> integer
k --> integer
k --> integer
k --> integer
k --> integer
k --> integer
k --> integer
k < cols --> boolean
k = 0 --> integer
k++ --> integer
m --> Array<Array<integer>>
m --> Array<Array<integer>>
m --> Array<Array<integer>>
m --> Array<Array<integer>>
m1 --> Array<Array<integer>>
m1 --> Array<Array<integer>>
m1 --> Array<Array<integer>>
m1 --> Array<Array<integer>>
m1[i] --> Array<integer>
m1[i][k] * m2[k][j] --> integer
m1[i][k] --> integer
m2 --> Array<Array<integer>>
m2 --> Array<Array<integer>>
m2 --> Array<Array<integer>>
m2 --> Array<Array<integer>>
m2[k] --> Array<integer>
m2[k][j] --> integer
m3 --> Array<Array<integer>>
m3 --> Array<Array<integer>>
m3 --> Array<Array<integer>>
m3[i] --> Array<integer>
m3[i][j] --> integer
m3[i][j] = val --> integer
m[i] --> Array<integer>
m[i] --> Array<integer>
m[i] = Array(cols) --> Array<integer>
m[i][j] --> integer
m[i][j] = count++ --> integer
mkmatrix --> (integer,integer) -> Array<Array<integer>>
mkmatrix --> (integer,integer) -> Array<Array<integer>>
mkmatrix --> (integer,integer) -> Array<Array<integer>>
mkmatrix --> (integer,integer) -> Array<Array<integer>>
mkmatrix(SIZE, SIZE) --> Array<Array<integer>>
mkmatrix(SIZE, SIZE) --> Array<Array<integer>>
mkmatrix(SIZE, SIZE) --> Array<Array<integer>>
mm --> Array<Array<integer>>
mm --> Array<Array<integer>>
mm --> Array<Array<integer>>
mm --> Array<Array<integer>>
mm --> Array<Array<integer>>
mm --> Array<Array<integer>>
mm[0] --> Array<integer>
mm[0][0] --> integer
mm[2] --> Array<integer>
mm[2][3] --> integer
mm[3] --> Array<integer>
mm[3][2] --> integer
mm[4] --> Array<integer>
mm[4][4] --> integer
mmult --> (integer,integer,Array<Array<integer>>,Array<Array<integer>>,Array<Array<integer>>) -> Array<Array<integer>>
mmult --> (integer,integer,Array<Array<integer>>,Array<Array<integer>>,Array<Array<integer>>) -> Array<Array<integer>>
mmult(SIZE, SIZE, m1, m2, mm) --> Array<Array<integer>>
n --> integer
n --> integer
printInt --> (integer) -> void
printInt --> (integer) -> void
printInt --> (integer) -> void
printInt --> (integer) -> void
printInt(mm[0][0]) --> void
printInt(mm[2][3]) --> void
printInt(mm[3][2]) --> void
printInt(mm[4][4]) --> void
rows --> integer
rows --> integer
rows --> integer
rows --> integer
rows --> integer
val += m1[i][k] * m2[k][j] --> integer
val --> integer
val --> integer
val --> integer
val --> integer
val = 0 --> integer
