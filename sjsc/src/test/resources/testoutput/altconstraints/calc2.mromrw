{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}} (line 47) --> [MRO=[BTN_ID_0, BTN_ID_9, BTN_ID_COUNT, BTN_ID_DIVIDE, BTN_ID_DOT, BTN_ID_MINUS, BTN_ID_MULTIPLY, BTN_ID_PLUS, Calculate, HandleBackKey, HandleClearKey, HandleEqualKey, HandleOperatorKeys, MAX_PRINTABLE_CHARS, MIN_PRINTABLE_VALUE, MODE_INVALID, MODE_OPERAND1, MODE_OPERAND2, MODE_OPERATOR, MODE_RESULT, UpdateOperand], MRW=[calcMode, errString, op1, op2, operator]]