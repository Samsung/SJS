"" --> string
"" --> string
"" --> string
"" --> string
"" --> string
"" --> string
"" --> string
"" --> string
"" --> string
"" --> string
"" --> string
"" --> string
"" --> string
"" --> string
"" --> string
"" --> string
"" --> string
"+" --> string
"-" --> string
"-" --> string
"-" --> string
"-" --> string
"-INF" --> string
"-INF" --> string
"-INF" --> string
"-inf" --> string
"." --> string
"." --> string
"." --> string
"0" --> string
"0" --> string
"0" --> string
"0" --> string
"0" --> string
"0" --> string
"0" --> string
"0" --> string
"0" --> string
"1" --> string
"ERROR" --> string
"INF" --> string
"INF" --> string
"INF" --> string
"NAN" --> string
"inf" --> string
(indexOfDec == -1 && op1.toString().length > 8) --> boolean
(k <= this.BTN_ID_9) --> boolean
(k === this.BTN_ID_MINUS) --> boolean
(k === this.BTN_ID_PLUS) --> boolean
(k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS) --> boolean
(this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9) --> boolean
(this.BTN_ID_0 <= k) --> boolean
(this.errString == "-INF") --> boolean
(this.errString == "INF") --> boolean
(this.errString == "INF") || (this.errString == "-INF") --> boolean
(this.op1 == "") --> boolean
(this.op1 == "") || (this.op1 == "0") --> boolean
(this.op1 == "0") --> boolean
-1 --> integer
-1 --> integer
-1 --> integer
-1 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0 --> integer
0.000000001 --> float
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
1 --> integer
10 --> integer
100 --> integer
101 --> integer
102 --> integer
103 --> integer
104 --> integer
11 --> integer
12 --> integer
13 --> integer
14 --> integer
15 --> integer
15 --> integer
16 --> integer
17 --> integer
18 --> integer
2 --> integer
20 --> integer
3 --> integer
3 --> integer
4 --> integer
5 --> integer
6 --> integer
7 --> integer
7 --> integer
7 --> integer
7 --> integer
8 --> integer
8 --> integer
9 --> integer
9 --> integer
BTN_ID_0 --> integer
BTN_ID_0 --> integer
BTN_ID_1 --> integer
BTN_ID_1 --> integer
BTN_ID_2 --> integer
BTN_ID_2 --> integer
BTN_ID_3 --> integer
BTN_ID_3 --> integer
BTN_ID_4 --> integer
BTN_ID_4 --> integer
BTN_ID_5 --> integer
BTN_ID_5 --> integer
BTN_ID_6 --> integer
BTN_ID_6 --> integer
BTN_ID_7 --> integer
BTN_ID_7 --> integer
BTN_ID_8 --> integer
BTN_ID_8 --> integer
BTN_ID_9 --> integer
BTN_ID_9 --> integer
BTN_ID_BACK --> integer
BTN_ID_BACK --> integer
BTN_ID_CLEAR --> integer
BTN_ID_CLEAR --> integer
BTN_ID_COUNT --> integer
BTN_ID_COUNT --> integer
BTN_ID_COUNT --> integer
BTN_ID_DIVIDE --> integer
BTN_ID_DIVIDE --> integer
BTN_ID_DOT --> integer
BTN_ID_DOT --> integer
BTN_ID_EQUAL --> integer
BTN_ID_EQUAL --> integer
BTN_ID_MINUS --> integer
BTN_ID_MINUS --> integer
BTN_ID_MULTIPLY --> integer
BTN_ID_MULTIPLY --> integer
BTN_ID_PLUS --> integer
BTN_ID_PLUS --> integer
DIGITS_AFTER_DECIMAL_POINT --> integer
DIGITS_AFTER_DECIMAL_POINT --> integer
MAX_DIGITS_AFTER_DECIMAL_POINT --> integer
MAX_DIGITS_AFTER_DECIMAL_POINT --> integer
MAX_DIGITS_DISPLAY --> integer
MAX_DIGITS_DISPLAY --> integer
MAX_PRINTABLE_CHARS --> integer
MAX_PRINTABLE_CHARS --> integer
MIN_PRINTABLE_VALUE --> float
MIN_PRINTABLE_VALUE --> float
MODE_INVALID --> integer
MODE_INVALID --> integer
MODE_OPERAND1 --> integer
MODE_OPERAND1 --> integer
MODE_OPERAND1 --> integer
MODE_OPERAND2 --> integer
MODE_OPERAND2 --> integer
MODE_OPERATOR --> integer
MODE_OPERATOR --> integer
MODE_RESULT --> integer
MODE_RESULT --> integer
charCount --> integer
charCount --> integer
charCount --> integer
charCount --> integer
charCount++ --> integer
charCount++ --> integer
false --> boolean
function mkState() {
  var BTN_ID_0 = 0;
  var BTN_ID_1 = 1;
  var BTN_ID_2 = 2;
  var BTN_ID_3 = 3;
  var BTN_ID_4 = 4;
  var BTN_ID_5 = 5;
  var BTN_ID_6 = 6;
  var BTN_ID_7 = 7;
  var BTN_ID_8 = 8;
  var BTN_ID_9 = 9;
  var BTN_ID_DOT = 10;
  var BTN_ID_PLUS = 11;
  var BTN_ID_MINUS = 12;
  var BTN_ID_MULTIPLY = 13;
  var BTN_ID_DIVIDE = 14;
  var BTN_ID_BACK = 15;
  var BTN_ID_CLEAR = 16;
  var BTN_ID_EQUAL = 17;
  var BTN_ID_COUNT = 18;
  var MODE_OPERAND1 = 100;
  var MODE_OPERATOR = 101;
  var MODE_OPERAND2 = 102;
  var MODE_RESULT = 103;
  var MODE_INVALID = 104;
  var MAX_PRINTABLE_CHARS = 20;
  var MAX_DIGITS_DISPLAY = 15;
  var DIGITS_AFTER_DECIMAL_POINT = 7;
  var MAX_DIGITS_AFTER_DECIMAL_POINT = 9;
  var MIN_PRINTABLE_VALUE = 0.000000001;
  return {BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}};
}
 --> () -> {  | BTN_ID_0: integer, BTN_ID_1: integer, BTN_ID_2: integer, BTN_ID_3: integer, BTN_ID_4: integer, BTN_ID_5: integer, BTN_ID_6: integer, BTN_ID_7: integer, BTN_ID_8: integer, BTN_ID_9: integer, BTN_ID_DOT: integer, BTN_ID_PLUS: integer, BTN_ID_MINUS: integer, BTN_ID_MULTIPLY: integer, BTN_ID_DIVIDE: integer, BTN_ID_BACK: integer, BTN_ID_CLEAR: integer, BTN_ID_EQUAL: integer, BTN_ID_COUNT: integer, MODE_OPERAND1: integer, MODE_OPERATOR: integer, MODE_OPERAND2: integer, MODE_RESULT: integer, MODE_INVALID: integer, MAX_PRINTABLE_CHARS: integer, MAX_DIGITS_DISPLAY: integer, DIGITS_AFTER_DECIMAL_POINT: integer, MAX_DIGITS_AFTER_DECIMAL_POINT: integer, MIN_PRINTABLE_VALUE: float, errString: string, calcMode: integer, operator: integer, op1: string, op2: string, GetResult: []() -> string, UpdateOperand: [](integer) -> boolean, HandleNumKeys: [](integer) -> boolean, HandleOperatorKeys: [](integer) -> void, Calculate: []() -> void, HandleEqualKey: []() -> void, HandleClearKey: []() -> void, HandleBackKey: []() -> void }
function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
} --> [{ MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }]() -> void
function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
} --> [{ Calculate: []() -> void, MODE_RESULT: integer, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, MODE_OPERAND2: integer, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, op1: string, MODE_OPERATOR: integer, MODE_INVALID: integer, calcMode: integer | op2: string, operator: integer }]() -> void
function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
} --> [{ errString: string, MODE_INVALID: integer, op2: string, op1: string, MODE_OPERAND2: integer, MODE_OPERAND1: integer, MODE_RESULT: integer, MODE_OPERATOR: integer, calcMode: integer |  }]() -> string
function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
} --> [{ MODE_OPERAND2: integer, BTN_ID_COUNT: integer, MODE_RESULT: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, MODE_OPERAND1: integer, HandleBackKey: []() -> void | op2: string, op1: string, calcMode: integer, operator: integer }]() -> void
function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
} --> [{ BTN_ID_COUNT: integer, MODE_OPERAND1: integer | errString: string, op2: string, operator: integer, op1: string, calcMode: integer }]() -> void
function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
} --> [{ UpdateOperand: [](integer) -> boolean, MODE_OPERAND1: integer, HandleClearKey: []() -> void, MODE_INVALID: integer, MODE_OPERAND2: integer, MODE_OPERATOR: integer, MODE_RESULT: integer | op2: string, calcMode: integer }](integer) -> boolean
function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
} --> [{ HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }](integer) -> void
function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
} --> [{ MODE_OPERAND1: integer, calcMode: integer, BTN_ID_MINUS: integer, BTN_ID_9: integer, BTN_ID_0: integer, BTN_ID_DOT: integer, MAX_PRINTABLE_CHARS: integer | op2: string, op1: string }](integer) -> boolean
hint --> integer
hint --> integer
hint --> integer
index != -1 --> boolean
index --> integer
index --> integer
index --> integer
index --> integer
index = op.indexOf(".") --> integer
index == -1 --> boolean
indexOfDec --> integer
indexOfDec --> integer
indexOfDec --> integer
indexOfDec --> integer
indexOfDec = op1.toString().indexOf(".") --> integer
indexOfDec == -1 && op1.toString().length > 8 --> boolean
indexOfDec == -1 --> boolean
indexOfDec > 7 --> boolean
indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8) --> boolean
k --> integer
k --> integer
k --> integer
k --> integer
k --> integer
k --> integer
k --> integer
k --> integer
k --> integer
k --> integer
k --> integer
k --> integer
k --> integer
k --> integer
k --> integer
k --> integer
k --> integer
k --> integer
k --> integer
k --> integer
k --> integer
k <= this.BTN_ID_9 --> boolean
k = hint --> integer
k = hint --> integer
k == this.BTN_ID_DOT --> boolean
k == this.BTN_ID_MINUS --> boolean
k == this.BTN_ID_MINUS --> boolean
k == this.BTN_ID_PLUS --> boolean
k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS --> boolean
k === this.BTN_ID_MINUS --> boolean
k === this.BTN_ID_PLUS --> boolean
k.toString --> []() -> string INTERSECT [](integer) -> string
k.toString() --> string
mkState --> () -> {  | BTN_ID_0: integer, BTN_ID_1: integer, BTN_ID_2: integer, BTN_ID_3: integer, BTN_ID_4: integer, BTN_ID_5: integer, BTN_ID_6: integer, BTN_ID_7: integer, BTN_ID_8: integer, BTN_ID_9: integer, BTN_ID_DOT: integer, BTN_ID_PLUS: integer, BTN_ID_MINUS: integer, BTN_ID_MULTIPLY: integer, BTN_ID_DIVIDE: integer, BTN_ID_BACK: integer, BTN_ID_CLEAR: integer, BTN_ID_EQUAL: integer, BTN_ID_COUNT: integer, MODE_OPERAND1: integer, MODE_OPERATOR: integer, MODE_OPERAND2: integer, MODE_RESULT: integer, MODE_INVALID: integer, MAX_PRINTABLE_CHARS: integer, MAX_DIGITS_DISPLAY: integer, DIGITS_AFTER_DECIMAL_POINT: integer, MAX_DIGITS_AFTER_DECIMAL_POINT: integer, MIN_PRINTABLE_VALUE: float, errString: string, calcMode: integer, operator: integer, op1: string, op2: string, GetResult: []() -> string, UpdateOperand: [](integer) -> boolean, HandleNumKeys: [](integer) -> boolean, HandleOperatorKeys: [](integer) -> void, Calculate: []() -> void, HandleEqualKey: []() -> void, HandleClearKey: []() -> void, HandleBackKey: []() -> void }
mkState --> () -> {  | BTN_ID_0: integer, BTN_ID_1: integer, BTN_ID_2: integer, BTN_ID_3: integer, BTN_ID_4: integer, BTN_ID_5: integer, BTN_ID_6: integer, BTN_ID_7: integer, BTN_ID_8: integer, BTN_ID_9: integer, BTN_ID_DOT: integer, BTN_ID_PLUS: integer, BTN_ID_MINUS: integer, BTN_ID_MULTIPLY: integer, BTN_ID_DIVIDE: integer, BTN_ID_BACK: integer, BTN_ID_CLEAR: integer, BTN_ID_EQUAL: integer, BTN_ID_COUNT: integer, MODE_OPERAND1: integer, MODE_OPERATOR: integer, MODE_OPERAND2: integer, MODE_RESULT: integer, MODE_INVALID: integer, MAX_PRINTABLE_CHARS: integer, MAX_DIGITS_DISPLAY: integer, DIGITS_AFTER_DECIMAL_POINT: integer, MAX_DIGITS_AFTER_DECIMAL_POINT: integer, MIN_PRINTABLE_VALUE: float, errString: string, calcMode: integer, operator: integer, op1: string, op2: string, GetResult: []() -> string, UpdateOperand: [](integer) -> boolean, HandleNumKeys: [](integer) -> boolean, HandleOperatorKeys: [](integer) -> void, Calculate: []() -> void, HandleEqualKey: []() -> void, HandleClearKey: []() -> void, HandleBackKey: []() -> void }
mkState() --> {  | BTN_ID_0: integer, BTN_ID_1: integer, BTN_ID_2: integer, BTN_ID_3: integer, BTN_ID_4: integer, BTN_ID_5: integer, BTN_ID_6: integer, BTN_ID_7: integer, BTN_ID_8: integer, BTN_ID_9: integer, BTN_ID_DOT: integer, BTN_ID_PLUS: integer, BTN_ID_MINUS: integer, BTN_ID_MULTIPLY: integer, BTN_ID_DIVIDE: integer, BTN_ID_BACK: integer, BTN_ID_CLEAR: integer, BTN_ID_EQUAL: integer, BTN_ID_COUNT: integer, MODE_OPERAND1: integer, MODE_OPERATOR: integer, MODE_OPERAND2: integer, MODE_RESULT: integer, MODE_INVALID: integer, MAX_PRINTABLE_CHARS: integer, MAX_DIGITS_DISPLAY: integer, DIGITS_AFTER_DECIMAL_POINT: integer, MAX_DIGITS_AFTER_DECIMAL_POINT: integer, MIN_PRINTABLE_VALUE: float, errString: string, calcMode: integer, operator: integer, op1: string, op2: string, GetResult: []() -> string, UpdateOperand: [](integer) -> boolean, HandleNumKeys: [](integer) -> boolean, HandleOperatorKeys: [](integer) -> void, Calculate: []() -> void, HandleEqualKey: []() -> void, HandleClearKey: []() -> void, HandleBackKey: []() -> void }
mkState().HandleNumKeys --> [](integer) -> boolean
mkState().HandleNumKeys(3) --> boolean
op --> string
op --> string
op --> string
op --> string
op --> string
op --> string
op --> string
op --> string
op --> string
op --> string
op --> string
op --> string
op --> string
op --> string
op --> string
op --> string
op --> string
op --> string
op --> string
op --> string
op --> string
op = "" --> string
op = op.concat("-") --> string
op = op.concat(".") --> string
op = op.concat("0") --> string
op = op.concat(k.toString()) --> string
op = this.op1 --> string
op = this.op2 --> string
op == "" --> boolean
op == "" --> boolean
op == "" || op == "-" --> boolean
op == "-" --> boolean
op == "0" --> boolean
op.charAt --> [](integer) -> string
op.charAt(0) --> string
op.concat --> [](string) -> string
op.concat --> [](string) -> string
op.concat --> [](string) -> string
op.concat --> [](string) -> string
op.concat("-") --> string
op.concat(".") --> string
op.concat("0") --> string
op.concat(k.toString()) --> string
op.indexOf --> [](string) -> integer
op.indexOf(".") --> integer
op.length --> integer
op.length < charCount --> boolean
op1 *= op2 --> float
op1 += op2 --> float
op1 --> float
op1 --> float
op1 --> float
op1 --> float
op1 --> float
op1 --> float
op1 --> float
op1 --> float
op1 --> float
op1 --> float
op1 --> float
op1 --> float
op1 --> float
op1 -= op2 --> float
op1 /= op2 --> float
op1 < this.MIN_PRINTABLE_VALUE --> boolean
op1 == 0 --> boolean
op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE --> boolean
op1 > 0 --> boolean
op1 > 0 --> boolean
op1.toExponential --> [](integer) -> string
op1.toExponential(7) --> string
op1.toString --> []() -> string INTERSECT [](integer) -> string
op1.toString --> []() -> string INTERSECT [](integer) -> string
op1.toString --> []() -> string INTERSECT [](integer) -> string
op1.toString() --> string
op1.toString() --> string
op1.toString() --> string
op1.toString().indexOf --> [](string) -> integer
op1.toString().indexOf(".") --> integer
op1.toString().length --> integer
op1.toString().length > 8 --> boolean
op2 != 0 --> boolean
op2 --> float
op2 --> float
op2 --> float
op2 --> float
op2 --> float
op2 --> float
parseFloat --> (string) -> float
parseFloat --> (string) -> float
parseFloat(this.op1) --> float
parseFloat(this.op2) --> float
sign --> string
sign --> string
sign --> string
sign == "+" --> boolean
sign == "-" --> boolean
sign == "-" || sign == "+" --> boolean
this --> { BTN_ID_COUNT: integer, MODE_OPERAND1: integer | errString: string, op2: string, operator: integer, op1: string, calcMode: integer }
this --> { BTN_ID_COUNT: integer, MODE_OPERAND1: integer | errString: string, op2: string, operator: integer, op1: string, calcMode: integer }
this --> { BTN_ID_COUNT: integer, MODE_OPERAND1: integer | errString: string, op2: string, operator: integer, op1: string, calcMode: integer }
this --> { BTN_ID_COUNT: integer, MODE_OPERAND1: integer | errString: string, op2: string, operator: integer, op1: string, calcMode: integer }
this --> { BTN_ID_COUNT: integer, MODE_OPERAND1: integer | errString: string, op2: string, operator: integer, op1: string, calcMode: integer }
this --> { BTN_ID_COUNT: integer, MODE_OPERAND1: integer | errString: string, op2: string, operator: integer, op1: string, calcMode: integer }
this --> { BTN_ID_COUNT: integer, MODE_OPERAND1: integer | errString: string, op2: string, operator: integer, op1: string, calcMode: integer }
this --> { Calculate: []() -> void, MODE_RESULT: integer, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, MODE_OPERAND2: integer, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, op1: string, MODE_OPERATOR: integer, MODE_INVALID: integer, calcMode: integer | op2: string, operator: integer }
this --> { Calculate: []() -> void, MODE_RESULT: integer, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, MODE_OPERAND2: integer, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, op1: string, MODE_OPERATOR: integer, MODE_INVALID: integer, calcMode: integer | op2: string, operator: integer }
this --> { Calculate: []() -> void, MODE_RESULT: integer, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, MODE_OPERAND2: integer, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, op1: string, MODE_OPERATOR: integer, MODE_INVALID: integer, calcMode: integer | op2: string, operator: integer }
this --> { Calculate: []() -> void, MODE_RESULT: integer, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, MODE_OPERAND2: integer, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, op1: string, MODE_OPERATOR: integer, MODE_INVALID: integer, calcMode: integer | op2: string, operator: integer }
this --> { Calculate: []() -> void, MODE_RESULT: integer, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, MODE_OPERAND2: integer, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, op1: string, MODE_OPERATOR: integer, MODE_INVALID: integer, calcMode: integer | op2: string, operator: integer }
this --> { Calculate: []() -> void, MODE_RESULT: integer, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, MODE_OPERAND2: integer, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, op1: string, MODE_OPERATOR: integer, MODE_INVALID: integer, calcMode: integer | op2: string, operator: integer }
this --> { Calculate: []() -> void, MODE_RESULT: integer, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, MODE_OPERAND2: integer, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, op1: string, MODE_OPERATOR: integer, MODE_INVALID: integer, calcMode: integer | op2: string, operator: integer }
this --> { Calculate: []() -> void, MODE_RESULT: integer, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, MODE_OPERAND2: integer, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, op1: string, MODE_OPERATOR: integer, MODE_INVALID: integer, calcMode: integer | op2: string, operator: integer }
this --> { Calculate: []() -> void, MODE_RESULT: integer, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, MODE_OPERAND2: integer, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, op1: string, MODE_OPERATOR: integer, MODE_INVALID: integer, calcMode: integer | op2: string, operator: integer }
this --> { Calculate: []() -> void, MODE_RESULT: integer, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, MODE_OPERAND2: integer, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, op1: string, MODE_OPERATOR: integer, MODE_INVALID: integer, calcMode: integer | op2: string, operator: integer }
this --> { Calculate: []() -> void, MODE_RESULT: integer, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, MODE_OPERAND2: integer, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, op1: string, MODE_OPERATOR: integer, MODE_INVALID: integer, calcMode: integer | op2: string, operator: integer }
this --> { Calculate: []() -> void, MODE_RESULT: integer, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, MODE_OPERAND2: integer, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, op1: string, MODE_OPERATOR: integer, MODE_INVALID: integer, calcMode: integer | op2: string, operator: integer }
this --> { Calculate: []() -> void, MODE_RESULT: integer, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, MODE_OPERAND2: integer, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, op1: string, MODE_OPERATOR: integer, MODE_INVALID: integer, calcMode: integer | op2: string, operator: integer }
this --> { Calculate: []() -> void, MODE_RESULT: integer, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, MODE_OPERAND2: integer, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, op1: string, MODE_OPERATOR: integer, MODE_INVALID: integer, calcMode: integer | op2: string, operator: integer }
this --> { Calculate: []() -> void, MODE_RESULT: integer, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, MODE_OPERAND2: integer, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, op1: string, MODE_OPERATOR: integer, MODE_INVALID: integer, calcMode: integer | op2: string, operator: integer }
this --> { Calculate: []() -> void, MODE_RESULT: integer, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, MODE_OPERAND2: integer, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, op1: string, MODE_OPERATOR: integer, MODE_INVALID: integer, calcMode: integer | op2: string, operator: integer }
this --> { Calculate: []() -> void, MODE_RESULT: integer, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, MODE_OPERAND2: integer, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, op1: string, MODE_OPERATOR: integer, MODE_INVALID: integer, calcMode: integer | op2: string, operator: integer }
this --> { Calculate: []() -> void, MODE_RESULT: integer, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, MODE_OPERAND2: integer, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, op1: string, MODE_OPERATOR: integer, MODE_INVALID: integer, calcMode: integer | op2: string, operator: integer }
this --> { Calculate: []() -> void, MODE_RESULT: integer, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, MODE_OPERAND2: integer, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, op1: string, MODE_OPERATOR: integer, MODE_INVALID: integer, calcMode: integer | op2: string, operator: integer }
this --> { Calculate: []() -> void, MODE_RESULT: integer, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, MODE_OPERAND2: integer, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, op1: string, MODE_OPERATOR: integer, MODE_INVALID: integer, calcMode: integer | op2: string, operator: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { HandleOperatorKeys: [](integer) -> void, MODE_RESULT: integer, UpdateOperand: [](integer) -> boolean, BTN_ID_PLUS: integer, MODE_OPERAND1: integer, MODE_OPERAND2: integer, BTN_ID_MINUS: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, HandleEqualKey: []() -> void | op2: string, operator: integer, op1: string, calcMode: integer }
this --> { MODE_OPERAND1: integer, calcMode: integer, BTN_ID_MINUS: integer, BTN_ID_9: integer, BTN_ID_0: integer, BTN_ID_DOT: integer, MAX_PRINTABLE_CHARS: integer | op2: string, op1: string }
this --> { MODE_OPERAND1: integer, calcMode: integer, BTN_ID_MINUS: integer, BTN_ID_9: integer, BTN_ID_0: integer, BTN_ID_DOT: integer, MAX_PRINTABLE_CHARS: integer | op2: string, op1: string }
this --> { MODE_OPERAND1: integer, calcMode: integer, BTN_ID_MINUS: integer, BTN_ID_9: integer, BTN_ID_0: integer, BTN_ID_DOT: integer, MAX_PRINTABLE_CHARS: integer | op2: string, op1: string }
this --> { MODE_OPERAND1: integer, calcMode: integer, BTN_ID_MINUS: integer, BTN_ID_9: integer, BTN_ID_0: integer, BTN_ID_DOT: integer, MAX_PRINTABLE_CHARS: integer | op2: string, op1: string }
this --> { MODE_OPERAND1: integer, calcMode: integer, BTN_ID_MINUS: integer, BTN_ID_9: integer, BTN_ID_0: integer, BTN_ID_DOT: integer, MAX_PRINTABLE_CHARS: integer | op2: string, op1: string }
this --> { MODE_OPERAND1: integer, calcMode: integer, BTN_ID_MINUS: integer, BTN_ID_9: integer, BTN_ID_0: integer, BTN_ID_DOT: integer, MAX_PRINTABLE_CHARS: integer | op2: string, op1: string }
this --> { MODE_OPERAND1: integer, calcMode: integer, BTN_ID_MINUS: integer, BTN_ID_9: integer, BTN_ID_0: integer, BTN_ID_DOT: integer, MAX_PRINTABLE_CHARS: integer | op2: string, op1: string }
this --> { MODE_OPERAND1: integer, calcMode: integer, BTN_ID_MINUS: integer, BTN_ID_9: integer, BTN_ID_0: integer, BTN_ID_DOT: integer, MAX_PRINTABLE_CHARS: integer | op2: string, op1: string }
this --> { MODE_OPERAND1: integer, calcMode: integer, BTN_ID_MINUS: integer, BTN_ID_9: integer, BTN_ID_0: integer, BTN_ID_DOT: integer, MAX_PRINTABLE_CHARS: integer | op2: string, op1: string }
this --> { MODE_OPERAND1: integer, calcMode: integer, BTN_ID_MINUS: integer, BTN_ID_9: integer, BTN_ID_0: integer, BTN_ID_DOT: integer, MAX_PRINTABLE_CHARS: integer | op2: string, op1: string }
this --> { MODE_OPERAND1: integer, calcMode: integer, BTN_ID_MINUS: integer, BTN_ID_9: integer, BTN_ID_0: integer, BTN_ID_DOT: integer, MAX_PRINTABLE_CHARS: integer | op2: string, op1: string }
this --> { MODE_OPERAND1: integer, calcMode: integer, BTN_ID_MINUS: integer, BTN_ID_9: integer, BTN_ID_0: integer, BTN_ID_DOT: integer, MAX_PRINTABLE_CHARS: integer | op2: string, op1: string }
this --> { MODE_OPERAND1: integer, calcMode: integer, BTN_ID_MINUS: integer, BTN_ID_9: integer, BTN_ID_0: integer, BTN_ID_DOT: integer, MAX_PRINTABLE_CHARS: integer | op2: string, op1: string }
this --> { MODE_OPERAND2: integer, BTN_ID_COUNT: integer, MODE_RESULT: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, MODE_OPERAND1: integer, HandleBackKey: []() -> void | op2: string, op1: string, calcMode: integer, operator: integer }
this --> { MODE_OPERAND2: integer, BTN_ID_COUNT: integer, MODE_RESULT: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, MODE_OPERAND1: integer, HandleBackKey: []() -> void | op2: string, op1: string, calcMode: integer, operator: integer }
this --> { MODE_OPERAND2: integer, BTN_ID_COUNT: integer, MODE_RESULT: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, MODE_OPERAND1: integer, HandleBackKey: []() -> void | op2: string, op1: string, calcMode: integer, operator: integer }
this --> { MODE_OPERAND2: integer, BTN_ID_COUNT: integer, MODE_RESULT: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, MODE_OPERAND1: integer, HandleBackKey: []() -> void | op2: string, op1: string, calcMode: integer, operator: integer }
this --> { MODE_OPERAND2: integer, BTN_ID_COUNT: integer, MODE_RESULT: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, MODE_OPERAND1: integer, HandleBackKey: []() -> void | op2: string, op1: string, calcMode: integer, operator: integer }
this --> { MODE_OPERAND2: integer, BTN_ID_COUNT: integer, MODE_RESULT: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, MODE_OPERAND1: integer, HandleBackKey: []() -> void | op2: string, op1: string, calcMode: integer, operator: integer }
this --> { MODE_OPERAND2: integer, BTN_ID_COUNT: integer, MODE_RESULT: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, MODE_OPERAND1: integer, HandleBackKey: []() -> void | op2: string, op1: string, calcMode: integer, operator: integer }
this --> { MODE_OPERAND2: integer, BTN_ID_COUNT: integer, MODE_RESULT: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, MODE_OPERAND1: integer, HandleBackKey: []() -> void | op2: string, op1: string, calcMode: integer, operator: integer }
this --> { MODE_OPERAND2: integer, BTN_ID_COUNT: integer, MODE_RESULT: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, MODE_OPERAND1: integer, HandleBackKey: []() -> void | op2: string, op1: string, calcMode: integer, operator: integer }
this --> { MODE_OPERAND2: integer, BTN_ID_COUNT: integer, MODE_RESULT: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, MODE_OPERAND1: integer, HandleBackKey: []() -> void | op2: string, op1: string, calcMode: integer, operator: integer }
this --> { MODE_OPERAND2: integer, BTN_ID_COUNT: integer, MODE_RESULT: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, MODE_OPERAND1: integer, HandleBackKey: []() -> void | op2: string, op1: string, calcMode: integer, operator: integer }
this --> { MODE_OPERAND2: integer, BTN_ID_COUNT: integer, MODE_RESULT: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, MODE_OPERAND1: integer, HandleBackKey: []() -> void | op2: string, op1: string, calcMode: integer, operator: integer }
this --> { MODE_OPERAND2: integer, BTN_ID_COUNT: integer, MODE_RESULT: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, MODE_OPERAND1: integer, HandleBackKey: []() -> void | op2: string, op1: string, calcMode: integer, operator: integer }
this --> { MODE_OPERAND2: integer, BTN_ID_COUNT: integer, MODE_RESULT: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, MODE_OPERAND1: integer, HandleBackKey: []() -> void | op2: string, op1: string, calcMode: integer, operator: integer }
this --> { MODE_OPERAND2: integer, BTN_ID_COUNT: integer, MODE_RESULT: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, MODE_OPERAND1: integer, HandleBackKey: []() -> void | op2: string, op1: string, calcMode: integer, operator: integer }
this --> { MODE_OPERAND2: integer, BTN_ID_COUNT: integer, MODE_RESULT: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, MODE_OPERAND1: integer, HandleBackKey: []() -> void | op2: string, op1: string, calcMode: integer, operator: integer }
this --> { MODE_OPERAND2: integer, BTN_ID_COUNT: integer, MODE_RESULT: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, MODE_OPERAND1: integer, HandleBackKey: []() -> void | op2: string, op1: string, calcMode: integer, operator: integer }
this --> { MODE_OPERAND2: integer, BTN_ID_COUNT: integer, MODE_RESULT: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, MODE_OPERAND1: integer, HandleBackKey: []() -> void | op2: string, op1: string, calcMode: integer, operator: integer }
this --> { MODE_OPERAND2: integer, BTN_ID_COUNT: integer, MODE_RESULT: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, MODE_OPERAND1: integer, HandleBackKey: []() -> void | op2: string, op1: string, calcMode: integer, operator: integer }
this --> { MODE_OPERAND2: integer, BTN_ID_COUNT: integer, MODE_RESULT: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, MODE_OPERAND1: integer, HandleBackKey: []() -> void | op2: string, op1: string, calcMode: integer, operator: integer }
this --> { MODE_OPERAND2: integer, BTN_ID_COUNT: integer, MODE_RESULT: integer, MODE_INVALID: integer, MODE_OPERATOR: integer, MODE_OPERAND1: integer, HandleBackKey: []() -> void | op2: string, op1: string, calcMode: integer, operator: integer }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { MODE_RESULT: integer, MODE_INVALID: integer, MIN_PRINTABLE_VALUE: float, BTN_ID_DIVIDE: integer, BTN_ID_MULTIPLY: integer, BTN_ID_MINUS: integer, BTN_ID_PLUS: integer, operator: integer, op2: string | calcMode: integer, errString: string, op1: string }
this --> { UpdateOperand: [](integer) -> boolean, MODE_OPERAND1: integer, HandleClearKey: []() -> void, MODE_INVALID: integer, MODE_OPERAND2: integer, MODE_OPERATOR: integer, MODE_RESULT: integer | op2: string, calcMode: integer }
this --> { UpdateOperand: [](integer) -> boolean, MODE_OPERAND1: integer, HandleClearKey: []() -> void, MODE_INVALID: integer, MODE_OPERAND2: integer, MODE_OPERATOR: integer, MODE_RESULT: integer | op2: string, calcMode: integer }
this --> { UpdateOperand: [](integer) -> boolean, MODE_OPERAND1: integer, HandleClearKey: []() -> void, MODE_INVALID: integer, MODE_OPERAND2: integer, MODE_OPERATOR: integer, MODE_RESULT: integer | op2: string, calcMode: integer }
this --> { UpdateOperand: [](integer) -> boolean, MODE_OPERAND1: integer, HandleClearKey: []() -> void, MODE_INVALID: integer, MODE_OPERAND2: integer, MODE_OPERATOR: integer, MODE_RESULT: integer | op2: string, calcMode: integer }
this --> { UpdateOperand: [](integer) -> boolean, MODE_OPERAND1: integer, HandleClearKey: []() -> void, MODE_INVALID: integer, MODE_OPERAND2: integer, MODE_OPERATOR: integer, MODE_RESULT: integer | op2: string, calcMode: integer }
this --> { UpdateOperand: [](integer) -> boolean, MODE_OPERAND1: integer, HandleClearKey: []() -> void, MODE_INVALID: integer, MODE_OPERAND2: integer, MODE_OPERATOR: integer, MODE_RESULT: integer | op2: string, calcMode: integer }
this --> { UpdateOperand: [](integer) -> boolean, MODE_OPERAND1: integer, HandleClearKey: []() -> void, MODE_INVALID: integer, MODE_OPERAND2: integer, MODE_OPERATOR: integer, MODE_RESULT: integer | op2: string, calcMode: integer }
this --> { UpdateOperand: [](integer) -> boolean, MODE_OPERAND1: integer, HandleClearKey: []() -> void, MODE_INVALID: integer, MODE_OPERAND2: integer, MODE_OPERATOR: integer, MODE_RESULT: integer | op2: string, calcMode: integer }
this --> { UpdateOperand: [](integer) -> boolean, MODE_OPERAND1: integer, HandleClearKey: []() -> void, MODE_INVALID: integer, MODE_OPERAND2: integer, MODE_OPERATOR: integer, MODE_RESULT: integer | op2: string, calcMode: integer }
this --> { UpdateOperand: [](integer) -> boolean, MODE_OPERAND1: integer, HandleClearKey: []() -> void, MODE_INVALID: integer, MODE_OPERAND2: integer, MODE_OPERATOR: integer, MODE_RESULT: integer | op2: string, calcMode: integer }
this --> { UpdateOperand: [](integer) -> boolean, MODE_OPERAND1: integer, HandleClearKey: []() -> void, MODE_INVALID: integer, MODE_OPERAND2: integer, MODE_OPERATOR: integer, MODE_RESULT: integer | op2: string, calcMode: integer }
this --> { UpdateOperand: [](integer) -> boolean, MODE_OPERAND1: integer, HandleClearKey: []() -> void, MODE_INVALID: integer, MODE_OPERAND2: integer, MODE_OPERATOR: integer, MODE_RESULT: integer | op2: string, calcMode: integer }
this --> { UpdateOperand: [](integer) -> boolean, MODE_OPERAND1: integer, HandleClearKey: []() -> void, MODE_INVALID: integer, MODE_OPERAND2: integer, MODE_OPERATOR: integer, MODE_RESULT: integer | op2: string, calcMode: integer }
this --> { errString: string, MODE_INVALID: integer, op2: string, op1: string, MODE_OPERAND2: integer, MODE_OPERAND1: integer, MODE_RESULT: integer, MODE_OPERATOR: integer, calcMode: integer |  }
this --> { errString: string, MODE_INVALID: integer, op2: string, op1: string, MODE_OPERAND2: integer, MODE_OPERAND1: integer, MODE_RESULT: integer, MODE_OPERATOR: integer, calcMode: integer |  }
this --> { errString: string, MODE_INVALID: integer, op2: string, op1: string, MODE_OPERAND2: integer, MODE_OPERAND1: integer, MODE_RESULT: integer, MODE_OPERATOR: integer, calcMode: integer |  }
this --> { errString: string, MODE_INVALID: integer, op2: string, op1: string, MODE_OPERAND2: integer, MODE_OPERAND1: integer, MODE_RESULT: integer, MODE_OPERATOR: integer, calcMode: integer |  }
this --> { errString: string, MODE_INVALID: integer, op2: string, op1: string, MODE_OPERAND2: integer, MODE_OPERAND1: integer, MODE_RESULT: integer, MODE_OPERATOR: integer, calcMode: integer |  }
this --> { errString: string, MODE_INVALID: integer, op2: string, op1: string, MODE_OPERAND2: integer, MODE_OPERAND1: integer, MODE_RESULT: integer, MODE_OPERATOR: integer, calcMode: integer |  }
this --> { errString: string, MODE_INVALID: integer, op2: string, op1: string, MODE_OPERAND2: integer, MODE_OPERAND1: integer, MODE_RESULT: integer, MODE_OPERATOR: integer, calcMode: integer |  }
this --> { errString: string, MODE_INVALID: integer, op2: string, op1: string, MODE_OPERAND2: integer, MODE_OPERAND1: integer, MODE_RESULT: integer, MODE_OPERATOR: integer, calcMode: integer |  }
this --> { errString: string, MODE_INVALID: integer, op2: string, op1: string, MODE_OPERAND2: integer, MODE_OPERAND1: integer, MODE_RESULT: integer, MODE_OPERATOR: integer, calcMode: integer |  }
this --> { errString: string, MODE_INVALID: integer, op2: string, op1: string, MODE_OPERAND2: integer, MODE_OPERAND1: integer, MODE_RESULT: integer, MODE_OPERATOR: integer, calcMode: integer |  }
this --> { errString: string, MODE_INVALID: integer, op2: string, op1: string, MODE_OPERAND2: integer, MODE_OPERAND1: integer, MODE_RESULT: integer, MODE_OPERATOR: integer, calcMode: integer |  }
this --> { errString: string, MODE_INVALID: integer, op2: string, op1: string, MODE_OPERAND2: integer, MODE_OPERAND1: integer, MODE_RESULT: integer, MODE_OPERATOR: integer, calcMode: integer |  }
this.BTN_ID_0 --> integer
this.BTN_ID_0 <= k --> boolean
this.BTN_ID_9 --> integer
this.BTN_ID_COUNT --> integer
this.BTN_ID_COUNT --> integer
this.BTN_ID_DIVIDE --> integer
this.BTN_ID_DIVIDE --> integer
this.BTN_ID_DOT --> integer
this.BTN_ID_MINUS --> integer
this.BTN_ID_MINUS --> integer
this.BTN_ID_MINUS --> integer
this.BTN_ID_MINUS --> integer
this.BTN_ID_MULTIPLY --> integer
this.BTN_ID_MULTIPLY --> integer
this.BTN_ID_PLUS --> integer
this.BTN_ID_PLUS --> integer
this.BTN_ID_PLUS --> integer
this.BTN_ID_PLUS --> integer
this.Calculate --> []() -> void
this.Calculate() --> void
this.HandleBackKey --> []() -> void
this.HandleBackKey() --> void
this.HandleClearKey --> []() -> void
this.HandleClearKey() --> void
this.HandleEqualKey --> []() -> void
this.HandleEqualKey() --> void
this.HandleOperatorKeys --> [](integer) -> void
this.HandleOperatorKeys(k) --> void
this.MAX_PRINTABLE_CHARS --> integer
this.MIN_PRINTABLE_VALUE --> float
this.MODE_INVALID --> integer
this.MODE_INVALID --> integer
this.MODE_INVALID --> integer
this.MODE_INVALID --> integer
this.MODE_INVALID --> integer
this.MODE_INVALID --> integer
this.MODE_INVALID --> integer
this.MODE_INVALID --> integer
this.MODE_OPERAND1 --> integer
this.MODE_OPERAND1 --> integer
this.MODE_OPERAND1 --> integer
this.MODE_OPERAND1 --> integer
this.MODE_OPERAND1 --> integer
this.MODE_OPERAND1 --> integer
this.MODE_OPERAND1 --> integer
this.MODE_OPERAND1 --> integer
this.MODE_OPERAND1 --> integer
this.MODE_OPERAND1 --> integer
this.MODE_OPERAND1 --> integer
this.MODE_OPERAND2 --> integer
this.MODE_OPERAND2 --> integer
this.MODE_OPERAND2 --> integer
this.MODE_OPERAND2 --> integer
this.MODE_OPERAND2 --> integer
this.MODE_OPERAND2 --> integer
this.MODE_OPERAND2 --> integer
this.MODE_OPERATOR --> integer
this.MODE_OPERATOR --> integer
this.MODE_OPERATOR --> integer
this.MODE_OPERATOR --> integer
this.MODE_OPERATOR --> integer
this.MODE_OPERATOR --> integer
this.MODE_OPERATOR --> integer
this.MODE_RESULT --> integer
this.MODE_RESULT --> integer
this.MODE_RESULT --> integer
this.MODE_RESULT --> integer
this.MODE_RESULT --> integer
this.MODE_RESULT --> integer
this.UpdateOperand --> [](integer) -> boolean
this.UpdateOperand --> [](integer) -> boolean
this.UpdateOperand --> [](integer) -> boolean
this.UpdateOperand --> [](integer) -> boolean
this.UpdateOperand(k) --> boolean
this.UpdateOperand(k) --> boolean
this.UpdateOperand(k) --> boolean
this.UpdateOperand(k) --> boolean
this.calcMode --> integer
this.calcMode --> integer
this.calcMode --> integer
this.calcMode --> integer
this.calcMode --> integer
this.calcMode --> integer
this.calcMode --> integer
this.calcMode --> integer
this.calcMode --> integer
this.calcMode --> integer
this.calcMode --> integer
this.calcMode --> integer
this.calcMode --> integer
this.calcMode --> integer
this.calcMode --> integer
this.calcMode --> integer
this.calcMode --> integer
this.calcMode --> integer
this.calcMode --> integer
this.calcMode = this.MODE_INVALID --> integer
this.calcMode = this.MODE_INVALID --> integer
this.calcMode = this.MODE_INVALID --> integer
this.calcMode = this.MODE_OPERAND1 --> integer
this.calcMode = this.MODE_OPERAND1 --> integer
this.calcMode = this.MODE_OPERAND1 --> integer
this.calcMode = this.MODE_OPERAND1 --> integer
this.calcMode = this.MODE_OPERAND2 --> integer
this.calcMode = this.MODE_OPERAND2 --> integer
this.calcMode = this.MODE_OPERATOR --> integer
this.calcMode = this.MODE_OPERATOR --> integer
this.calcMode = this.MODE_RESULT --> integer
this.calcMode === this.MODE_OPERAND1 --> boolean
this.calcMode === this.MODE_OPERAND1 --> boolean
this.errString --> string
this.errString --> string
this.errString --> string
this.errString --> string
this.errString --> string
this.errString --> string
this.errString --> string
this.errString --> string
this.errString --> string
this.errString --> string
this.errString = "" --> string
this.errString = "-INF" --> string
this.errString = "-INF" --> string
this.errString = "INF" --> string
this.errString = "INF" --> string
this.errString = "NAN" --> string
this.errString == "-INF" --> boolean
this.errString == "INF" --> boolean
this.op1 != "" --> boolean
this.op1 --> string
this.op1 --> string
this.op1 --> string
this.op1 --> string
this.op1 --> string
this.op1 --> string
this.op1 --> string
this.op1 --> string
this.op1 --> string
this.op1 --> string
this.op1 --> string
this.op1 --> string
this.op1 --> string
this.op1 --> string
this.op1 --> string
this.op1 --> string
this.op1 --> string
this.op1 --> string
this.op1 --> string
this.op1 --> string
this.op1 --> string
this.op1 = "" --> string
this.op1 = "" --> string
this.op1 = "0" --> string
this.op1 = "0" --> string
this.op1 = op --> string
this.op1 = op1.toExponential(7) --> string
this.op1 = op1.toString() --> string
this.op1 = this.op1.substring(0, this.op1.length - 1) --> string
this.op1 == "" --> boolean
this.op1 == "-inf" --> boolean
this.op1 == "0" --> boolean
this.op1 == "0" --> boolean
this.op1 == "inf" --> boolean
this.op1.length - 1 --> integer
this.op1.length --> integer
this.op1.substring --> [](integer,integer) -> string
this.op1.substring(0, this.op1.length - 1) --> string
this.op2 != "" --> boolean
this.op2 --> string
this.op2 --> string
this.op2 --> string
this.op2 --> string
this.op2 --> string
this.op2 --> string
this.op2 --> string
this.op2 --> string
this.op2 --> string
this.op2 --> string
this.op2 --> string
this.op2 --> string
this.op2 --> string
this.op2 --> string
this.op2 --> string
this.op2 --> string
this.op2 --> string
this.op2 --> string
this.op2 --> string
this.op2 = "" --> string
this.op2 = "" --> string
this.op2 = "" --> string
this.op2 = "" --> string
this.op2 = "0" --> string
this.op2 = "0" --> string
this.op2 = "1" --> string
this.op2 = op --> string
this.op2 = this.op1 --> string
this.op2 = this.op2.substring(0, this.op2.length - 1) --> string
this.op2 == "" --> boolean
this.op2 == "" --> boolean
this.op2 == "" || this.op2 == "-" --> boolean
this.op2 == "-" --> boolean
this.op2.length - 1 --> integer
this.op2.length --> integer
this.op2.substring --> [](integer,integer) -> string
this.op2.substring(0, this.op2.length - 1) --> string
this.operator --> integer
this.operator --> integer
this.operator --> integer
this.operator --> integer
this.operator --> integer
this.operator --> integer
this.operator --> integer
this.operator --> integer
this.operator = k --> integer
this.operator = k --> integer
this.operator = this.BTN_ID_COUNT --> integer
this.operator = this.BTN_ID_COUNT --> integer
this.operator = this.BTN_ID_PLUS --> integer
this.operator == this.BTN_ID_DIVIDE --> boolean
this.operator == this.BTN_ID_MULTIPLY --> boolean
this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE --> boolean
true --> boolean
true --> boolean
{BTN_ID_0: BTN_ID_0, BTN_ID_1: BTN_ID_1, BTN_ID_2: BTN_ID_2, BTN_ID_3: BTN_ID_3, BTN_ID_4: BTN_ID_4, BTN_ID_5: BTN_ID_5, BTN_ID_6: BTN_ID_6, BTN_ID_7: BTN_ID_7, BTN_ID_8: BTN_ID_8, BTN_ID_9: BTN_ID_9, BTN_ID_DOT: BTN_ID_DOT, BTN_ID_PLUS: BTN_ID_PLUS, BTN_ID_MINUS: BTN_ID_MINUS, BTN_ID_MULTIPLY: BTN_ID_MULTIPLY, BTN_ID_DIVIDE: BTN_ID_DIVIDE, BTN_ID_BACK: BTN_ID_BACK, BTN_ID_CLEAR: BTN_ID_CLEAR, BTN_ID_EQUAL: BTN_ID_EQUAL, BTN_ID_COUNT: BTN_ID_COUNT, MODE_OPERAND1: MODE_OPERAND1, MODE_OPERATOR: MODE_OPERATOR, MODE_OPERAND2: MODE_OPERAND2, MODE_RESULT: MODE_RESULT, MODE_INVALID: MODE_INVALID, MAX_PRINTABLE_CHARS: MAX_PRINTABLE_CHARS, MAX_DIGITS_DISPLAY: MAX_DIGITS_DISPLAY, DIGITS_AFTER_DECIMAL_POINT: DIGITS_AFTER_DECIMAL_POINT, MAX_DIGITS_AFTER_DECIMAL_POINT: MAX_DIGITS_AFTER_DECIMAL_POINT, MIN_PRINTABLE_VALUE: MIN_PRINTABLE_VALUE, errString: "ERROR", calcMode: MODE_OPERAND1, operator: BTN_ID_COUNT, op1: "0", op2: "", GetResult: function() {
  switch (this.calcMode) {
    case this.MODE_OPERATOR:
    case this.MODE_RESULT:
    case this.MODE_OPERAND1:
      return this.op1;
    case this.MODE_OPERAND2:
      if (this.op2 == "") 
      {
        return this.op1;
      }
      return this.op2;
    case this.MODE_INVALID:
      return this.errString;
  }
  return this.errString;
}, UpdateOperand: function(k) {
  var op = "";
  var charCount = this.MAX_PRINTABLE_CHARS;
  var index = -1;
  if (this.calcMode === this.MODE_OPERAND1) 
  {
    op = this.op1;
  } else {
    op = this.op2;
  }
  var sign = op.charAt(0);
  if (sign == "-" || sign == "+") 
  {
    charCount++;
  }
  index = op.indexOf(".");
  if (index != -1) 
  {
    charCount++;
  }
  if (op.length < charCount) 
  {
    if (k == this.BTN_ID_DOT) 
    {
      if (index == -1) 
      {
        if (op == "" || op == "-") 
        {
          op = op.concat("0");
        }
        op = op.concat(".");
      }
    } else if ((this.BTN_ID_0 <= k) && (k <= this.BTN_ID_9)) 
    {
      if (op == "0") 
      {
        op = "";
      }
      op = op.concat(k.toString());
    } else if (k == this.BTN_ID_MINUS) 
    {
      if (op == "") 
      {
        op = op.concat("-");
      }
    }
    if (this.calcMode === this.MODE_OPERAND1) 
    {
      this.op1 = op;
    } else {
      this.op2 = op;
    }
    return true;
  }
  return false;
}, HandleNumKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return true;
    case this.MODE_RESULT:
      this.HandleClearKey();
      this.calcMode = this.MODE_OPERAND1;
      break;
    case this.MODE_OPERATOR:
      this.op2 = "";
      this.calcMode = this.MODE_OPERAND2;
      break;
    case this.MODE_OPERAND1:
    case this.MODE_OPERAND2:
      break;
  }
  return this.UpdateOperand(k);
}, HandleOperatorKeys: function(k) {
  k = hint;
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      if ((k === this.BTN_ID_PLUS) || (k === this.BTN_ID_MINUS)) 
      {
        this.op2 = "";
        this.UpdateOperand(k);
        this.calcMode = this.MODE_OPERAND2;
        break;
      }
      this.operator = k;
      break;
    case this.MODE_OPERAND1:
      if ((this.op1 == "") || (this.op1 == "0")) 
      {
        if (k == this.BTN_ID_PLUS || k == this.BTN_ID_MINUS) 
        {
          if (this.op1 == "0") 
          {
            this.UpdateOperand(k);
          } else {
            this.op1 = "";
            this.UpdateOperand(k);
            break;
          }
        }
        this.op1 = "0";
      }
      this.calcMode = this.MODE_OPERATOR;
      this.operator = k;
      break;
    case this.MODE_OPERAND2:
      this.HandleEqualKey();
    case this.MODE_RESULT:
      this.calcMode = this.MODE_OPERAND1;
      this.op2 = "";
      this.HandleOperatorKeys(k);
      break;
  }
}, Calculate: function() {
  if ((this.errString == "INF") || (this.errString == "-INF")) 
  return;
  var op1 = parseFloat(this.op1);
  var op2 = parseFloat(this.op2);
  switch (this.operator) {
    case this.BTN_ID_PLUS:
      op1 += op2;
      break;
    case this.BTN_ID_MINUS:
      op1 -= op2;
      break;
    case this.BTN_ID_MULTIPLY:
      op1 *= op2;
      break;
    case this.BTN_ID_DIVIDE:
      if (op2 != 0) 
      {
        op1 /= op2;
      } else {
        this.calcMode = this.MODE_INVALID;
        if (op1 == 0) 
        {
          this.errString = "NAN";
        } else {
          if (op1 > 0) 
          {
            this.errString = "INF";
          } else {
            this.errString = "-INF";
          }
        }
        return;
      }
      break;
  }
  var indexOfDec = 0;
  indexOfDec = op1.toString().indexOf(".");
  if (indexOfDec > 7 || (indexOfDec == -1 && op1.toString().length > 8)) 
  {
    this.op1 = op1.toExponential(7);
  } else {
    this.op1 = op1.toString();
  }
  if (op1 > 0 && op1 < this.MIN_PRINTABLE_VALUE) 
  {
    this.op1 = "0";
  }
  if (this.op1 == "inf") 
  {
    this.errString = "INF";
    this.calcMode = this.MODE_INVALID;
  } else if (this.op1 == "-inf") 
  {
    this.errString = "-INF";
    this.calcMode = this.MODE_INVALID;
  } else {
    this.calcMode = this.MODE_RESULT;
  }
}, HandleEqualKey: function() {
  switch (this.calcMode) {
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.op2 = this.op1;
      break;
    case this.MODE_OPERAND1:
      this.op2 = "0";
      this.operator = this.BTN_ID_PLUS;
      break;
    case this.MODE_OPERAND2:
      if (this.op2 == "" || this.op2 == "-") 
      {
        if (this.operator == this.BTN_ID_MULTIPLY || this.operator == this.BTN_ID_DIVIDE) 
        {
          this.op2 = "1";
        } else {
          this.op2 = "0";
        }
      }
      break;
    case this.MODE_RESULT:
      break;
  }
  this.Calculate();
}, HandleClearKey: function() {
  this.calcMode = this.MODE_OPERAND1;
  this.operator = this.BTN_ID_COUNT;
  this.op1 = "";
  this.op2 = "";
  this.errString = "";
}, HandleBackKey: function() {
  switch (this.calcMode) {
    case this.MODE_RESULT:
    case this.MODE_INVALID:
      return;
    case this.MODE_OPERATOR:
      this.operator = this.BTN_ID_COUNT;
      this.calcMode = this.MODE_OPERAND1;
    case this.MODE_OPERAND1:
      if (this.op1 != "") 
      {
        this.op1 = this.op1.substring(0, this.op1.length - 1);
      }
      break;
    case this.MODE_OPERAND2:
      if (this.op2 != "") 
      {
        this.op2 = this.op2.substring(0, this.op2.length - 1);
      } else {
        this.calcMode = this.MODE_OPERATOR;
        this.HandleBackKey();
      }
      break;
  }
}} --> {  | BTN_ID_0: integer, BTN_ID_1: integer, BTN_ID_2: integer, BTN_ID_3: integer, BTN_ID_4: integer, BTN_ID_5: integer, BTN_ID_6: integer, BTN_ID_7: integer, BTN_ID_8: integer, BTN_ID_9: integer, BTN_ID_DOT: integer, BTN_ID_PLUS: integer, BTN_ID_MINUS: integer, BTN_ID_MULTIPLY: integer, BTN_ID_DIVIDE: integer, BTN_ID_BACK: integer, BTN_ID_CLEAR: integer, BTN_ID_EQUAL: integer, BTN_ID_COUNT: integer, MODE_OPERAND1: integer, MODE_OPERATOR: integer, MODE_OPERAND2: integer, MODE_RESULT: integer, MODE_INVALID: integer, MAX_PRINTABLE_CHARS: integer, MAX_DIGITS_DISPLAY: integer, DIGITS_AFTER_DECIMAL_POINT: integer, MAX_DIGITS_AFTER_DECIMAL_POINT: integer, MIN_PRINTABLE_VALUE: float, errString: string, calcMode: integer, operator: integer, op1: string, op2: string, GetResult: []() -> string, UpdateOperand: [](integer) -> boolean, HandleNumKeys: [](integer) -> boolean, HandleOperatorKeys: [](integer) -> void, Calculate: []() -> void, HandleEqualKey: []() -> void, HandleClearKey: []() -> void, HandleBackKey: []() -> void }
